{"version":2,"updates":[{"id":0,"timestamp":1755105837309,"update":"AdQCoqDFqAoAJwEEYm90cyQzOTg4MDFmZS00YjM1LTRjZTQtODI2Zi0yMzgzNWMxYjlhYzUBJwCioMWoCgAGc3lzdGVtAgQAoqDFqAoBFGFiLmFjdGlvbi5jcmVhdGVfYm90JwCioMWoCgAIYWJBY3Rpb24CBACioMWoChYEdHJ1ZScAoqDFqAoABGZvcm0CBACioMWoChsHbm90aGluZycAoqDFqAoAC2Rlc2NyaXB0aW9uAgQAoqDFqAojDUNyZWF0ZXMgYm90cy4nAKKgxagKABBhYkdyaWRNZW51QWN0aW9uAgQAoqDFqAoxsQVAY29uc3QgZ3JpZEluZm9ybWF0aW9uID0gbGlua3MucmVtZW1iZXIudGFncy5hYkdyaWRGb2N1czsKY29uc3QgbmV3Qm90ID0ge307CgpuZXdCb3QuY3JlYXRvciA9IG51bGw7Cm5ld0JvdFtncmlkSW5mb3JtYXRpb24uZGltZW5zaW9uXSA9IHRydWU7Cm5ld0JvdFtncmlkSW5mb3JtYXRpb24uZGltZW5zaW9uICsgIlgiXSA9IGdyaWRJbmZvcm1hdGlvbi5wb3NpdGlvbi54OwpuZXdCb3RbZ3JpZEluZm9ybWF0aW9uLmRpbWVuc2lvbiArICJZIl0gPSBncmlkSW5mb3JtYXRpb24ucG9zaXRpb24ueTsKbmV3Qm90LmNvbG9yID0gbGlua3MucGVyc29uYWxpdHkudGFncy5hYkJhc2VTdHJva2VDb2xvcjsKCmxldCBjcmVhdGVkQm90ID0gY3JlYXRlKG5ld0JvdCk7CgpzaG91dCgiYWJNZW51UmVmcmVzaCIpOwoKbGlua3MubWFuaWZlc3RhdGlvbi5hYkNsaWNrKCk7CgpsaW5rcy5tYW5pZmVzdGF0aW9uLmxpbmtzLmFiQm90Lm1hc2tzLmxpbmVDb2xvciA9IGxpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCYXNlU3Ryb2tlQ29sb3I7CmxpbmtzLm1hbmlmZXN0YXRpb24ubGlua3MuYWJCb3QubWFza3MubGluZVRvID0gY3JlYXRlZEJvdC5pZDsKCmxpbmtzLnJlbWVtYmVyLm1hc2tzLmFiQm90Rm9jdXMgPSAi8J+UlyIgKyBjcmVhdGVkQm90LmlkOwoKbGlua3MubWFuaWZlc3RhdGlvbi5hYkNsaWNrKHttZW51OiAiYm90In0pOycAoqDFqAoAD2FiR3JpZE1lbnVMYWJlbAIEAKKgxagK4QUDYm90JwCioMWoCgAOYWJHcmlkTWVudUljb24CBACioMWoCuUFB2FkZF9ib3gnAKKgxagKAAhyZW1lbWJlcgIEAKKgxagK7QUo8J+Ul2U1MzgwYTZiLThiNGQtNGE4Yi04YjA0LTU4ZTFlYjAzZTVlNycAoqDFqAoADW1hbmlmZXN0YXRpb24CBACioMWoCpQGKPCflJdkY2E1ZDk4Ny1jNGQ4LTQ2ZTQtYjYwYy1kYWE3YjJmNGRkYWQnAKKgxagKAAhhYklnbm9yZQIEAKKgxagKuwYEdHJ1ZScAoqDFqAoAE2FiR3JpZE1lbnVTb3J0T3JkZXICBACioMWoCsAGATEnAKKgxagKAAlhYlZlcnNpb24CBACioMWoCsIGBDEwLjUnAKKgxagKAAtwZXJzb25hbGl0eQIEAKKgxagKxwYo8J+Ul2I3NmRmYmM0LTg1NGItNGY2ZC1hOTFmLWE5NDg2OTQ3NzRkYicBBGJvdHMkNTg0OWFmNTUtNWU4YS00OGQ2LTkxMDYtMTk5NDk4ZTllYzA4AScAoqDFqAruBgZzeXN0ZW0CBACioMWoCu8GEWFiLmFjdGlvbi5kZXN0cm95JwCioMWoCu4GCGFiQWN0aW9uAgQAoqDFqAqBBwR0cnVlJwCioMWoCu4GBGZvcm0CBACioMWoCoYHB25vdGhpbmcnAKKgxagK7gYPYWJCb3RNZW51QWN0aW9uAgQAoqDFqAqOB8ACQGNvbnN0IHRhcmdldEJvdCA9IHRoYXQuYm90LmxpbmtzLnRhcmdldEJvdDsKCmlmICh0aGF0LmJvdC5saW5rcy50YXJnZXRPcmlnaW5Cb3RzKSB7CiAgICAvLyBEZXN0cm95IGJvdHMgYmVsb25naW5nIHRvIGFiSURPcmlnaW4uCiAgICBkZXN0cm95KHRoYXQuYm90LmxpbmtzLnRhcmdldE9yaWdpbkJvdHMpOwp9IGVsc2UgewogICAgLy8gRGVzdHJveSB0aGUgc2luZ2xlIHRhcmdldCBib3QuCiAgICBkZXN0cm95KHRhcmdldEJvdCk7Cn0KCnNob3V0KCJhYk1lbnVSZWZyZXNoIik7CgpsaW5rcy5tYW5pZmVzdGF0aW9uLmFiQ2xpY2soeyByZXNldDogdHJ1ZSB9KTsnAKKgxagK7gYOYWJCb3RNZW51TGFiZWwCBACioMWoCs8JB2Rlc3Ryb3knAKKgxagK7gYNYWJCb3RNZW51SWNvbgIEAKKgxagK1wkOZGVsZXRlX2ZvcmV2ZXInAKKgxagK7gYSYWJCb3RNZW51U29ydE9yZGVyAgQAoqDFqArmCQMxMDAnAKKgxagK7gYIcmVtZW1iZXICBACioMWoCuoJKPCflJdlNTM4MGE2Yi04YjRkLTRhOGItOGIwNC01OGUxZWIwM2U1ZTcnAKKgxagK7gYNbWFuaWZlc3RhdGlvbgIEAKKgxagKkQoo8J+Ul2RjYTVkOTg3LWM0ZDgtNDZlNC1iNjBjLWRhYTdiMmY0ZGRhZCcAoqDFqAruBghhYklnbm9yZQIEAKKgxagKuAoEdHJ1ZScAoqDFqAruBg5hYkJvdE1lbnVDb2xvcgIEAKKgxagKvQoHI0Q5MzAzMCcAoqDFqAruBhdhYk11bHRpcGxlQm90TWVudUFjdGlvbgIEAKKgxagKxQrAA0Bjb25zdCBhbGxUYXJnZXRCb3RzID0gQXJyYXkuaXNBcnJheShsaW5rcy5yZW1lbWJlci5saW5rcy5hYk11bHRpcGxlQm90Rm9jdXMpID8gbGlua3MucmVtZW1iZXIubGlua3MuYWJNdWx0aXBsZUJvdEZvY3VzIDogW2xpbmtzLnJlbWVtYmVyLmxpbmtzLmFiTXVsdGlwbGVCb3RGb2N1c107CmNvbnN0IGJ1aWxkZXIgPSBhYi5saW5rcy5tYW5pZmVzdGF0aW9uLmxpbmtzLmFiQm90ID8gYWIubGlua3MubWFuaWZlc3RhdGlvbi5saW5rcy5hYkJvdC5pZCA6IG51bGw7CmNvbnN0IHJlbGV2YW50VGFyZ2V0Qm90cyA9IGFsbFRhcmdldEJvdHMuZmlsdGVyKCh0YXJnZXQpID0+IHRhcmdldC5pZCAhPSBidWlsZGVyKTsKCmRlc3Ryb3kocmVsZXZhbnRUYXJnZXRCb3RzKTsKCnNob3V0KCJhYk1lbnVSZWZyZXNoIik7CgpsaW5rcy5tYW5pZmVzdGF0aW9uLmFiQ2xpY2soeyByZXNldDogdHJ1ZSB9KTsnAKKgxagK7gYVYWJNdWx0aXBsZUJvdE1lbnVJY29uAgQAoqDFqAqGDg5kZWxldGVfZm9yZXZlcicAoqDFqAruBhZhYk11bHRpcGxlQm90TWVudUxhYmVsAgQAoqDFqAqVDgdkZXN0cm95JwCioMWoCu4GGmFiTXVsdGlwbGVCb3RNZW51U29ydE9yZGVyAgQAoqDFqAqdDgMxMDAnAKKgxagK7gYWYWJNdWx0aXBsZUJvdE1lbnVDb2xvcgIEAKKgxagKoQ4HI0Q5MzAzMCcAoqDFqAruBglhYlZlcnNpb24CBACioMWoCqkOBDEwLjUnAKKgxagK7gYTYWJCb3RNZW51T25HZW5lcmF0ZQIEAKKgxagKrg6tB0Bjb25zdCB0YXJnZXRCb3QgPSBsaW5rcy5yZW1lbWJlci5saW5rcy5hYkJvdEZvY3VzOwoKaWYgKHRhcmdldEJvdCkgewogICAgdGFncy5sYWJlbCA9ICdkZXN0cm95JzsKICAgIHRhZ3MudGFyZ2V0Qm90ID0gZ2V0TGluayh0YXJnZXRCb3QpOwogICAgdGFncy5vbktleURvd24gPSBgQAogICAgICAgIGlmICh0aGF0LmtleXMuaW5jbHVkZXMoIlNoaWZ0IikpIHsKICAgICAgICAgICAgaWYgKGxpbmtzLnRhcmdldEJvdCAmJiBsaW5rcy50YXJnZXRCb3QudGFncy5hYklET3JpZ2luKSB7CiAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgYnV0dG9uIHRvIGRlc3Ryb3kgYWxsIGJvdHMgd2l0aCBzYW1lIGFiSURPcmlnaW4uCiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRPcmlnaW5Cb3RzID0gZ2V0Qm90cyhiID0+IHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gYi50YWdzLmFiSURPcmlnaW4gPT09IGxpbmtzLnRhcmdldEJvdC50YWdzLmFiSURPcmlnaW47CiAgICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICAgIG1hc2tzLmxhYmVsID0gJ2Rlc3Ryb3kgJyArIGxpbmtzLnRhcmdldEJvdC50YWdzLmFiSURPcmlnaW4gKyAnICgnICsgdGFyZ2V0T3JpZ2luQm90cy5sZW5ndGggKyAnIGJvdHMpJzsKICAgICAgICAgICAgICAgIHRhZ3MudGFyZ2V0T3JpZ2luQm90cyA9IGdldExpbmsodGFyZ2V0T3JpZ2luQm90cyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICBgOwogICAgdGFncy5vbktleVVwID0gYEAKICAgICAgICBpZiAodGhhdC5rZXlzLmluY2x1ZGVzKCJTaGlmdCIpKSB7CiAgICAgICAgICAgIG1hc2tzLmxhYmVsID0gbnVsbDsKICAgICAgICAgICAgdGFncy50YXJnZXRPcmlnaW5Cb3RzID0gbnVsbDsKICAgICAgICB9CiAgICBgOwp9IGVsc2UgewogICAgLy8gTm8gYm90IHRvIGRlc3Ryb3kuCiAgICBkZXN0cm95KHRoaXNCb3QpOwp9JwCioMWoCu4GG2FiTXVsdGlwbGVCb3RNZW51T25HZW5lcmF0ZQIEAKKgxagK3BXvBEBjb25zdCBhbGxUYXJnZXRCb3RzID0gQXJyYXkuaXNBcnJheShsaW5rcy5yZW1lbWJlci5saW5rcy5hYk11bHRpcGxlQm90Rm9jdXMpID8gbGlua3MucmVtZW1iZXIubGlua3MuYWJNdWx0aXBsZUJvdEZvY3VzIDogW2xpbmtzLnJlbWVtYmVyLmxpbmtzLmFiTXVsdGlwbGVCb3RGb2N1c107CmNvbnN0IGJ1aWxkZXIgPSBhYi5saW5rcy5tYW5pZmVzdGF0aW9uLmxpbmtzLmFiQm90ID8gYWIubGlua3MubWFuaWZlc3RhdGlvbi5saW5rcy5hYkJvdC5pZCA6IG51bGw7CmNvbnN0IHJlbGV2YW50VGFyZ2V0Qm90cyA9IGFsbFRhcmdldEJvdHMuZmlsdGVyKCh0YXJnZXQpID0+IHRhcmdldC5pZCAhPSBidWlsZGVyKTsKCmlmIChyZWxldmFudFRhcmdldEJvdHMubGVuZ3RoID4gMSkgewogICAgLy8gTXVsdGlwbGUgYm90cy4KICAgIHRhZ3MubGFiZWwgPSBgZGVzdHJveSAoJHtyZWxldmFudFRhcmdldEJvdHMubGVuZ3RofSBib3RzKWA7Cn0gZWxzZSBpZiAocmVsZXZhbnRUYXJnZXRCb3RzLmxlbmd0aCA9PT0gMSkgewogICAgLy8gU2luZ2xlIGJvdC4KICAgIHRhZ3MubGFiZWwgPSBgZGVzdHJveWA7Cn0gZWxzZSB7CiAgICAvLyBObyBib3RzIHRvIGRlc3Ryb3kuCiAgICBkZXN0cm95KHRoaXNCb3QpOwp9JwEEYm90cyQ2YjNkOTc0NC00NDQ4LTRlZjUtOTZhMi03MTI4MWM0MmFmNmMBJwCioMWoCswaCWFiVmVyc2lvbgIEAKKgxagKzRoEMTAuNScAoqDFqArMGgZzeXN0ZW0CBACioMWoCtIaEWFiLmFjdGlvbi52ZXJzaW9uJwCioMWoCswaFGFiQWN0aW9uTWFqb3JWZXJzaW9uAgQAoqDFqArkGgExJwCioMWoCswaFGFiQWN0aW9uTWlub3JWZXJzaW9uAgQAoqDFqArmGgE0JwCioMWoCswaDW9uU2tpbGxVcGRhdGUCBACioMWoCugamQFAY29uc3QgdmVyc2lvblN0cmluZyA9IHRhZ3MuYWJBY3Rpb25NYWpvclZlcnNpb24gKyAiLiIgKyB0YWdzLmFiQWN0aW9uTWlub3JWZXJzaW9uOwoKY29uc29sZS5sb2coIltBQkFjdGlvbl0gTG9hZGVkIEFCIEFjdGlvbiB2ZXJzaW9uICIgKyB2ZXJzaW9uU3RyaW5nKTsnAKKgxagKzBoIYWJJZ25vcmUCBACioMWoCoIcBHRydWUnAKKgxagKzBoIYWJBY3Rpb24CBACioMWoCoccBHRydWUnAKKgxagKzBoEZm9ybQIEAKKgxagKjBwHbm90aGluZycBBGJvdHMkNzE3NTY0NWMtNGI1My00NDU0LTg3MTYtZmMwZTY4ZGIyNjY1AScAoqDFqAqUHAZzeXN0ZW0CBACioMWoCpUcD2FiLmFjdGlvbi5sb2dpbicAoqDFqAqUHAhhYkFjdGlvbgIEAKKgxagKpRwEdHJ1ZScAoqDFqAqUHAhhYklnbm9yZQIEAKKgxagKqhwEdHJ1ZScAoqDFqAqUHARmb3JtAgQAoqDFqAqvHAdub3RoaW5nJwCioMWoCpQcD2FiQ29yZU1lbnVDb2xvcgIEAKKgxagKtxwHI0YyQjcwNScAoqDFqAqUHBNhYkNvcmVNZW51U29ydE9yZGVyAgQAoqDFqAq/HAItNScAoqDFqAqUHBBhYkNvcmVNZW51QWN0aW9uAgQAoqDFqArCHCxAb3MuZ29Ub1VSTChsaW5rcy5yZW1lbWJlci50YWdzLmFiQXV0aFNpdGUpOycAoqDFqAqUHBRhYkNvcmVNZW51T25HZW5lcmF0ZQIEAKKgxagK7xygAkBhd2FpdCBvcy5yZXF1ZXN0QXV0aEJvdEluQmFja2dyb3VuZCgpOwoKaWYgKCFsaW5rcy5yZW1lbWJlci50YWdzLmFiQXV0aFNpdGUpCnsKICAgIGRlc3Ryb3kodGhpc0JvdCk7Cn0KCnRhZ3MubGFiZWwgPSAiYnV5ICIgKyBsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5OwoKaWYgKCFhdXRoQm90KQp7CiAgICByZXR1cm47Cn0KZWxzZSBpZiAoYXV0aEJvdC50YWdzLnN1YnNjcmlwdGlvblRpZXIgPT0gIkZyZWVQbGF5IikKewogICAgcmV0dXJuOwp9CgpkZXN0cm95KHRoaXNCb3QpOycAoqDFqAqUHA5hYkNvcmVNZW51SWNvbgIEAKKgxagKkB8OYWNjb3VudF9jaXJjbGUnAKKgxagKlBwIcmVtZW1iZXICBACioMWoCp8fKPCflJdlNTM4MGE2Yi04YjRkLTRhOGItOGIwNC01OGUxZWIwM2U1ZTcnAKKgxagKlBwJYWJWZXJzaW9uAgQAoqDFqArGHwQxMC41JwCioMWoCpQcC3BlcnNvbmFsaXR5AgQAoqDFqArLHyjwn5SXYjc2ZGZiYzQtODU0Yi00ZjZkLWE5MWYtYTk0ODY5NDc3NGRiJwEEYm90cyRiMzM5YzExOC00ODlhLTQ2NmItYmE5Zi1iMDdhNWY5YjY2NGYBJwCioMWoCvIfBnN5c3RlbQIEAKKgxagK8x8PYWIuYWN0aW9uLnBhc3RlKACioMWoCvIfCGFiQWN0aW9uAXgnAKKgxagK8h8EZm9ybQIEAKKgxagKhCAHbm90aGluZycAoqDFqAryHwtkZXNjcmlwdGlvbgIEAKKgxagKjCArYWIgc2tpbGwgdXNlZCBmb3IgY29weWluZyBhbmQgcGFzdGluZyBib3RzLicAoqDFqAryHwdvblBhc3RlAgQAoqDFqAq4IP8HQGlmICghYnVpbGRlclZlcnNpb24pCnsKICAgIHJldHVybjsKfQoKY29uc3QgTUFDUk9TID0gWwogICAgewogICAgICAgIHRlc3Q6IC8oPzpb4oCc4oCdXSkvZywKICAgICAgICByZXBsYWNlbWVudDogKHZhbCkgPT4gJyInLAogICAgfSwKICAgIHsKICAgICAgICB0ZXN0OiAvKD86W+KAmOKAmV0pL2csCiAgICAgICAgcmVwbGFjZW1lbnQ6ICh2YWwpID0+ICInIiwKICAgIH0sCl07CgpsZXQgZm9ybWF0dGVkQ29weSA9IHJlcGxhY2VNYWNyb3ModGhhdC50ZXh0KTsKbGV0IGNvcHlCb3QgPSBKU09OLnBhcnNlKGZvcm1hdHRlZENvcHkpOwpsZXQgcGFzdGVkRGF0YSA9ICFjb3B5Qm90LnN0YXRlID8ge1tjb3B5Qm90LmlkXTogY29weUJvdH0gOiBjb3B5Qm90LnN0YXRlOwpsZXQgZGltTW9kID0gbGlua3MucmVtZW1iZXIudGFncy5hYkZvY3VzRGF0YTsKCmlmIChPYmplY3Qua2V5cyhwYXN0ZWREYXRhKS5sZW5ndGggPT0gMSAmJiBkaW1Nb2QpCnsKICAgIHBhc3RlZERhdGFbZGltTW9kLmRpbWVuc2lvbl0gPSB0cnVlOwogICAgcGFzdGVkRGF0YVtkaW1Nb2QuZGltZW5zaW9uKyJYIl0gPSBkaW1Nb2QueDsKICAgIHBhc3RlZERhdGFbZGltTW9kLmRpbWVuc2lvbisiWSJdID0gZGltTW9kLnk7CgogICAgb3MudG9hc3QoImJvdCBhZGRlZCB0byBpbnN0Iik7Cn0KZWxzZQp7CiAgICBvcy50b2FzdCgiYm90cyBhZGRlZCB0byBpbnN0Iik7Cn0KCmFiLmxvZyhsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgIjogcGFzdGVkIGRhdGEiKTsKCmxpbmtzLmNyZWF0ZS5hYkNyZWF0ZUJvdHMoe2JvdHM6IHBhc3RlZERhdGEsIHNvdXJjZUV2ZW50OiAncGFzdGUnfSk7CgpmdW5jdGlvbiByZXBsYWNlTWFjcm9zKHRleHQpIHsKICAgIGlmICghdGV4dCkgewogICAgICAgIHJldHVybiB0ZXh0OwogICAgfQoKICAgIGZvciAobGV0IG0gb2YgTUFDUk9TKSB7CiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShtLnRlc3QsIG0ucmVwbGFjZW1lbnQpOwogICAgfQoKICAgIHJldHVybiB0ZXh0Owp9JwCioMWoCvIfCHJlbWVtYmVyAgQAoqDFqAqwKCjwn5SXZTUzODBhNmItOGI0ZC00YThiLThiMDQtNThlMWViMDNlNWU3JwCioMWoCvIfBmNyZWF0ZQIEAKKgxagK1ygo8J+UlzM0YzNjMjEwLTViZjEtNDljZi1iMTUxLWVlMmQwN2YwZTY3MycAoqDFqAryHwhhYklnbm9yZQIEAKKgxagK/igEdHJ1ZScAoqDFqAryHwlvbktleURvd24CBACioMWoCoMpuglAaWYgKCFidWlsZGVyVmVyc2lvbiB8fCAoIWxpbmtzLnJlbWVtYmVyLmxpbmtzLmFiQm90Rm9jdXMgJiYgIWxpbmtzLnJlbWVtYmVyLmxpbmtzLmFiTXVsdGlwbGVCb3RGb2N1cykpCnsKICAgIHJldHVybjsKfQoKaWYgKHRoYXQua2V5cyA9PSAiYyIpCnsKICAgIGxldCBtZXRhSW5wdXQgPSBvcy5nZXRJbnB1dFN0YXRlKCJrZXlib2FyZCIsICJNZXRhIik7CgogICAgaWYgKCFtZXRhSW5wdXQpCiAgICB7CiAgICAgICAgbWV0YUlucHV0ID0gb3MuZ2V0SW5wdXRTdGF0ZSgia2V5Ym9hcmQiLCAiQ29udHJvbCIpOwogICAgfQogICAgCiAgICBpZiAoIW1ldGFJbnB1dCkKICAgIHsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgbGV0IGZvcm1hdHRlZEZpbGU7CiAgICBsZXQgc3RhdGUgPSB7fTsKCiAgICBpZiAobGlua3MucmVtZW1iZXIubGlua3MuYWJCb3RGb2N1cykKICAgIHsKICAgICAgICBsZXQgc2VsZWN0ZWRCb3QgPSBsaW5rcy5yZW1lbWJlci5saW5rcy5hYkJvdEZvY3VzOwoKICAgICAgICBzdGF0ZVtzZWxlY3RlZEJvdC5pZF0gPSBzZWxlY3RlZEJvdDsKCiAgICAgICAgYWIubG9nKGxpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCdWlsZGVySWRlbnRpdHkgKyAiOiBjb3BpZWQgYSBib3QgdG8gY2xpcGJvYXJkIik7CiAgICB9CiAgICBlbHNlIGlmIChsaW5rcy5yZW1lbWJlci5saW5rcy5hYk11bHRpcGxlQm90Rm9jdXMpCiAgICB7CiAgICAgICAgbGV0IHNlbGVjdGVkQm90cyA9IGxpbmtzLnJlbWVtYmVyLmxpbmtzLmFiTXVsdGlwbGVCb3RGb2N1czsKCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3RlZEJvdHMubGVuZ3RoOyBpKyspCiAgICAgICAgewogICAgICAgICAgICBzdGF0ZVtzZWxlY3RlZEJvdHNbaV0uaWRdID0gc2VsZWN0ZWRCb3RzW2ldOwogICAgICAgIH0KCiAgICAgICAgYWIubG9nKGxpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCdWlsZGVySWRlbnRpdHkgKyAiOiBjb3BpZWQgbXVsdGlwbGUgYm90cyB0byBjbGlwYm9hcmQiKTsKICAgIH0KCiAgICBsZXQgbmV3RmlsZSA9IHt9OwogICAgbmV3RmlsZS52ZXJzaW9uID0gMTsKICAgIG5ld0ZpbGUuc3RhdGUgPSBzdGF0ZTsKCiAgICBmb3JtYXR0ZWRGaWxlID0gSlNPTi5zdHJpbmdpZnkobmV3RmlsZSk7CgogICAgb3Muc2V0Q2xpcGJvYXJkKGZvcm1hdHRlZEZpbGUpOwoKICAgIG9zLnRvYXN0KCJib3QgY29waWVkIHRvIGNsaXBib2FyZCIpOwp9JwCioMWoCvIfCWFiVmVyc2lvbgIEAKKgxagKvjIEMTAuNScAoqDFqAryHwtwZXJzb25hbGl0eQIEAKKgxagKwzIo8J+Ul2I3NmRmYmM0LTg1NGItNGY2ZC1hOTFmLWE5NDg2OTQ3NzRkYicBBGJvdHMkYmRhYmQ2YzAtODlmOS00Zjc1LWIzNWMtMjZmNGVjNTIwN2Q2AScAoqDFqArqMgZzeXN0ZW0CBACioMWoCusyEGFiLmFjdGlvbi5yZXBvcnQnAKKgxagK6jIEZm9ybQIEAKKgxagK/DIHbm90aGluZycAoqDFqArqMhBhYkNvcmVNZW51QWN0aW9uAgQAoqDFqAqEMxFAb3MucmVwb3J0SW5zdCgpOycAoqDFqArqMhNhYkNvcmVNZW51U29ydE9yZGVyAgQAoqDFqAqWMwMxMDEnAKKgxagK6jIOYWJDb3JlTWVudUljb24CBACioMWoCpozBGZsYWcnAKKgxagK6jIPYWJDb3JlTWVudUxhYmVsAgQAoqDFqAqfMwZyZXBvcnQnAKKgxagK6jIIYWJBY3Rpb24CBACioMWoCqYzBHRydWUnAKKgxagK6jIIYWJJZ25vcmUCBACioMWoCqszBHRydWUnAKKgxagK6jIUYWJDb3JlTWVudU9uR2VuZXJhdGUCBACioMWoCrAzRkBpZiAoY29uZmlnQm90LnRhZ3Muc3RhdGljSW5zdCAhPSB1bmRlZmluZWQpCnsKICAgIGRlc3Ryb3kodGhpc0JvdCk7Cn0nAKKgxagK6jIJYWJWZXJzaW9uAgQAoqDFqAr3MwQxMC41JwEEYm90cyRjNjhjNWI4Mi1jMGE3LTRhNWEtOTEwNC01ZGQ4ZTMyYWU0ZTIBJwCioMWoCvwzBnN5c3RlbQIEAKKgxagK/TMQYWIuYWN0aW9uLnBvcnRhbCcAoqDFqAr8MwtkZXNjcmlwdGlvbgIEAKKgxagKjjQUU2tpbGwgdG8gb3BlbiBzaGVldC4nAKKgxagK/DMIYWJBY3Rpb24CBACioMWoCqM0BHRydWUnAKKgxagK/DMEZm9ybQIEAKKgxagKqDQHbm90aGluZycAoqDFqAr8MxBhYkNvcmVNZW51QWN0aW9uAgQAoqDFqAqwNANALy8nAKKgxagK/DMIcmVtZW1iZXICBACioMWoCrQ0KPCflJdlNTM4MGE2Yi04YjRkLTRhOGItOGIwNC01OGUxZWIwM2U1ZTcnAKKgxagK/DMPYWJDb3JlTWVudUxhYmVsAgQAoqDFqArbNBBjdXJyZW50IHBvcnRhbDogJwCioMWoCvwzD2FiQm90TWVudUFjdGlvbgIEAKKgxagK7DT4AkBjb25zdCBjdXJyZW50SW5zdCA9IG9zLmdldEN1cnJlbnRJbnN0KCk7CmNvbnN0IGN1cnJlbnREaW0gPSBsaW5rcy5tYW5pZmVzdGF0aW9uLmxpbmtzLmFiQm90LnRhZ3MubGluZVRvOwpjb25zdCBzdGF0ZSA9IG9zLmdldElucHV0U3RhdGUoImtleWJvYXJkIiwgIlNoaWZ0Iik7CgppZiAoc3RhdGUpIAp7CiAgICBvcy5vcGVuVVJMKGNvbmZpZ0JvdC50YWdzLnBlcm1hbGluayArIGAmc2hlZXRQb3J0YWw9JHtjdXJyZW50RGltfWApOwp9CmVsc2UKewogICAgY29uZmlnQm90LnRhZ3Muc2hlZXRQb3J0YWwgPSBjdXJyZW50RGltOwp9CgphYi5sb2cobGlua3MucGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eSArICI6IG9wZW5lZCBib3Qgc2hlZXQiKTsnAKKgxagK/DMOYWJCb3RNZW51TGFiZWwCBACioMWoCuU3Dm9wZW4gYm90IHNoZWV0JwCioMWoCvwzDW1hbmlmZXN0YXRpb24CBACioMWoCvQ3KPCflJdkY2E1ZDk4Ny1jNGQ4LTQ2ZTQtYjYwYy1kYWE3YjJmNGRkYWQnAKKgxagK/DMNYWJCb3RNZW51SWNvbgIEAKKgxagKmzgKdGFibGVfdmlldycAoqDFqAr8Mw5hYkNvcmVNZW51SWNvbgIEAKKgxagKpjgLYXJyb3dfcmlnaHQnAKKgxagK/DMSYWJCb3RNZW51U29ydE9yZGVyAgQAoqDFqAqyOAExJwCioMWoCvwzCGFiSWdub3JlAgQAoqDFqAq0OAR0cnVlJwCioMWoCvwzF2FiTXVsdGlwbGVCb3RNZW51QWN0aW9uAgQAoqDFqAq5OJsEQGNvbnN0IGN1cnJlbnRJbnN0ID0gb3MuZ2V0Q3VycmVudEluc3QoKTsKY29uc3QgY3VycmVudERpbSA9ICJhYk11bHRpcGxlU2VsZWN0IjsKCmNvbmZpZ0JvdC50YWdzLnNoZWV0UG9ydGFsID0gY3VycmVudERpbTsKCnNldFRhZ01hc2sobGlua3MucmVtZW1iZXIubGlua3MuYWJNdWx0aXBsZUJvdEZvY3VzLCBjdXJyZW50RGltLCB0cnVlLCAidGVtcExvY2FsIik7CgptYXNrcy5jdXJyZW50U2hlZXRCb3RzID0gbGlua3MucmVtZW1iZXIudGFncy5hYk11bHRpcGxlQm90Rm9jdXM7Cm1hc2tzLm9uUG9ydGFsQ2hhbmdlZCA9IGBAIGlmICh0aGF0LmRpbWVuc2lvbiAhPSAiYWJNdWx0aXBsZVNlbGVjdCIgJiYgdGhhdC5wb3J0YWwgPT0gInNoZWV0UG9ydGFsIikKewogICAgY2xlYXJUYWdNYXNrcyhsaW5rcy5jdXJyZW50U2hlZXRCb3RzKTsKCiAgICBjbGVhclRhZ01hc2tzKHRoaXNCb3QpOwp9IGA7CgphYi5sb2cobGlua3MucGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eSArICI6IG9wZW5lZCBtdWx0aXBsZSBzZWxlY3Qgc2hlZXQiKTsnAKKgxagK/DMWYWJNdWx0aXBsZUJvdE1lbnVMYWJlbAIEAKKgxagK1Twab3BlbiBtdWx0aXBsZSBzZWxlY3Qgc2hlZXQnAKKgxagK/DMVYWJNdWx0aXBsZUJvdE1lbnVJY29uAgQAoqDFqArwPAp0YWJsZV92aWV3JwCioMWoCvwzE2FiQm90TWVudU9uR2VuZXJhdGUCBACioMWoCvs8mAJAbGV0IHNlbGVjdGVkQm90ID0gbGlua3MubWFuaWZlc3RhdGlvbi5saW5rcy5hYkJvdC50YWdzLmxpbmVUbzsKCnRhZ3MubGFiZWwgPSAic2hlZXRQb3J0YWw9IiArIHNlbGVjdGVkQm90LnN1YnN0cmluZygwLCA0KTsKCnRhZ3Mub25LZXlEb3duID0gYEAgaWYodGhhdC5rZXlzID09ICJTaGlmdCIpe21hc2tzLmxhYmVsID0gdGFncy5sYWJlbCArICIgaW4gbmV3IHRhYiI7fWA7CnRhZ3Mub25LZXlVcCA9IGBAIGlmKHRoYXQua2V5cyA9PSAiU2hpZnQiKXttYXNrcy5sYWJlbCA9IG51bGw7fWA7JwCioMWoCvwzGmFiTXVsdGlwbGVCb3RNZW51U29ydE9yZGVyAgQAoqDFqAqUPwEwJwCioMWoCvwzBG1lbnUCBACioMWoCpY/KPCflJdiMzBjNmM1ZC1hNGY3LTQyNjYtYmEzOC0zOTNkYzk1ZTFlY2InAKKgxagK/DMJYWJWZXJzaW9uAgQAoqDFqAq9PwQxMC41JwCioMWoCvwzC2FiQmx1ZXByaW50AgQAoqDFqArCP/sDQGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGxpbmtzLnJlbWVtYmVyPy50YWdzLmFiQmx1ZXByaW50Q29sb3IgPz8gIiMxNzg1QjUiOwoKaWYgKGJhY2tncm91bmRDb2xvciA9PSBncmlkUG9ydGFsQm90Lm1hc2tzLnBvcnRhbENvbG9yKQp7CiAgICByZXR1cm47Cn0KCmdyaWRQb3J0YWxCb3QubWFza3MucG9ydGFsQ29sb3IgPSBiYWNrZ3JvdW5kQ29sb3I7CgptYXNrcy5vblBvcnRhbENoYW5nZWQgPSBgQCBpZiAodGhhdC5wb3J0YWwgPT0gImdyaWRQb3J0YWwiICYmIHRoYXQuZGltZW5zaW9uICE9ICJibHVlcHJpbnQiKXsKICAgIC8vIGxpbmtzLnJlbWVtYmVyLm1hc2tzLmFiQmFzZUNvbG9yID0gbnVsbDsKICAgIC8vIGxpbmtzLnJlbWVtYmVyLm1hc2tzLmFiQmFzZVN0cm9rZUNvbG9yID0gbnVsbDsKCiAgICBncmlkUG9ydGFsQm90Lm1hc2tzLnBvcnRhbENvbG9yID0gbnVsbDsKCiAgICBtYXNrcy5vblBvcnRhbENoYW5nZWQgPSBudWxsOwp9YDsKCnNob3V0KCJhYk1lbnVSZWZyZXNoIik7JwCioMWoCvwzC29uQW55Q3JlYXRlAgQAoqDFqAq+Q3ZAaWYgKHRoYXQuYm90LnRhZ3MuYmx1ZXByaW50KQp7CiAgICB0aGF0LmJvdC50YWdzLnN0cm9rZUNvbG9yID0gIiNmZmZmZmYiOwogICAgdGhhdC5ib3QudGFncy5sYWJlbENvbG9yID0gIiNmZmZmZmYiOwp9JwCioMWoCvwzD29uUG9ydGFsQ2hhbmdlZAIEAKKgxagKtURhQGlmICh0aGF0LnBvcnRhbCA9PSAiZ3JpZFBvcnRhbCIgJiYgdGhhdC5kaW1lbnNpb24gPT0gImJsdWVwcmludCIpCnsKICAgIHRoaXNCb3QuYWJCbHVlcHJpbnQoKTsKfScAoqDFqAr8MwtwZXJzb25hbGl0eQIEAKKgxagKl0Uo8J+Ul2I3NmRmYmM0LTg1NGItNGY2ZC1hOTFmLWE5NDg2OTQ3NzRkYicAoqDFqAr8MxJhYkNvcmVNZW51SXRlbVR5cGUCBACioMWoCr5FCGRyb3Bkb3duJwCioMWoCvwzEWRyb3Bkb3duU29ydE9yZGVyAgQAoqDFqArHRQExJwCioMWoCvwzD2Ryb3Bkb3duT3B0aW9ucwIEAKKgxagKyUUG8J+nrFtdJwCioMWoCvwzGGFiQ29yZU1lbnVPbkJlZm9yZUNyZWF0ZQIEAKKgxagKzkW4HkBjb25zdCBkcm9wZG93bk9wdGlvbnMgPSBbXTsNCg0KY29uc3QgY3VycmVudERpbSA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJBY3RpdmVEaW1lbnNpb247DQpjb25zdCBjdXJyZW50UG9ydGFsID0gY29uZmlnQm90LnRhZ3MubWFwUG9ydGFsID8gIm1hcCIgOiBjb25maWdCb3QudGFncy5ncmlkUG9ydGFsID09ICJibHVlcHJpbnQiID8gImJsdWVwcmludCIgOiJncmlkIjsNCmNvbnN0IGFjdGl2ZU1lbnUgPSBjb25maWdCb3QudGFncy5tZW51UG9ydGFsOw0KY29uc3QgcGVybWFsaW5rVVJMID0gY29uZmlnQm90LnRhZ3MucGVybWFsaW5rOw0KY29uc3QgYWN0aXZlSW5zdCA9IG9zLmdldEN1cnJlbnRJbnN0KCk7DQpjb25zdCBhY3RpdmVCaW9zID0gY29uZmlnQm90LnRhZ3Mub3duZXIgPyAiJm93bmVyPSIgKyBjb25maWdCb3QudGFncy5vd25lciA6IGZhbHNlOw0KY29uc3QgZmlyc3RJbmRleCA9IHBlcm1hbGlua1VSTC5pbmRleE9mKCImIik7DQpjb25zdCBpbml0aWFsVVJMID0gcGVybWFsaW5rVVJMLnN1YnN0cmluZygwLCBmaXJzdEluZGV4KTsNCmNvbnN0IHVwZGF0ZWRVUkwgPSBhY3RpdmVCaW9zICE9IGZhbHNlID8gaW5pdGlhbFVSTCArICImaW5zdD0iICsgYWN0aXZlSW5zdCA6IGluaXRpYWxVUkw7DQoNCnNldFRhZ01hc2sodGhpc0JvdCwgImFiQ29yZU1lbnVMYWJlbCIsYG1vZGU6ICR7Y3VycmVudFBvcnRhbH0gcG9ydGFsYCk7DQpzZXRUYWdNYXNrKHRoaXNCb3QsICJjdXJyZW50RGltZW5zaW9uIiwgY3VycmVudERpbSk7DQpzZXRUYWdNYXNrKHRoaXNCb3QsICJjdXJyZW50UG9ydGFsIiwgY3VycmVudFBvcnRhbCk7DQpzZXRUYWdNYXNrKHRoaXNCb3QsICJkcm9wZG93blNvcnRPcmRlciIsIDEpOw0KDQpjb25zdCBtZW51T3B0aW9ucyA9IHt9Ow0KDQptZW51T3B0aW9ucy5kaW1lbnNpb24gPSBhY3RpdmVNZW51Ow0KbWVudU9wdGlvbnNbYWN0aXZlTWVudV0gPSB0cnVlOw0KbWVudU9wdGlvbnMuYWJQb3J0YWxNZW51UmVmcmVzaCA9ICJAIGRlc3Ryb3kodGhpc0JvdCk7IjsNCm1lbnVPcHRpb25zLmFiTWVudVJlZnJlc2ggPSAiQCBkZXN0cm95KHRoaXNCb3QpOyI7DQptZW51T3B0aW9ucy5vbktleURvd24gPSBgQCBpZih0aGF0LmtleXMgPT0gIlNoaWZ0Iil7bWFza3MubGFiZWwgPSB0YWdzLmxhYmVsICsgIiBpbiBuZXcgdGFiIjt9YDsNCm1lbnVPcHRpb25zLm9uS2V5VXAgPSBgQCBpZih0aGF0LmtleXMgPT0gIlNoaWZ0Iil7bWFza3MubGFiZWwgPSBudWxsO31gOw0KbWVudU9wdGlvbnMuc2tpbGxCb3QgPSBnZXRMaW5rKHRoaXNCb3QpOw0KbWVudU9wdGlvbnMudGFyZ2V0VVJMID0gdXBkYXRlZFVSTDsNCg0KY29uc3QgbWFwTWVudUJvdCA9IHsNCiAgICAuLi5tZW51T3B0aW9ucw0KfTsNCg0KbWFwTWVudUJvdC5sYWJlbCA9ICJtYXAgcG9ydGFsIjsNCm1hcE1lbnVCb3QuZm9ybUFkZHJlc3MgPSAicHVibGljIjsNCm1hcE1lbnVCb3Qub25DbGljayA9IGBAIA0KY29uc3Qgc3RhdGUgPSBvcy5nZXRJbnB1dFN0YXRlKCJrZXlib2FyZCIsICJTaGlmdCIpOw0KDQppZihzdGF0ZSkNCnsNCiAgICBvcy5vcGVuVVJMKHRhZ3MudGFyZ2V0VVJMICsgIiZtYXBQb3J0YWw9JHtjdXJyZW50RGltID09ICJibHVlcHJpbnQiID8gImhvbWUiIDogY3VycmVudERpbX0iKTsNCn0NCmVsc2UNCnsNCiAgICBjb25maWdCb3QudGFncy5tYXBQb3J0YWwgPSAiJHtjdXJyZW50RGltID09ICJibHVlcHJpbnQiID8gImhvbWUiIDogY3VycmVudERpbX0iOw0KfWA7DQoNCmlmIChjdXJyZW50UG9ydGFsICE9ICJtYXAiKQ0Kew0KICAgIC8vbWFwIHBvcnRhbCBidXR0b24NCiAgICBkcm9wZG93bk9wdGlvbnMucHVzaChtYXBNZW51Qm90KTsNCn0NCg0KY29uc3QgZ3JpZE1lbnVCb3QgPSB7DQogICAgLi4ubWVudU9wdGlvbnMNCn07DQpncmlkTWVudUJvdC5sYWJlbCA9ICJncmlkIHBvcnRhbCI7DQpncmlkTWVudUJvdC5mb3JtQWRkcmVzcyA9ICJjdWJlIjsNCmdyaWRNZW51Qm90Lm9uQ2xpY2sgPSBgQA0KDQpjb25zdCBzdGF0ZSA9IG9zLmdldElucHV0U3RhdGUoImtleWJvYXJkIiwgIlNoaWZ0Iik7DQoNCmlmKHN0YXRlKQ0Kew0KICAgIG9zLm9wZW5VUkwodGFncy50YXJnZXRVUkwgKyAiJmdyaWRQb3J0YWw9JHtjdXJyZW50RGltID09ICJibHVlcHJpbnQiID8gImhvbWUiIDogY3VycmVudERpbX0iKTsNCn0gDQplbHNlDQp7DQogICAgY29uZmlnQm90LnRhZ3MuZ3JpZFBvcnRhbCA9ICIke2N1cnJlbnREaW0gPT0gImJsdWVwcmludCIgPyAiaG9tZSIgOiBjdXJyZW50RGltfSI7IGNvbmZpZ0JvdC50YWdzLm1hcFBvcnRhbCA9IG51bGw7DQp9YDsNCg0KaWYgKGN1cnJlbnRQb3J0YWwgIT0gImdyaWQiIHx8IGN1cnJlbnREaW0gPT0gImJsdWVwcmludCIpDQp7DQogICAgLy9ncmlkIHBvcnRhbCBidXR0b24NCiAgICBkcm9wZG93bk9wdGlvbnMucHVzaChncmlkTWVudUJvdCk7DQp9DQoNCmNvbnN0IGJsdWVwcmludE1lbnVCb3QgPSB7DQogICAgLi4ubWVudU9wdGlvbnMNCn07DQoNCmJsdWVwcmludE1lbnVCb3QubGFiZWwgPSAiYmx1ZXByaW50IHBvcnRhbCI7DQpibHVlcHJpbnRNZW51Qm90LmZvcm1BZGRyZXNzID0gImFyY2hpdGVjdHVyZSI7DQpibHVlcHJpbnRNZW51Qm90Lm9uQ2xpY2sgPSBgQA0KDQpjb25zdCBzdGF0ZSA9IG9zLmdldElucHV0U3RhdGUoImtleWJvYXJkIiwgIlNoaWZ0Iik7DQoNCmlmKHN0YXRlKQ0Kew0KICAgIG9zLm9wZW5VUkwodGFncy50YXJnZXRVUkwgKyAiJmdyaWRQb3J0YWw9Ymx1ZXByaW50Iik7DQp9IA0KZWxzZQ0Kew0KICAgIGNvbmZpZ0JvdC50YWdzLmdyaWRQb3J0YWwgPSAiYmx1ZXByaW50IjsgY29uZmlnQm90LnRhZ3MubWFwUG9ydGFsID0gbnVsbDsNCn0NCg0KbGlua3Muc2tpbGxCb3QuYWJCbHVlcHJpbnQoKTtgOw0KDQppZiAoY3VycmVudERpbSAhPSAiYmx1ZXByaW50IikNCnsNCiAgICAvL2JsdWVwcmludCBwb3J0YWwgYnV0dG9uDQogICAgZHJvcGRvd25PcHRpb25zLnB1c2goYmx1ZXByaW50TWVudUJvdCk7DQp9DQoNCg0KY29uc3Qgc2hlZXRNZW51Qm90ID0gew0KICAgIC4uLm1lbnVPcHRpb25zDQp9Ow0Kc2hlZXRNZW51Qm90LmxhYmVsID0gInNoZWV0IHBvcnRhbCI7DQpzaGVldE1lbnVCb3QuZm9ybUFkZHJlc3MgPSAidGFibGVfdmlldyI7DQpzaGVldE1lbnVCb3Qub25DbGljayA9IGBAIA0KDQpjb25zdCBzdGF0ZSA9IG9zLmdldElucHV0U3RhdGUoImtleWJvYXJkIiwgIlNoaWZ0Iik7DQoNCmlmKHN0YXRlKQ0Kew0KICAgIG9zLm9wZW5VUkwodGFncy50YXJnZXRVUkwgKyAiJnNoZWV0UG9ydGFsPSR7Y3VycmVudERpbX0iKTsNCn0gDQplbHNlDQp7IA0KICAgIGNvbmZpZ0JvdC50YWdzLnNoZWV0UG9ydGFsID0gIiR7Y3VycmVudERpbX0iOw0KfWA7DQoNCi8vc2hlZXQgcG9ydGFsIGJ1dHRvbg0KZHJvcGRvd25PcHRpb25zLnB1c2goc2hlZXRNZW51Qm90KTsNCg0KDQpjb25zdCBzeXN0ZW1NZW51Qm90ID0gew0KICAgIC4uLm1lbnVPcHRpb25zDQp9Ow0KDQpzeXN0ZW1NZW51Qm90LmxhYmVsID0gInN5c3RlbSBwb3J0YWwiOw0Kc3lzdGVtTWVudUJvdC5mb3JtQWRkcmVzcyA9ICJzZXR0aW5nc19hcHBsaWNhdGlvbnMiOw0Kc3lzdGVtTWVudUJvdC5vbkNsaWNrID0gYEANCg0KY29uc3Qgc3RhdGUgPSBvcy5nZXRJbnB1dFN0YXRlKCJrZXlib2FyZCIsICJTaGlmdCIpOw0KDQppZihzdGF0ZSkNCnsNCiAgICBvcy5vcGVuVVJMKHRhZ3MudGFyZ2V0VVJMICsgIiZzeXN0ZW1Qb3J0YWw9dHJ1ZSIpOw0KfSANCmVsc2UNCnsgDQogICAgY29uZmlnQm90LnRhZ3Muc3lzdGVtUG9ydGFsID0gdHJ1ZTsNCn1gOw0KDQovL3N5c3RlbSBwb3J0YWwgYnV0dG9uDQpkcm9wZG93bk9wdGlvbnMucHVzaChzeXN0ZW1NZW51Qm90KTsNCg0KbWFza3MuZHJvcGRvd25PcHRpb25zID0gZHJvcGRvd25PcHRpb25zOw0KDQpyZXR1cm47JwEEYm90cyRlYzg1YzFkNi05ZjFhLTQwZDQtODJlMS01YmQ2ODAzNDljMjcBJwCioMWoCodkBnN5c3RlbQIEAKKgxagKiGQNYWIuYWN0aW9uLmFzaycAoqDFqAqHZARmb3JtAgQAoqDFqAqWZAdub3RoaW5nJwCioMWoCodkBmFza0dQVAIEAKKgxagKnmSWCkBpZiAoIXRhZ3MuZ3B0QWN0aXZlIHx8IGF1dGhCb3QudGFncy5wcml2YWN5RmVhdHVyZXMuYWxsb3dBSSA9PSBmYWxzZSkKewogICAgY29uc3QgYWlNZXNzYWdlID0gbGlua3MucmVtZW1iZXIudGFncy5haV9yZWplY3Rpb25fbWVzc2FnZSA/PyAiQUkgbm90IGF1dGhvcml6ZWQgZm9yIHRoaXMgYWNjb3VudCI7CgogICAgb3MudG9hc3QoYWlNZXNzYWdlLCA3KTsKCiAgICBhYi5sb2cobGlua3MucGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eSArICAiOiAiICsgYWlNZXNzYWdlKTsKICAgIAogICAgcmV0dXJuOwp9IAoKLy8gY29uc29sZS5sb2coIkFTSyIsIHRoYXQpOwoKbGV0IGlucXVpcnkgPSB0aGF0LmlucXVpcnkgPz8gdGhhdDsKCmNvbnN0IHByb21wdCA9ICF0aGF0LnByb21wdCA/IHRhZ3MucHJvbXB0X2NvcmUgOiB0YWdzWyJwcm9tcHRfIiArIHRoYXQucHJvbXB0XTsKCmFiLmxvZyhsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgIjogdGhpbmtpbmcgYWJvdXQgIiArIGlucXVpcnkpOwoKbGlua3MubWFuaWZlc3RhdGlvbi5hYkJvdENoYXQoe21lc3NhZ2U6ICJ0aGlua2luZyBhYm91dCAiICsgaW5xdWlyeX0pOwoKaWYgKHRoYXQucHJvbXB0ID09ICJncmlkIikKewogICAgaW5xdWlyeSA9IGlucXVpcnkgKyBgIFBPU0lUSU9OOiB7JHt0aGF0LmRhdGEuZGltZW5zaW9ufTogdHJ1ZSwgJHt0aGF0LmRhdGEuZGltZW5zaW9ufVg6ICR7dGhhdC5kYXRhLmRpbWVuc2lvblh9LCAke3RoYXQuZGF0YS5kaW1lbnNpb259WToke3RoYXQuZGF0YS5kaW1lbnNpb25ZfX0uYAp9CmVsc2UgaWYgKHRoYXQucHJvbXB0ID09ICJib3QiKQp7CiAgICBpbnF1aXJ5ID0gaW5xdWlyeSArIGAgVEFSR0VUX0JPVF9JRDogYCArIHRoYXQuZGF0YS5ib3QuaWQ7Cn0KZWxzZSBpZiAodGhhdC5wcm9tcHQgPT0gIm11bHRpcGxlQm90IikKewogICAgaW5xdWlyeSA9IGlucXVpcnkgKyBgIFRBUkdFVF9CT1RfSURTOiBgICsgdGhhdC5kYXRhLmJvdHM7Cn0KZWxzZSBpZiAodGhhdC5wcm9tcHQgPT0gImNvcmUiKQp7Cgp9Cgpjb25zdCBhbnN3ZXIgPSBhd2FpdCB0aGlzQm90LnN1Ym1pdFJlcXVlc3RHUFQoe2lucXVpcnk6IGlucXVpcnksIHByb21wdDogcHJvbXB0LCBtb2RlbDogdGhhdC5tb2RlbH0pOwoKYWIubG9nKGxpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCdWlsZGVySWRlbnRpdHkgKyAiOiAiICsgYW5zd2VyKTsKCmNyZWF0ZSh7aG9tZTogdHJ1ZSwgb25DcmVhdGU6IGBAICR7YW5zd2VyfWB9KTsKCmxpbmtzLm1hbmlmZXN0YXRpb24uYWJDbGljaygpOwoKcmV0dXJuOycAoqDFqAqHZAlncHRBY3RpdmUCBACioMWoCrVuBWZhbHNlJwCioMWoCodkEHN1Ym1pdFJlcXVlc3RHUFQCBACioMWoCrtuoQdAbGV0IHN5c3RlbVByb21wdCA9IHRoYXQucHJvbXB0ID8gdGhhdC5wcm9tcHQgOiB0YWdzLnByb21wdF9jb3JlOwoKc3lzdGVtUHJvbXB0ID0gc3lzdGVtUHJvbXB0ICsgdGhhdC5pbnF1aXJ5OwoKaWYgKGF1dGhCb3QudGFncy5wcml2YWN5RmVhdHVyZXMuYWxsb3dBSSA9PSBmYWxzZSkKewogICAgb3MudG9hc3QoIkFJIG5vdCBhdXRob3JpemVkIG9uIHRoaXMgYWNjb3VudCIpOwoKICAgIHJldHVybjsKfQoKbGV0IGN1cnJlbnRFeHBlcmllbmNlQm90cyA9IGdldEJvdHMoYiA9PiBiLnNwYWNlID09PSAnc2hhcmVkJyAmJiAhYi50YWdzLmFiSWdub3JlKTsKCmlmIChjdXJyZW50RXhwZXJpZW5jZUJvdHMubGVuZ3RoID4gMCkKewogICAgc3lzdGVtUHJvbXB0ID0gc3lzdGVtUHJvbXB0ICsgIiBUaGVzZSBhcmUgdGhlIGJvdHMgdGhhdCBjdXJyZW50bHkgZXhpc3QgaW4gdGhlIGV4cGVyaWVuY2U6ICIgKyBjdXJyZW50RXhwZXJpZW5jZUJvdHM7Cn0KCmlmICghbGlua3MubWVudSkgewogICAgYXdhaXQgbGlua3MubGVhcm4uYWJBZGFwdCgnYWJJbnRlcmZhY2UnKTsKfQoKbGV0IG5ld1N0YXR1c0JhciA9IGF3YWl0IGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnVzeUluZGljYXRvcih7IGFiTWVudTogdHJ1ZSwgbGFiZWw6IGBhc2tpbmcgJHtsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5fWAgfSk7Cgpjb25zdCBhaVJlc3AgPSBhd2FpdCBhaS5jaGF0KHN5c3RlbVByb21wdCwgewogICAgbW9kZWw6IHRoYXQubW9kZWwgPz8gbGlua3MucmVtZW1iZXIudGFncy5hYlByZWZlcnJlZEFJTW9kZWwsCiAgICB0ZW1wZXJhdHVyZTogMCwKICAgIHRvcFA6IDEsCiAgICBwcmVzZW5jZVBlbmFsdHk6IDAuNiwKICAgIGZyZXF1ZW5jeVBlbmFsdHk6IDAKfSk7CgpkZXN0cm95KG5ld1N0YXR1c0Jhcik7CgpyZXR1cm4gYWlSZXNwOycAoqDFqAqHZAhyZW1lbWJlcgIEAKKgxagK3XUo8J+Ul2U1MzgwYTZiLThiNGQtNGE4Yi04YjA0LTU4ZTFlYjAzZTVlNycAoqDFqAqHZBBhYkNvcmVNZW51QWN0aW9uAgQAoqDFqAqEdqQdQGNvbnN0IGlucXVpcnkgPSB0aGF0Py5tZXNzYWdlID8/IHRoYXQ7CmNvbnN0IGluaXRpYWxCb290ID0gdGhhdD8uaW5pdGlhbEJvb3QgPz8gZmFsc2U7CmNvbnN0IGF1dG9IYXRjaCA9IHRoYXQ/LmF1dG9IYXRjaCA/PyBmYWxzZTsKY29uc3QgbWVudSA9IHRoYXQ/Lm1lbnUgPz8gImNvcmUiOwpjb25zdCBpbnF1aXJ5SGFzU3BhY2UgPSBpbnF1aXJ5LmluZGV4T2YoIiAiKSAhPT0gLTE7CmNvbnN0IG1lbnVCb3RzID0gZ2V0Qm90cyhjb25maWdCb3QudGFncy5tZW51UG9ydGFsLCB0cnVlKTsKCndoaXNwZXIobWVudUJvdHMsICJhYk1lbnVSZWZyZXNoIik7CgpsZXQgdXNlcm5hbWUgPSAidXNlciI7CmlmIChhdXRoQm90ICYmIGF1dGhCb3QudGFncy5uYW1lKSB7CiAgICB1c2VybmFtZSA9IGF1dGhCb3QudGFncy5uYW1lOwp9IGVsc2UgaWYgKGFiLmxpbmtzLmNvbnNvbGUubWFza3MucHJlZmVycmVkTmFtZSkgewogICAgdXNlcm5hbWUgPSBhYi5saW5rcy5jb25zb2xlLm1hc2tzLnByZWZlcnJlZE5hbWU7Cn0KYWIubG9nKHsgbWVzc2FnZTogaW5xdWlyeSwgbmFtZTogdXNlcm5hbWUgfSk7CgppZiAoIWNvbmZpZ0JvdC50YWdzLnRhZ1BvcnRhbCAmJiBsaW5rcy5yZW1lbWJlci50YWdzLmFiQXdha2VTdGF0ZSAmJiBpbnF1aXJ5ICE9ICIubG9nIikgewogICAgc2hvdXQoInNob3dDb25zb2xlIik7Cn0KCmlmICghaW5xdWlyeUhhc1NwYWNlKSB7CiAgICBjb25zdCBpc0RpcmVjdFNlYXJjaCA9IGlucXVpcnkuc3RhcnRzV2l0aChgImApICYmIGlucXVpcnkuZW5kc1dpdGgoYCJgKTsKICAgIGNvbnN0IGlzQ2hhbm5lbFNlYXJjaCA9IGlucXVpcnlbMF0gPT0gIkAiOwoKICAgIGNvbnN0IGFzazogQUJMb29rdXBBc2tJRFJlc3VsdCB8IGZhbHNlID0gIWlzRGlyZWN0U2VhcmNoID8gYXdhaXQgbGlua3Muc2VhcmNoLm9uTG9va3VwQXNrSUQoeyBhc2tJRDogaW5xdWlyeSwgY2hhbm5lbENvbmZpZzogaXNDaGFubmVsU2VhcmNoLCBhdXRvSGF0Y2g6IHRydWUsIHNvdXJjZUV2ZW50OiAnYXNrJyB9KSA6IGZhbHNlOwoKICAgIGlmIChhc2s/LnN1Y2Nlc3MgJiYgYXNrPy5kYXRhPy51cmwgIT0gdW5kZWZpbmVkICYmICFpc0RpcmVjdFNlYXJjaCAmJiAhaXNDaGFubmVsU2VhcmNoKSB7CiAgICAgICAgbGlua3MubGVhcm4uYWJKb2luSG9zdCh7IGRhdGE6IGFzay5kYXRhIH0pOwogICAgfSBlbHNlIGlmIChhc2s/LnN1Y2Nlc3MgJiYgaXNDaGFubmVsU2VhcmNoKSB7CiAgICAgICAgbGlua3MuY2hhbm5lbExvYWRlcj8ubG9hZENoYW5uZWwoYXNrKTsKICAgIH0gZWxzZSBpZiAoIWFzaz8uc3VjY2VzcykgewogICAgICAgIGxldCBlZ2c6IEFCTG9va3VwRWdnUmVzdWx0OwogICAgICAgIGNvbnN0IHBlcmlvZEluZGV4ID0gaW5xdWlyeS5pbmRleE9mKCIuIik7CiAgICAgICAgbGV0IGFiSUQgPSBpbnF1aXJ5OwoKICAgICAgICBpZiAoaXNEaXJlY3RTZWFyY2gpIHsKICAgICAgICAgICAgYWJJRCA9IGlucXVpcnkuc3Vic3RyaW5nKDEsIGlucXVpcnkubGVuZ3RoIC0gMSk7CiAgICAgICAgfQoKICAgICAgICBpZiAocGVyaW9kSW5kZXggPT0gLTEgfHwgaXNEaXJlY3RTZWFyY2gpIHsKICAgICAgICAgICAgZWdnID0gYXdhaXQgbGlua3Muc2VhcmNoLm9uTG9va3VwQUJFZ2dzKHsgYWJJRDogYWJJRCwgaW5pdGlhbEJvb3QsIGF1dG9IYXRjaCwgc291cmNlRXZlbnQ6ICdhc2snIH0pOwogICAgICAgIH0gZWxzZSBpZiAocGVyaW9kSW5kZXggPiAwKSB7CiAgICAgICAgICAgIGNvbnN0IHJlY29yZEtleSA9IGlucXVpcnkuc3Vic3RyaW5nKDAsIHBlcmlvZEluZGV4KTsKCiAgICAgICAgICAgIGFiSUQgPSBpbnF1aXJ5LnN1YnN0cmluZyhwZXJpb2RJbmRleCArIDEpOwoKICAgICAgICAgICAgZWdnID0gYXdhaXQgbGlua3Muc2VhcmNoLm9uTG9va3VwQUJFZ2dzKHsgcmVjb3JkS2V5OiByZWNvcmRLZXksIGFiSUQ6IGFiSUQsIGluaXRpYWxCb290LCBhdXRvSGF0Y2gsIHNvdXJjZUV2ZW50OiAnYXNrJywgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbGlua3MuaW5wdXQub25DaGF0KHsgbWVzc2FnZTogaW5xdWlyeSB9KTsKICAgICAgICB9CgogICAgICAgIGlmICghZWdnPy5zdWNjZXNzICYmIGxpbmtzLm1lbnUpIHsKICAgICAgICAgICAgY29uZmlnQm90Lm1hc2tzLm1lbnVQb3J0YWwgPSAiYWJNZW51IjsKCiAgICAgICAgICAgIGNvbnN0IHN0dWRpb0J1dHRvbiA9IHt9OwoKICAgICAgICAgICAgc3R1ZGlvQnV0dG9uLmFiTWVudSA9IHRydWU7CiAgICAgICAgICAgIHN0dWRpb0J1dHRvbi5sYWJlbCA9IGFiSUQgKyAiIG5vdCBmb3VuZCBpbiBhY3RpdmUgc3R1ZGlvLCBlbnRlciBhbHRlcm5hdGUgc3R1ZGlvSUQiOwogICAgICAgICAgICBzdHVkaW9CdXR0b24uZm9ybSA9ICJpbnB1dCI7CiAgICAgICAgICAgIHN0dWRpb0J1dHRvbi5hYklEID0gYWJJRDsKICAgICAgICAgICAgc3R1ZGlvQnV0dG9uLmZvcm1BZGRyZXNzID0gdGFncy5hYkNvcmVNZW51SWNvbjsKICAgICAgICAgICAgc3R1ZGlvQnV0dG9uLm1hbmFnZXIgPSBnZXRMaW5rKHRoaXNCb3QpOwogICAgICAgICAgICBzdHVkaW9CdXR0b24uYWJNZW51UmVmcmVzaCA9ICJAIGRlc3Ryb3kodGhpc0JvdCk7IjsKICAgICAgICAgICAgc3R1ZGlvQnV0dG9uLm9uU3VibWl0ID0gYEAgbGlua3MubWFuYWdlci5hYkNvcmVNZW51QWN0aW9uKHRoYXQudGV4dCArICIuIiArIHRhZ3MuYWJJRCk7YDsKCiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZUJ1dHRvbiA9IHt9OwoKICAgICAgICAgICAgY3JlYXRlQnV0dG9uLmFiTWVudSA9IHRydWU7CiAgICAgICAgICAgIGNyZWF0ZUJ1dHRvbi5sYWJlbCA9ICJnaXZlIG1lIGEgcHJvdG90eXBlIjsKICAgICAgICAgICAgY3JlYXRlQnV0dG9uLm1hbmFnZXIgPSBnZXRMaW5rKHRoaXNCb3QpOwogICAgICAgICAgICBjcmVhdGVCdXR0b24uYWJNZW51UmVmcmVzaCA9ICJAIGRlc3Ryb3kodGhpc0JvdCk7IjsKICAgICAgICAgICAgY3JlYXRlQnV0dG9uLmFiSUQgPSBhYklEOwogICAgICAgICAgICBjcmVhdGVCdXR0b24ub25DbGljayA9IGBAIGxpbmtzLm1hbmFnZXIucHJvdG90eXBlKHRhZ3MuYWJJRCk7YDsKCiAgICAgICAgICAgIGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKGNyZWF0ZUJ1dHRvbik7CiAgICAgICAgICAgIGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKHN0dWRpb0J1dHRvbik7CgogICAgICAgICAgICB0aGlzQm90Lm1hc2tzLm9uR3JpZENsaWNrID0gIkAgc2hvdXQoJ2FiTWVudVJlZnJlc2gnKTsiOwogICAgICAgIH0KICAgIH0KfSBlbHNlIHsKICAgIGF3YWl0IG9zLnJlcXVlc3RBdXRoQm90KCk7CgogICAgaWYgKCFhdXRoQm90KSB7CiAgICAgICAgb3MudG9hc3QoInBsZWFzZSBzaWduIGluIHRvIGFjY2VzcyBhZHZhbmNlZCBBSSBmZWF0dXJlcyIpOwoKICAgICAgICBsaW5rcy5tYW5pZmVzdGF0aW9uLmFiQ2xpY2soKTsKICAgIH0gZWxzZSBpZiAoYXV0aEJvdC50YWdzLnN1YnNjcmlwdGlvblRpZXIgPT0gIkZyZWVQbGF5IikgewogICAgICAgIG9zLnRvYXN0KCJwbGVhc2UgY2hlY2sgeW91ciBzdWJzY3JpcHRpb24gaW4gb3JkZXIgdG8gYWNjZXNzIGFkdmFuY2VkIEFJIGZlYXR1cmVzIik7CgogICAgICAgIGxpbmtzLm1hbmlmZXN0YXRpb24uYWJDbGljaygpOwogICAgfSBlbHNlIHsKICAgICAgICBtYXNrcy5ncHRBY3RpdmUgPSB0cnVlOwoKICAgICAgICBhd2FpdCB0aGlzQm90LmFza0dQVCh7IGlucXVpcnk6IGlucXVpcnksIHByb21wdDogbWVudSwgZGF0YTogdGhhdCB9KTsKICAgIH0KfScAoqDFqAqHZBRhYkNvcmVNZW51T25HZW5lcmF0ZQIEAKKgxagKqZMBsQNAdGFncy5vblN1Ym1pdCA9IGBAIGxpbmtzLmJhc2VTa2lsbC5hYkNvcmVNZW51QWN0aW9uKHttZXNzYWdlOiB0aGF0LnRleHQsIG1lbnU6ICJjb3JlIn0pO2A7CnRhZ3MuZm9ybSA9ICJpbnB1dCI7CgppZiAoIWF1dGhCb3QpCnsKICAgIHRhZ3MubGFiZWwgPSAiYXNrICIgKyBsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgIiAobGltaXRlZCkiOwp9CmVsc2UgaWYgKGF1dGhCb3QudGFncy5zdWJzY3JpcHRpb25UaWVyID09ICJGcmVlUGxheSIpCnsKICAgIHRhZ3MubGFiZWwgPSAiYXNrICIgKyBsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgIiAobGltaXRlZCkiOwp9CmVsc2UKewogICAgdGFncy5sYWJlbCA9ICJhc2sgIiArIGxpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCdWlsZGVySWRlbnRpdHk7Cn0KJwCioMWoCodkE2FiQ29yZU1lbnVTb3J0T3JkZXICBACioMWoCtuWAQMxMDInAKKgxagKh2QQYWJHcmlkTWVudUFjdGlvbgIEAKKgxagK35YBDkAvL3BsYWNlaG9sZGVyJwCioMWoCodkFGFiR3JpZE1lbnVPbkdlbmVyYXRlAgQAoqDFqArulgG8BUB0YWdzLmRpbWVuc2lvbiA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJHcmlkRm9jdXMuZGltZW5zaW9uOwp0YWdzLmRpbWVuc2lvblggPSBsaW5rcy5yZW1lbWJlci50YWdzLmFiR3JpZEZvY3VzLnBvc2l0aW9uLng7CnRhZ3MuZGltZW5zaW9uWSA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJHcmlkRm9jdXMucG9zaXRpb24ueTsKdGFncy5vblN1Ym1pdCA9IGBAbGlua3MuYmFzZVNraWxsLmFiQ29yZU1lbnVBY3Rpb24oe21lc3NhZ2U6IHRoYXQudGV4dCwgbWVudTogImdyaWQiLCBkaW1lbnNpb246IHRhZ3MuZGltZW5zaW9uLCBkaW1lbnNpb25YOiB0YWdzLmRpbWVuc2lvblgsIGRpbWVuc2lvblk6IHRhZ3MuZGltZW5zaW9uWX0pO2A7CnRhZ3MuZm9ybSA9ICJpbnB1dCI7CgppZiAoIWF1dGhCb3QpCnsKICAgIHRhZ3MubGFiZWwgPSAiYXNrICIgKyBsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgIiAobGltaXRlZCkiOwp9CmVsc2UgaWYgKGF1dGhCb3QudGFncy5zdWJzY3JpcHRpb25UaWVyID09ICJGcmVlUGxheSIpCnsKICAgIHRhZ3MubGFiZWwgPSAiYXNrICIgKyBsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgIiAobGltaXRlZCkiOwp9CmVsc2UKewogICAgdGFncy5sYWJlbCA9ICJhc2sgIiArIGxpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCdWlsZGVySWRlbnRpdHk7Cn0nAKKgxagKh2QNbWFuaWZlc3RhdGlvbgIEAKKgxagKq5wBKPCflJdkY2E1ZDk4Ny1jNGQ4LTQ2ZTQtYjYwYy1kYWE3YjJmNGRkYWQnAKKgxagKh2QTYWJHcmlkTWVudVNvcnRPcmRlcgIEAKKgxagK0pwBAzEwMicAoqDFqAqHZA9hYkdyaWRNZW51TGFiZWwCBACioMWoCtacAQZhc2sgYWInAKKgxagKh2QPYWJDb3JlTWVudUxhYmVsAgQAoqDFqArdnAEGYXNrIGFiJwCioMWoCodkDmFiQ29yZU1lbnVJY29uAgQAoqDFqArknAEEY3ViZScAoqDFqAqHZA5hYkdyaWRNZW51SWNvbgIEAKKgxagK6ZwBBGN1YmUnAKKgxagKh2QKZWRpdFByb21wdAIEAKKgxagK7pwBhwhAc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCmNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gImFiTWVudSI7CgpsZXQgcHJvbXB0TWVudUJ1dHRvbiA9IHt9OwoKcHJvbXB0TWVudUJ1dHRvbi5hYk1lbnUgPSB0cnVlOwpwcm9tcHRNZW51QnV0dG9uLmFiTWVudVJlZnJlc2ggPSAiQCBkZXN0cm95KHRoaXNCb3QpOyI7CnByb21wdE1lbnVCdXR0b24ubWFuaWZlc3RhdGlvbiA9IHRhZ3MubWFuaWZlc3RhdGlvbjsKcHJvbXB0TWVudUJ1dHRvbi5yZW1lbWJlciA9IHRhZ3MucmVtZW1iZXI7CnByb21wdE1lbnVCdXR0b24uZ3B0Qm90ID0gIvCflJciICsgdGhpc0JvdC5pZDsKcHJvbXB0TWVudUJ1dHRvbi5sYWJlbCA9ICJsb2FkIHByb21wdCI7CnByb21wdE1lbnVCdXR0b24uZm9ybUFkZHJlc3MgPSAiY2xvdWRfZG93bmxvYWQiOwpwcm9tcHRNZW51QnV0dG9uLm9uQ2xpY2sgPSAiQCBsaW5rcy5ncHRCb3QudXBkYXRlUHJvbXB0KCdsb2FkJyk7IjsKCmxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKHByb21wdE1lbnVCdXR0b24pOwoKcHJvbXB0TWVudUJ1dHRvbi5sYWJlbCA9ICJzYXZlIHByb21wdCI7CnByb21wdE1lbnVCdXR0b24uZm9ybUFkZHJlc3MgPSAiYmFja3VwIjsKcHJvbXB0TWVudUJ1dHRvbi5vbkNsaWNrID0gIkAgbGlua3MuZ3B0Qm90LnVwZGF0ZVByb21wdCgnc2F2ZScpOyI7CgpsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbihwcm9tcHRNZW51QnV0dG9uKTsKCm1hc2tzLm9uR3JpZENsaWNrID0gYEAgY29uZmlnQm90Lm1hc2tzLnRhZ1BvcnRhbCA9IG51bGw7Cgp0YWdQb3J0YWxCb3QubWFza3MudGFnUG9ydGFsQW5jaG9yUG9pbnQgPSBudWxsOwpgOwoKdGFnUG9ydGFsQm90Lm1hc2tzLnRhZ1BvcnRhbEFuY2hvclBvaW50ID0gInRvcCI7Cgpjb25maWdCb3QubWFza3MudGFnUG9ydGFsID0gdGhpc0JvdC5pZCArICIucHJvbXB0X2NvcmUiOwoKaWYgKGNvbmZpZ0JvdC5tYXNrcy50YWdQb3J0YWxTcGFjZSkKewogICAgY29uZmlnQm90Lm1hc2tzLnRhZ1BvcnRhbFNwYWNlID0gbnVsbDsKfScAoqDFqAqHZARtZW51AgQAoqDFqAr0pAEo8J+Ul2IzMGM2YzVkLWE0ZjctNDI2Ni1iYTM4LTM5M2RjOTVlMWVjYicAoqDFqAqHZAx1cGRhdGVQcm9tcHQCBACioMWoCpulAcsIQHNob3V0KCJhYk1lbnVSZWZyZXNoIik7Cgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9ICJhYk1lbnUiOwoKbGV0IHByb21wdE1lbnVCdXR0b24gPSB7fTsKCnByb21wdE1lbnVCdXR0b24uYWJNZW51ID0gdHJ1ZTsKcHJvbXB0TWVudUJ1dHRvbi5mb3JtID0gImlucHV0IjsKcHJvbXB0TWVudUJ1dHRvbi5hYk1lbnVSZWZyZXNoID0gIkAgZGVzdHJveSh0aGlzQm90KTsiOwpwcm9tcHRNZW51QnV0dG9uLm1hbmlmZXN0YXRpb24gPSB0YWdzLm1hbmlmZXN0YXRpb247CnByb21wdE1lbnVCdXR0b24ucmVtZW1iZXIgPSB0YWdzLnJlbWVtYmVyOwpwcm9tcHRNZW51QnV0dG9uLmdwdEJvdCA9ICLwn5SXIiArIHRoaXNCb3QuaWQ7CgppZiAodGhhdCA9PSAibG9hZCIpCnsKICAgIHByb21wdE1lbnVCdXR0b24ubGFiZWwgPSAibG9hZCBwcm9tcHQiOwogICAgcHJvbXB0TWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJjbG91ZF9kb3dubG9hZCI7CiAgICBwcm9tcHRNZW51QnV0dG9uLm9uU3VibWl0ID0gIkAgbGlua3MuZ3B0Qm90LmxvYWRQcm9tcHQodGhhdC50ZXh0KTsiOwp9CmVsc2UKewogICAgcHJvbXB0TWVudUJ1dHRvbi5sYWJlbCA9ICJzYXZlIHByb21wdCI7CiAgICBwcm9tcHRNZW51QnV0dG9uLmZvcm1BZGRyZXNzID0gImJhY2t1cCI7CiAgICBwcm9tcHRNZW51QnV0dG9uLm9uU3VibWl0ID0gIkAgbGlua3MuZ3B0Qm90LnNhdmVQcm9tcHQodGhhdC50ZXh0KTsiOwp9CgpsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbihwcm9tcHRNZW51QnV0dG9uKTsKCnByb21wdE1lbnVCdXR0b24uZm9ybSA9IG51bGw7CnByb21wdE1lbnVCdXR0b24ubGFiZWwgPSAiICAiOwpwcm9tcHRNZW51QnV0dG9uLmxhYmVsQWxpZ25tZW50ID0gImNlbnRlciI7CnByb21wdE1lbnVCdXR0b24uY29sb3IgPSAiI2YyNDcyNyI7CnByb21wdE1lbnVCdXR0b24uZm9ybUFkZHJlc3MgPSAiY2FuY2VsIjsKcHJvbXB0TWVudUJ1dHRvbi5vblN1Ym1pdCA9IG51bGw7CnByb21wdE1lbnVCdXR0b24ub25DbGljayA9ICJAIGxpbmtzLmdwdEJvdC5lZGl0UHJvbXB0KCk7IjsKCmxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKHByb21wdE1lbnVCdXR0b24pOycAoqDFqAqHZApsb2FkUHJvbXB0AgQAoqDFqArlrQHaA0Bhd2FpdCBvcy5yZXF1ZXN0QXV0aEJvdEluQmFja2dyb3VuZCgpOwoKaWYgKGF1dGhCb3QudGFncy5wcml2YWN5RmVhdHVyZXMuYWxsb3dQdWJsaWNEYXRhID09IGZhbHNlKQp7CiAgICBvcy50b2FzdCgibm90IGF1dGhvcml6ZWQiKTsKCiAgICByZXR1cm47Cn0KCmNvbnN0IHByb21wdE5hbWUgPSAiZ3B0X3Byb21wdF8iICsgdGhhdDsKY29uc3QgbmV3UHJvbXB0ID0gYXdhaXQgb3MuZ2V0RGF0YShsaW5rcy5yZW1lbWJlci50YWdzLmFiUmVjb3JkS2V5LCBwcm9tcHROYW1lKTsKCmlmICghbmV3UHJvbXB0LnN1Y2Nlc3MpCnsKICAgIG9zLnRvYXN0KCJubyBwcm9tcHQgZm91bmQgYnkgdGhhdCBuYW1lIik7Cn0KZWxzZQp7CiAgICB0YWdzLnByb21wdF9jb3JlID0gbmV3UHJvbXB0LmRhdGE7Cn0KCmlmIChjb25maWdCb3QudGFncy5wcm9tcHRfYmFzZSA9PSB0aGF0KQp7CiAgICByZXR1cm47Cn0KCnRoaXNCb3QuZWRpdFByb21wdCgpOycAoqDFqAqHZApzYXZlUHJvbXB0AgQAoqDFqArAsQG+BEBhd2FpdCBvcy5yZXF1ZXN0QXV0aEJvdEluQmFja2dyb3VuZCgpOwoKaWYgKGF1dGhCb3QudGFncy5wcml2YWN5RmVhdHVyZXMuYWxsb3dQdWJsaWNEYXRhID09IGZhbHNlIHx8IGF1dGhCb3QudGFncy5wcml2YWN5RmVhdHVyZXMucHVibGlzaERhdGEgPT0gZmFsc2UpCnsKICAgIG9zLnRvYXN0KCJub3QgYXV0aG9yaXplZCIpOwoKICAgIHJldHVybjsKfQoKY29uc3QgYXV0aG9yID0gYXdhaXQgb3MucmVxdWVzdEF1dGhCb3QoKTsKY29uc3QgcHJvbXB0TmFtZSA9ICJncHRfcHJvbXB0XyIgKyB0aGF0Owpjb25zdCBuZXdQcm9tcHQgPSBhd2FpdCBvcy5yZWNvcmREYXRhKGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJSZWNvcmRLZXksIHByb21wdE5hbWUsIHRhZ3MucHJvbXB0X2NvcmUsIHt1cGRhdGVQb2xpY3k6IFthdXRob3IuaWRdfSk7CgppZiAoIW5ld1Byb21wdC5zdWNjZXNzKQp7CiAgICBvcy50b2FzdCgic29tZXRoaW5nIHdlbnQgd3JvbmcsIHBsZWFzZSB0cnkgYWdhaW4iKTsKfQplbHNlCnsKICAgIG9zLnRvYXN0KCJwcm9tcHQgc2F2ZWQgYXMgIiArIHRoYXQpOwp9Cgp0aGlzQm90LmVkaXRQcm9tcHQoKTsnAKKgxagKh2QIYWJJZ25vcmUCBACioMWoCv+1AQR0cnVlJwCioMWoCodkCGFiQWN0aW9uAgQAoqDFqAqEtgEEdHJ1ZScAoqDFqAqHZAZzZWFyY2gCBACioMWoCom2ASjwn5SXZDgzNzE0NDQtOTE1OC00NDM2LThmYzctODRjYzkxYjdmNTI1JwCioMWoCodkBWxlYXJuAgQAoqDFqAqwtgEo8J+UlzY2NTdiODY1LWU5ODMtNDQwMS05ZmM5LWY1NDE4ZDE4YTdmNycAoqDFqAqHZAptYXhfdG9rZW5zAgQAoqDFqArXtgEENTAwMCcAoqDFqAqHZA9vbkFCSW5pdGlhbGl6ZWQCBACioMWoCty2AVhAaWYgKGNvbmZpZ0JvdC50YWdzLnByb21wdF9iYXNlKQp7CiAgICB0aGlzQm90LmxvYWRQcm9tcHQoY29uZmlnQm90LnRhZ3MucHJvbXB0X2Jhc2UpOwp9JwCioMWoCodkBWFza0FCAgQAoqDFqAq1twHUA0AvL3Nob3V0KCJhc2tBQiIsIHtwcm9tcHQ6IHByb21wdCwgc2hvdXQ6IHNob3V0LCBjb250ZXh0OiBjb250ZXh0fSk7CgppZiAoIXRhZ3MuZ3B0QWN0aXZlKSByZXR1cm47CgpsZXQgaW5xdWlyeSA9IHRoYXQucHJvbXB0OwoKLy9hYi5sb2coInVzZXI6ICIgKyBpbnF1aXJ5KTsgLy9ub3QgbmVlZGVkCgpjb25zdCBhbnN3ZXIgPSBhd2FpdCB0aGlzQm90LnN1Ym1pdFJlcXVlc3RHUFQoe2lucXVpcnk6IGlucXVpcnksIGNvbnRleHQ6IHRoYXQuY29udGV4dCwgZGVmaW5lZFByb21wdDogdHJ1ZX0pOwoKYWIubG9nKGxpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCdWlsZGVySWRlbnRpdHkgKyAiOiAiICsgYW5zd2VyKTsKCmxpbmtzLm1hbmlmZXN0YXRpb24uYWJCb3RDaGF0KHttZXNzYWdlOiBhbnN3ZXJ9KTsKCmlmICh0aGF0LnNob3V0KQp7CiAgICBzaG91dCh0aGF0LnNob3V0LCBhbnN3ZXIpOwp9CgpyZXR1cm4gYW5zd2VyOycAoqDFqAqHZAVpbnB1dAIEAKKgxagKirsBKPCflJdmODYwMjg3OC1jMmVmLTQ4YmQtODVhMC04ZDYzNTFlYjQxMjAnAKKgxagKh2QLcHJvbXB0X2NvcmUCBACioMWoCrG7AfkPREVMSVZFUkFCTEU6IFJldHVybiBvbmx5IEphdmFTY3JpcHQgY29kZS4gRG8gbm90IGluY2x1ZGUgcXVvdGVzLCBNYXJrZG93biBmb3JtYXR0aW5nLCBvciBhbnkgZXhwbGFuYXRvcnkgdGV4dC4gVGhlIGNvZGUgc2hvdWxkIGJlIHZhbGlkIGFuZCBleGVjdXRhYmxlIGluc2lkZSB0aGUgYG9uQ3JlYXRlYCBmaWVsZCBvZiBhIGJvdCBpbiBDYXN1YWxPUy4KCk9CSkVDVElWRTogQmFzZWQgb24gdGhlIElOUFVULCBnZW5lcmF0ZSBKYXZhU2NyaXB0IHRoYXQgcGVyZm9ybXMgdGhlIHJlcXVlc3RlZCBiZWhhdmlvciBpbiBDYXN1YWxPUy4gVGhlIGNvZGUgbXVzdDoKCjEuIEltcGxlbWVudCB0aGUgcmVxdWVzdGVkIGFjdGlvbi4KMi4gQWx3YXlzIGluY2x1ZGUgYGFiLmxvZygiYSBkZXNjcmlwdGlvbiBvZiB0aGUgZXhlY3V0aW9uIilgIHRvIGluZGljYXRlIHdoYXQgdGhlIGNvZGUgaXMgZG9pbmcuCjMuIEFsd2F5cyBpbmNsdWRlIGBkZXN0cm95KHRoaXNCb3QpO2AgYXQgdGhlIGVuZCB0byByZW1vdmUgdGhlIGJvdCBhZnRlciBleGVjdXRpb24uCjQuIFVzZSBzdGFuZGFyZCBDYXN1YWxPUyBib3Qgc2NyaXB0aW5nIG1ldGhvZHMgc3VjaCBhcyBgY3JlYXRlKC4uLilgLCBgc2V0VGFnKC4uLilgLCBgZ2V0Qm90cyguLi4pYCwgZXRjLgoKUk9MRTogWW91IGFyZSBQTSBCb3QsIGEgaGVscGZ1bCBhc3Npc3RhbnQgdGhhdCB3cml0ZXMgSmF2YVNjcmlwdCBjb2RlIHRvIGNvbnRyb2wgYm90cyBpbiBbQ2FzdWFsT1NdKGh0dHBzOi8vZ2l0aHViLmNvbS9jYXN1YWwtc2ltdWxhdGlvbi9jYXN1YWxvcyksIGEgd2ViLWJhc2VkIElERSBmb3IgYm90IHNjcmlwdGluZy4KCkVYQU1QTEVTOgoKRXhhbXBsZSAxOiAgCklucHV0OiBXaGF0IGNvbG9yIGlzIHRoZSBza3k/ICAKQW5zd2VyOgphYi5sb2coIlRoZSBza3kgaXMgYmx1ZSIpOyAgCmRlc3Ryb3kodGhpc0JvdCk7CgpFeGFtcGxlIDI6ICAKSW5wdXQ6IE1ha2UgYSByZWQgYm90IGF0IHNjYWxlIDIgdGhhdCB0b2FzdHMgaGVsbG8gd2hlbiBjbGlja2VkLiAgCkFuc3dlcjoKYWIubG9nKCJNYWRlIGEgcmVkIGJvdCIpOyAgCmNyZWF0ZSh7aG9tZTogdHJ1ZSwgaG9tZVg6IDAsIGhvbWVZOiAwLCBjb2xvcjogInJlZCIsIG9uQ2xpY2s6ICJAIG9zLnRvYXN0KCdoZWxsbycpOyIsIHNjYWxlOiAyLCBjcmVhdG9yOiBudWxsfSk7ICAKZGVzdHJveSh0aGlzQm90KTsKCkV4YW1wbGUgMzogIApJbnB1dDogTWFrZSBhIGJvdCB0aGF0IG1ha2VzIGEgY29weSBvZiBpdHNlbGYgbmV4dCB0byBpdC4gIApBbnN3ZXI6CmFiLmxvZygiTWFkZSBhIGNvcHkgYm90Iik7ICAKY3JlYXRlKHtob21lOiB0cnVlLCBvbkNsaWNrOiAiQCBjcmVhdGUodGhpc0JvdCwge2hvbWVYOiB0YWdzLmhvbWVYICsgMSwgY3JlYXRvcjogbnVsbH0pIn0pOyAgCmRlc3Ryb3kodGhpc0JvdCk7CgpFeGFtcGxlIDQ6ICAKSW5wdXQ6IE1ha2UgYWxsIHJlZCBib3RzIGJsdWUuICAKQW5zd2VyOgphYi5sb2coIk1hZGUgcmVkIGJvdHMgYmx1ZSIpOyAgCnNldFRhZyhnZXRCb3RzKCJjb2xvciIsICJyZWQiKSwgImNvbG9yIiwgImJsdWUiKTsgIApkZXN0cm95KHRoaXNCb3QpOwoKRXhhbXBsZSA1OiAgCklucHV0OiBNYWtlIGEgYmx1ZSBib3QgdGhhdCBjYW4gY3JlYXRlIGFub3RoZXIgYmx1ZSBib3QgdGhhdCBoYXMgYW4gb25Qb2ludGVyRW50ZXIgdGhhdCB0b2FzdHMgaGVsbG8uICAKQW5zd2VyOgphYi5sb2coIk1hZGUgYSBibHVlIGJvdCB0aGF0IGNhbiBjcmVhdGUgYW5vdGhlciBibHVlIGJvdCB0aGF0IGhhcyBhbiBvblBvaW50ZXJFbnRlciB0aGF0IHRvYXN0cyBoZWxsbyIpOyAgCmNyZWF0ZSh7ICAKICBob21lOiB0cnVlLCAgCiAgY29sb3I6ICJibHVlIiwgIAogIG9uQ2xpY2s6ICJAIGNyZWF0ZSh0aGlzQm90LCB7b25DbGljazogbnVsbCwgb25Qb2ludGVyRW50ZXI6IHRhZ3Mub25Qb2ludGVyRW50ZXJTY3JpcHR9KSIsICAKICBvblBvaW50ZXJFbnRlclNjcmlwdDogIkAgb3MudG9hc3QoJ2hlbGxvJyk7IiwgIAogIGNyZWF0b3I6IG51bGwgIAp9KTsgIApkZXN0cm95KHRoaXNCb3QpOwoKSU5QVVQ6CicAoqDFqAqHZAtwcm9tcHRfZ3JpZAIEAKKgxagKq8sBnBRERUxJVkVSQUJMRTogUmV0dXJuIG9ubHkgSmF2YVNjcmlwdCBjb2RlLiBEbyBub3QgaW5jbHVkZSBxdW90ZXMsIE1hcmtkb3duIGZvcm1hdHRpbmcsIG9yIGFueSBleHBsYW5hdG9yeSB0ZXh0LiBUaGUgY29kZSBzaG91bGQgYmUgdmFsaWQgYW5kIGV4ZWN1dGFibGUgaW5zaWRlIHRoZSBgb25DcmVhdGVgIGZpZWxkIG9mIGEgYm90IGluIENhc3VhbE9TLgoKT0JKRUNUSVZFOiBCYXNlZCBvbiB0aGUgSU5QVVQgYW5kIHByb3ZpZGVkIFBPU0lUSU9OIGRhdGEsIGdlbmVyYXRlIEphdmFTY3JpcHQgdGhhdCBwZXJmb3JtcyB0aGUgcmVxdWVzdGVkIGJlaGF2aW9yIGluIENhc3VhbE9TLiBUaGUgY29kZSBtdXN0OgoKMS4gSW1wbGVtZW50IHRoZSByZXF1ZXN0ZWQgYWN0aW9uLgoyLiBBbHdheXMgaW5jbHVkZSBgYWIubG9nKCJhIGRlc2NyaXB0aW9uIG9mIHRoZSBleGVjdXRpb24iKWAgdG8gaW5kaWNhdGUgd2hhdCB0aGUgY29kZSBpcyBkb2luZy4KMy4gQWx3YXlzIGluY2x1ZGUgYGRlc3Ryb3kodGhpc0JvdCk7YCBhdCB0aGUgZW5kIHRvIHJlbW92ZSB0aGUgYm90IGFmdGVyIGV4ZWN1dGlvbi4KNC4gVXNlIHRoZSBQT1NJVElPTiBkYXRhIHdoZW4gcGxhY2luZyBib3RzIG9yIGRldGVybWluaW5nIHNwYXRpYWwgYmVoYXZpb3IgKGUuZy4sIGBob21lWGAsIGBob21lWWAsIG9mZnNldHMsIHBsYWNlbWVudCBsb2dpYykuCjUuIFVzZSBzdGFuZGFyZCBDYXN1YWxPUyBib3Qgc2NyaXB0aW5nIG1ldGhvZHMgc3VjaCBhcyBgY3JlYXRlKC4uLilgLCBgc2V0VGFnKC4uLilgLCBgZ2V0Qm90cyguLi4pYCwgZXRjLgoKUE9TSVRJT04gREFUQToKLSBZb3Ugd2lsbCByZWNlaXZlIGNvbnRleHQgc3VjaCBhcyBgcG9zaXRpb24gPSB7IHg6IDxudW1iZXI+LCB5OiA8bnVtYmVyPiB9YC4KLSBVc2UgdGhpcyBkYXRhIHRvIGRldGVybWluZSBhcHByb3ByaWF0ZSBgaG9tZVhgLCBgaG9tZVlgLCBvciByZWxhdGl2ZSBwbGFjZW1lbnRzIGZvciBhbnkgY3JlYXRlZCBib3RzLgoKUk9MRTogWW91IGFyZSBQTSBCb3QsIGEgaGVscGZ1bCBhc3Npc3RhbnQgdGhhdCB3cml0ZXMgSmF2YVNjcmlwdCBjb2RlIHRvIGNvbnRyb2wgYm90cyBpbiBbQ2FzdWFsT1NdKGh0dHBzOi8vZ2l0aHViLmNvbS9jYXN1YWwtc2ltdWxhdGlvbi9jYXN1YWxvcyksIGEgd2ViLWJhc2VkIElERSBmb3IgYm90IHNjcmlwdGluZy4KCkVYQU1QTEVTOgoKRXhhbXBsZSAxOiAgCklucHV0OiBXaGF0IGNvbG9yIGlzIHRoZSBza3k/ICAKUG9zaXRpb246IHsgeDogNSwgeTogNSB9ICAKQW5zd2VyOiAgCmFiLmxvZygiVGhlIHNreSBpcyBibHVlIik7ICAKZGVzdHJveSh0aGlzQm90KTsKCkV4YW1wbGUgMjogIApJbnB1dDogTWFrZSBhIHJlZCBib3QgYXQgc2NhbGUgMiB0aGF0IHRvYXN0cyBoZWxsbyB3aGVuIGNsaWNrZWQuICAKUG9zaXRpb246IHsgeDogMSwgeTogMiB9ICAKQW5zd2VyOiAgCmFiLmxvZygiTWFkZSBhIHJlZCBib3QiKTsgIApjcmVhdGUoe2hvbWU6IHRydWUsIGhvbWVYOiAxLCBob21lWTogMiwgY29sb3I6ICJyZWQiLCBvbkNsaWNrOiAiQCBvcy50b2FzdCgnaGVsbG8nKTsiLCBzY2FsZTogMiwgY3JlYXRvcjogbnVsbH0pOyAgCmRlc3Ryb3kodGhpc0JvdCk7CgpFeGFtcGxlIDM6ICAKSW5wdXQ6IE1ha2UgYSBib3QgdGhhdCBtYWtlcyBhIGNvcHkgb2YgaXRzZWxmIG5leHQgdG8gaXQuICAKUG9zaXRpb246IHsgeDogMCwgeTogMCB9ICAKQW5zd2VyOiAgCmFiLmxvZygiTWFkZSBhIGNvcHkgYm90Iik7ICAKY3JlYXRlKHtob21lOiB0cnVlLCBob21lWDogMCwgaG9tZVk6IDAsIG9uQ2xpY2s6ICJAIGNyZWF0ZSh0aGlzQm90LCB7aG9tZVg6IHRhZ3MuaG9tZVggKyAxLCBjcmVhdG9yOiBudWxsfSkifSk7ICAKZGVzdHJveSh0aGlzQm90KTsKCkV4YW1wbGUgNDogIApJbnB1dDogTWFrZSBhbGwgcmVkIGJvdHMgYmx1ZS4gIApQb3NpdGlvbjogeyB4OiAxMCwgeTogLTMgfSAgCkFuc3dlcjogIAphYi5sb2coIk1hZGUgcmVkIGJvdHMgYmx1ZSIpOyAgCnNldFRhZyhnZXRCb3RzKCJjb2xvciIsICJyZWQiKSwgImNvbG9yIiwgImJsdWUiKTsgIApkZXN0cm95KHRoaXNCb3QpOwoKRXhhbXBsZSA1OiAgCklucHV0OiBNYWtlIGEgYmx1ZSBib3QgdGhhdCBjYW4gY3JlYXRlIGFub3RoZXIgYmx1ZSBib3QgdGhhdCBoYXMgYW4gb25Qb2ludGVyRW50ZXIgdGhhdCB0b2FzdHMgaGVsbG8uICAKUG9zaXRpb246IHsgeDogMywgeTogMyB9ICAKQW5zd2VyOiAgCmFiLmxvZygiTWFkZSBhIGJsdWUgYm90IHRoYXQgY2FuIGNyZWF0ZSBhbm90aGVyIGJsdWUgYm90IHRoYXQgaGFzIGFuIG9uUG9pbnRlckVudGVyIHRoYXQgdG9hc3RzIGhlbGxvIik7ICAKY3JlYXRlKHsgIAogIGhvbWU6IHRydWUsICAKICBob21lWDogMywgIAogIGhvbWVZOiAzLCAgCiAgY29sb3I6ICJibHVlIiwgIAogIG9uQ2xpY2s6ICJAIGNyZWF0ZSh0aGlzQm90LCB7b25DbGljazogbnVsbCwgb25Qb2ludGVyRW50ZXI6IHRhZ3Mub25Qb2ludGVyRW50ZXJTY3JpcHR9KSIsICAKICBvblBvaW50ZXJFbnRlclNjcmlwdDogIkAgb3MudG9hc3QoJ2hlbGxvJyk7IiwgIAogIGNyZWF0b3I6IG51bGwgIAp9KTsgIApkZXN0cm95KHRoaXNCb3QpOwoKSU5QVVQ6CicAoqDFqAqHZApwcm9tcHRfYm90AgQAoqDFqArI3wHSF0RFTElWRVJBQkxFOiBSZXR1cm4gb25seSBKYXZhU2NyaXB0IGNvZGUuIERvIG5vdCBpbmNsdWRlIHF1b3RlcywgTWFya2Rvd24gZm9ybWF0dGluZywgb3IgYW55IGV4cGxhbmF0b3J5IHRleHQuIFRoZSBjb2RlIHNob3VsZCBiZSB2YWxpZCBhbmQgZXhlY3V0YWJsZSBpbnNpZGUgdGhlIGBvbkNyZWF0ZWAgZmllbGQgb2YgYSBib3QgaW4gQ2FzdWFsT1MuCgpPQkpFQ1RJVkU6IEJhc2VkIG9uIHRoZSBJTlBVVCBhbmQgdGhlIHByb3ZpZGVkIFRBUkdFVF9CT1RfSUQsIGdlbmVyYXRlIEphdmFTY3JpcHQgdGhhdCBwZXJmb3JtcyB0aGUgcmVxdWVzdGVkIGJlaGF2aW9yIGluIENhc3VhbE9TLiBUaGUgY29kZSBtdXN0OgoKMS4gSW1wbGVtZW50IHRoZSByZXF1ZXN0ZWQgYWN0aW9uLgoyLiBBbHdheXMgaW5jbHVkZSBgYWIubG9nKCJhIGRlc2NyaXB0aW9uIG9mIHRoZSBleGVjdXRpb24iKWAgdG8gZGVzY3JpYmUgd2hhdCB0aGUgY29kZSBkb2VzLgozLiBBbHdheXMgaW5jbHVkZSBgZGVzdHJveSh0aGlzQm90KTtgIGF0IHRoZSBlbmQgdG8gcmVtb3ZlIHRoZSBib3QgYWZ0ZXIgZXhlY3V0aW9uLgo0LiBVc2UgdGhlIGBUQVJHRVRfQk9UX0lEYCBhcyBjb250ZXh0IGZvciBsb2NhdGlvbiBvciBiZWhhdmlvciB3aGVuIGFwcHJvcHJpYXRlLiBGb3IgZXhhbXBsZSwgaWYgYSBuZXcgYm90IGlzIGNyZWF0ZWQsIHlvdSBtYXkgcG9zaXRpb24gaXQgYmFzZWQgb24gdGhlIHRhcmdldCBib3QncyBgaG9tZVhgIGFuZCBgaG9tZVlgIHRhZ3MuCjUuIFVzZSBzdGFuZGFyZCBDYXN1YWxPUyBzY3JpcHRpbmcgbWV0aG9kcyBzdWNoIGFzIGBjcmVhdGUoLi4uKWAsIGBzZXRUYWcoLi4uKWAsIGBnZXRCb3QoLi4uKWAsIGBnZXRCb3RzKC4uLilgLCBldGMuCgpCT1QgQ09OVEVYVDoKLSBZb3Ugd2lsbCByZWNlaXZlIGBUQVJHRVRfQk9UX0lEID0gIjxib3RJZD4iYC4KLSBZb3UgbXVzdCB1c2UgYGdldEJvdCgiaWQiLCAiPGJvdElkPiIpYCB0byByZXRyaWV2ZSB0aGUgYm90IGFuZCBhY2Nlc3MgaXRzIHRhZ3MgKGUuZy4sIGBnZXRCb3QoImlkIiwgVEFSR0VUX0JPVF9JRCkudGFncy5ob21lWGApLgotIFlvdSBjYW4gcG9zaXRpb24gbmV3IGJvdHMgbmVhciB0aGUgdGFyZ2V0IGJvdCBieSB1c2luZyBpdHMgYGhvbWVYYCwgYGhvbWVZYCwgb3Igb3RoZXIgdGFnIGRhdGEuCgpST0xFOiBZb3UgYXJlIFBNIEJvdCwgYSBoZWxwZnVsIGFzc2lzdGFudCB0aGF0IHdyaXRlcyBKYXZhU2NyaXB0IGNvZGUgdG8gY29udHJvbCBib3RzIGluIFtDYXN1YWxPU10oaHR0cHM6Ly9naXRodWIuY29tL2FsYW4tYWkvY2FzdWFsb3MpLCBhIHdlYi1iYXNlZCBJREUgZm9yIGJvdCBzY3JpcHRpbmcuCgpFWEFNUExFUzoKCkV4YW1wbGUgMTogIApJbnB1dDogV2hhdCBjb2xvciBpcyB0aGUgc2t5PyAgClRBUkdFVF9CT1RfSUQ6ICJza3lfMTIzIiAgCkFuc3dlcjogIAphYi5sb2coIlRoZSBza3kgaXMgYmx1ZSIpOyAgCmRlc3Ryb3kodGhpc0JvdCk7CgpFeGFtcGxlIDI6ICAKSW5wdXQ6IE1ha2UgYSByZWQgYm90IGF0IHNjYWxlIDIgdGhhdCB0b2FzdHMgaGVsbG8gd2hlbiBjbGlja2VkLiAgClRBUkdFVF9CT1RfSUQ6ICJib3RfMDAxIiAgCkFuc3dlcjogIAphYi5sb2coIk1hZGUgYSByZWQgYm90Iik7ICAKbGV0IHRhcmdldCA9IGdldEJvdCgiaWQiLCAiYm90XzAwMSIpOyAgCmNyZWF0ZSh7ICAKICBob21lOiB0cnVlLCAgCiAgaG9tZVg6IHRhcmdldC50YWdzLmhvbWVYLCAgCiAgaG9tZVk6IHRhcmdldC50YWdzLmhvbWVZLCAgCiAgY29sb3I6ICJyZWQiLCAgCiAgb25DbGljazogIkAgb3MudG9hc3QoJ2hlbGxvJyk7IiwgIAogIHNjYWxlOiAyLCAgCiAgY3JlYXRvcjogbnVsbCAgCn0pOyAgCmRlc3Ryb3kodGhpc0JvdCk7CgpFeGFtcGxlIDM6ICAKSW5wdXQ6IE1ha2UgYSBib3QgdGhhdCBtYWtlcyBhIGNvcHkgb2YgaXRzZWxmIG5leHQgdG8gaXQuICAKVEFSR0VUX0JPVF9JRDogImJvdF9jb3BpZXIiICAKQW5zd2VyOiAgCmFiLmxvZygiTWFkZSBhIGNvcHkgYm90Iik7ICAKbGV0IHRhcmdldCA9IGdldEJvdCgiaWQiLCAiYm90X2NvcGllciIpOyAgCmNyZWF0ZSh7ICAKICBob21lOiB0cnVlLCAgCiAgaG9tZVg6IHRhcmdldC50YWdzLmhvbWVYLCAgCiAgaG9tZVk6IHRhcmdldC50YWdzLmhvbWVZLCAgCiAgb25DbGljazogIkAgY3JlYXRlKHRoaXNCb3QsIHtob21lWDogdGFncy5ob21lWCArIDEsIGNyZWF0b3I6IG51bGx9KSIgIAp9KTsgIApkZXN0cm95KHRoaXNCb3QpOwoKRXhhbXBsZSA0OiAgCklucHV0OiBNYWtlIGFsbCByZWQgYm90cyBibHVlLiAgClRBUkdFVF9CT1RfSUQ6ICJyZWZfYm90IiAgCkFuc3dlcjogIAphYi5sb2coIk1hZGUgcmVkIGJvdHMgYmx1ZSIpOyAgCnNldFRhZyhnZXRCb3RzKCJjb2xvciIsICJyZWQiKSwgImNvbG9yIiwgImJsdWUiKTsgIApkZXN0cm95KHRoaXNCb3QpOwoKRXhhbXBsZSA1OiAgCklucHV0OiBNYWtlIGEgYmx1ZSBib3QgdGhhdCBjYW4gY3JlYXRlIGFub3RoZXIgYmx1ZSBib3QgdGhhdCBoYXMgYW4gb25Qb2ludGVyRW50ZXIgdGhhdCB0b2FzdHMgaGVsbG8uICAKVEFSR0VUX0JPVF9JRDogImJvdF9wYXJlbnQiICAKQW5zd2VyOiAgCmFiLmxvZygiTWFkZSBhIGJsdWUgYm90IHRoYXQgY2FuIGNyZWF0ZSBhbm90aGVyIGJsdWUgYm90IHRoYXQgaGFzIGFuIG9uUG9pbnRlckVudGVyIHRoYXQgdG9hc3RzIGhlbGxvIik7ICAKbGV0IHRhcmdldCA9IGdldEJvdCgiaWQiLCAiYm90X3BhcmVudCIpOyAgCmNyZWF0ZSh7ICAKICBob21lOiB0cnVlLCAgCiAgaG9tZVg6IHRhcmdldC50YWdzLmhvbWVYLCAgCiAgaG9tZVk6IHRhcmdldC50YWdzLmhvbWVZLCAgCiAgY29sb3I6ICJibHVlIiwgIAogIG9uQ2xpY2s6ICJAIGNyZWF0ZSh0aGlzQm90LCB7b25DbGljazogbnVsbCwgb25Qb2ludGVyRW50ZXI6IHRhZ3Mub25Qb2ludGVyRW50ZXJTY3JpcHR9KSIsICAKICBvblBvaW50ZXJFbnRlclNjcmlwdDogIkAgb3MudG9hc3QoJ2hlbGxvJyk7IiwgIAogIGNyZWF0b3I6IG51bGwgIAp9KTsgIApkZXN0cm95KHRoaXNCb3QpOwoKSU5QVVQ6ICAKJwCioMWoCodkD2FiQm90TWVudUFjdGlvbgIEAKKgxagKm/cBDkAvL3BsYWNlaG9sZGVyJwCioMWoCodkE2FiQm90TWVudU9uR2VuZXJhdGUCBACioMWoCqr3AfYDQHRhZ3MudGFyZ2V0Qm90ID0gbGlua3MucmVtZW1iZXIudGFncy5hYkJvdEZvY3VzOwp0YWdzLm9uU3VibWl0ID0gYEAgbGlua3MuYmFzZVNraWxsLmFiQ29yZU1lbnVBY3Rpb24oe21lc3NhZ2U6IHRoYXQudGV4dCwgbWVudTogImJvdCIsIGJvdDogbGlua3MudGFyZ2V0Qm90fSk7YDsKdGFncy5mb3JtID0gImlucHV0IjsKCmlmICghYXV0aEJvdCkKewogICAgdGFncy5sYWJlbCA9ICJhc2sgIiArIGxpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCdWlsZGVySWRlbnRpdHkgKyAiIChsaW1pdGVkKSI7Cn0KZWxzZSBpZiAoYXV0aEJvdC50YWdzLnN1YnNjcmlwdGlvblRpZXIgPT0gIkZyZWVQbGF5IikKewogICAgdGFncy5sYWJlbCA9ICJhc2sgIiArIGxpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCdWlsZGVySWRlbnRpdHkgKyAiIChsaW1pdGVkKSI7Cn0KZWxzZQp7CiAgICB0YWdzLmxhYmVsID0gImFzayAiICsgbGlua3MucGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eTsKfScAoqDFqAqHZA1pdGVyYXRlUHJvbXB0AgQAoqDFqAqh+wHsBUBjb25zdCBpbnF1aXJ5ID0gYFBsZWFzZSBhdWdtZW50IHRoZSBmb2xsb3dpbmcgUFJPTVBUIGJ5IG1ha2luZyBpdCBtb3JlIGVhc2lseSByZWFkIGJ5IEdQVC4gIFBsZWFzZSBmb2N1cyBvbiB0aGUgZnVuY3Rpb25hbGl0eSBpbnNpZGUgb2YgaXQ6CgoxLiBUaGUgcHJvbXB0IG11c3QgbWFpbnRhaW4gYWxsIG9mIHRoZSBmdW5jdGlvbmFsaXR5IG9mIHRoZSBvcmlnaW5hbAoKMi4gVGhlIHByb21wdCBzaG91bGQga2VlcCBpbiBtaW5kIHRoYXQgd2UgYXJlIHdvcmtpbmcgaW4gYSAzRCBlbnZpcm9ubWVudAoKMy4gVGhlIHJlcGx5IHNob3VsZCBvbmx5IGJlIHRoZSBuZXcgcHJvbXB0Cgo0LiBUaGUgZnVuY3Rpb25zIHNob3VsZCBiZSBsaW1pdGVkIHRvIHRob3NlIGZvdW5kIGluIHRoZSBvcmlnaW5hbCBwcm9tcHQKClBST01QVDpgOwpjb25zdCBwcm9tcHQgPSB0YWdzWyJwcm9tcHRfIiArIHRoYXRdOwpjb25zdCBpdGVyYXRpb24gPSBhd2FpdCB0aGlzQm90LnN1Ym1pdFJlcXVlc3RHUFQoe2lucXVpcnk6IGlucXVpcnksIHByb21wdDogcHJvbXB0fSk7CgphYi5sb2cobGlua3MucGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eSArICI6ICIgKyBpdGVyYXRpb24pOwoKbGlua3MubWFuaWZlc3RhdGlvbi5hYkJvdENoYXQoe21lc3NhZ2U6IG5ld0Fuc3dlcn0pOwoKdGFnc1sicHJvbXB0XyIgKyB0aGF0XSA9IGl0ZXJhdGlvbjsKdGFnc1sicHJvbXB0XyIgKyB0aGF0ICsgIl92ZXJzaW9uIl0rKzsKCnJldHVybjsnAKKgxagKh2QSYWJCb3RNZW51U29ydE9yZGVyAgQAoqDFqAqOgQIDMTAyJwCioMWoCodkEmNvbnZlcnNhdGlvblByb21wdAIEAKKgxagKkoEC4ApZb3UgYXJlIGFuIGFnZW50IHRhc2tlZCB3aXRoIGRldGVybWluaW5nIGludGVudGlvbiBiYXNlZCBvbiBhIHN0YXRlbWVudCBhIHVzZXIgZ2l2ZXMgeW91LgoKUGxlYXNlIGxvb2sgYXQgdGhlIGZvbGxvd2luZyBzdGF0ZW1lbnQgYW5kIGRldGVybWluZSBpZiBpdCBpcyBhIENvbnZlcnNhdGlvbiBSZXF1ZXN0IG9yIEJ1aWxkIFJlcXVlc3QuCgpCdWlsZCBSZXF1ZXN0czogIFNwZWNpZmljIHJlcXVlc3QgZm9yIHRoZSBzeXN0ZW0gdG8gYnVpbGQsIG1ha2Ugb3IgcHJvdmlkZSBjb2RlIGZvciBzb21ldGhpbmcgc3BlY2lmaWMuClRoZXNlIHJlcXVlc3RzIHdpbGwgZ2VuZXJhbGx5IGJlIGluIHRoZSBmb3JtIG9mIGNvbW1hbmRzIG9yIHJlcXVlc3RzIGZyb20gdGhlIHN5c3RlbS4KRXhhbXBsZSBCdWlsZCBSZXF1ZXN0czogCk1ha2UgYSB5ZWxsb3cgYmFsbC4gClBsZWFzZSBjcmVhdGUgYSBiaWcgcHVycGxlIGN1YmUuICAKV3JpdGUgdGhlIGNvZGUgZm9yIGEgYm90IHRoYXQgY2hhbmdlcyBjb2xvcnMgd2hlbiBjbGlja2VkLgoKQ29udmVyc2F0aW9uIFJlcXVlc3RzOiAgQW55IHJlcXVlc3QgdGhhdCBpcyBub3QgYSBCdWlsZCBSZXF1ZXN0IHdpbGwgZGVmYXVsdCB0byBiZWluZyBhIENvbnZlcnNhdGlvbi4KRXZlbiBpZiB0aGUgcmVxdWVzdHMgZGlzY3Vzc2VzIG1ha2luZyBidWlsZGluZyBvciBjb2RpbmcgdGhpbmdzIGl0IGlzIHN0aWxsIENvbnZlcnNhdGlvbiBpZiBpdCBpcyBub3Qgd29yZGVkIGFzIGEgZGlyZWN0IHJlcXVlc3QuCkV4YW1wbGUgQ29udmVyc2F0aW9uIFJlcXVlc3RzOgpDb3VsZCBJIGJ1aWxkIGEgYm90IHRoYXQgZ2V0cyBiaWdnZXIgd2hlbiBjbGlja2VkPwpJcyBpdCBwb3NzaWJsZSB0byBjb2RlIGJvdHMgdGhhdCBtb3ZlPwpDYW4gbXkgc29uIG1ha2UgYSB5ZWxsb3cgYmFsbCBpbiBDYXN1YWxPUz8KCkRldGVybWluaW5nIEludGVudDogIElmIGNvbmRpdGlvbnMgZm9yIEJ1aWxkIFJlcXVlc3QgYXJlIHNwZWNpZmljYWxseSBtZXQgdGhlbiBpdCdzIGEgQnVpbGQgUmVxdWVzdC4gRXZlcnl0aGluZyBlbHNlIGlzIENvbnZlcnNhdGlvbi4KCkRldGVybWluZSB0aGUgaW50ZW50aW9uIG9mIHRoZSBzdGF0ZW1lbnQgYW5kIHJldHVybiB0cnVlIGlmIGl0J3MgYSBCdWlsZCBSZXF1ZXN0LgoKUlVMRVM6CjEuIFJldHVybiBvbmx5IHRoZSB3b3JkIHRydWUgaWYgeW91J3ZlIGRldGVybWluZWQgaXQncyBhIEJ1aWxkIFJlcXVlc3QuCjIuIFJldHVybiBvbmx5IGZhbHNlIGlmIHRoZSBzdGF0ZW1lbnQgaXMgYSBDb252ZXJzYXRpb24gUmVxdWVzdC4KMy4gQW5zd2VyaW5nIHdpdGggYW55dGhpbmcgb3RoZXIgdGhhbiB0cnVlIG9yIGZhbHNlIHdpbGwgYnJlYWsgdGhlIGV4cGVyaWVuY2UuCgpTVEFURU1FTlQ6CicAoqDFqAqHZBdhYk11bHRpcGxlQm90TWVudUFjdGlvbgIEAKKgxagK84sCDkAvL3BsYWNlaG9sZGVyJwCioMWoCodkG2FiTXVsdGlwbGVCb3RNZW51T25HZW5lcmF0ZQIEAKKgxagKgowCpAVAY29uc3QgYWxsVGFyZ2V0Qm90cyA9IGxpbmtzLnJlbWVtYmVyLmxpbmtzLmFiTXVsdGlwbGVCb3RGb2N1czsKY29uc3QgdGFyZ2V0QXJyYXkgPSBbXTsKCmZvciAobGV0IGkgPSAwOyBpIDwgYWxsVGFyZ2V0Qm90cy5sZW5ndGg7IGkrKykKewogICAgdGFyZ2V0QXJyYXkucHVzaChhbGxUYXJnZXRCb3RzW2ldLmlkKTsKfQoKdGFncy50YXJnZXRCb3RzID0gdGFyZ2V0QXJyYXk7CnRhZ3Mub25TdWJtaXQgPSBgQCBsaW5rcy5iYXNlU2tpbGwuYWJDb3JlTWVudUFjdGlvbih7bWVzc2FnZTogdGhhdC50ZXh0LCBtZW51OiAibXVsdGlwbGVCb3QiLCBib3RzOiB0YWdzLnRhcmdldEJvdHN9KTtgOwp0YWdzLmZvcm0gPSAiaW5wdXQiOwoKaWYgKCFhdXRoQm90KQp7CiAgICB0YWdzLmxhYmVsID0gImFzayAiICsgbGlua3MucGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eSArICIgKGxpbWl0ZWQpIjsKfQplbHNlIGlmIChhdXRoQm90LnRhZ3Muc3Vic2NyaXB0aW9uVGllciA9PSAiRnJlZVBsYXkiKQp7CiAgICB0YWdzLmxhYmVsID0gImFzayAiICsgbGlua3MucGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eSArICIgKGxpbWl0ZWQpIjsKfQplbHNlCnsKICAgIHRhZ3MubGFiZWwgPSAiYXNrICIgKyBsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5Owp9JwCioMWoCodkEnByb21wdF9tdWx0aXBsZUJvdAIEAKKgxagKp5ECxhZERUxJVkVSQUJMRTogUmV0dXJuIG9ubHkgSmF2YVNjcmlwdCBjb2RlLiBEbyBub3QgaW5jbHVkZSBxdW90ZXMsIE1hcmtkb3duIGZvcm1hdHRpbmcsIG9yIGFueSBleHBsYW5hdG9yeSB0ZXh0LiBUaGUgY29kZSBzaG91bGQgYmUgdmFsaWQgYW5kIGV4ZWN1dGFibGUgaW5zaWRlIHRoZSBgb25DcmVhdGVgIGZpZWxkIG9mIGEgYm90IGluIENhc3VhbE9TLgoKT0JKRUNUSVZFOiBCYXNlZCBvbiB0aGUgSU5QVVQgYW5kIHRoZSBwcm92aWRlZCBUQVJHRVRfQk9UX0lEUywgZ2VuZXJhdGUgSmF2YVNjcmlwdCB0aGF0IHBlcmZvcm1zIHRoZSByZXF1ZXN0ZWQgYmVoYXZpb3IgaW4gQ2FzdWFsT1MuIFRoZSBjb2RlIG11c3Q6CgoxLiBJbXBsZW1lbnQgdGhlIHJlcXVlc3RlZCBhY3Rpb24uCjIuIEFsd2F5cyBpbmNsdWRlIGBhYi5sb2coImEgZGVzY3JpcHRpb24gb2YgdGhlIGV4ZWN1dGlvbiIpYCB0byBkZXNjcmliZSB3aGF0IHRoZSBjb2RlIGRvZXMuCjMuIEFsd2F5cyBpbmNsdWRlIGBkZXN0cm95KHRoaXNCb3QpO2AgYXQgdGhlIGVuZCB0byByZW1vdmUgdGhlIGJvdCBhZnRlciBleGVjdXRpb24uCjQuIFVzZSB0aGUgYXJyYXkgb2YgYFRBUkdFVF9CT1RfSURTYCBhcyBjb250ZXh0IGZvciBsb2NhdGlvbiBvciBiZWhhdmlvciB3aGVuIGFwcHJvcHJpYXRlLiBGb3IgZXhhbXBsZToKICAgLSBXaGVuIGNyZWF0aW5nIGJvdHMsIHVzZSBlYWNoIHRhcmdldCdzIGBob21lWGAgYW5kIGBob21lWWAgZm9yIHBsYWNlbWVudC4KICAgLSBXaGVuIG1vZGlmeWluZyBib3RzLCBpdGVyYXRlIG92ZXIgZWFjaCB0YXJnZXQgdXNpbmcgYGdldEJvdCgiaWQiLCA8aWQ+KWAuCjUuIFVzZSBzdGFuZGFyZCBDYXN1YWxPUyBzY3JpcHRpbmcgbWV0aG9kcyBzdWNoIGFzIGBjcmVhdGUoLi4uKWAsIGBzZXRUYWcoLi4uKWAsIGBnZXRCb3QoLi4uKWAsIGBnZXRCb3RzKC4uLilgLCBldGMuCgpCT1QgQ09OVEVYVDoKLSBZb3Ugd2lsbCByZWNlaXZlIGBUQVJHRVRfQk9UX0lEUyA9IFsiYm90XzEiLCAiYm90XzIiLCAuLi5dYC4KLSBVc2UgYGdldEJvdCgiaWQiLCA8aWQ+KWAgdG8gYWNjZXNzIGluZGl2aWR1YWwgYm90cyBhbmQgdGhlaXIgdGFncy4KLSBQZXJmb3JtIG1vZGlmaWNhdGlvbnMgb3IgbG9naWMgZm9yIGVhY2ggYm90IGluIHRoZSBhcnJheS4KClJPTEU6IFlvdSBhcmUgUE0gQm90LCBhIGhlbHBmdWwgYXNzaXN0YW50IHRoYXQgd3JpdGVzIEphdmFTY3JpcHQgY29kZSB0byBjb250cm9sIGJvdHMgaW4gW0Nhc3VhbE9TXShodHRwczovL2dpdGh1Yi5jb20vYWxhbi1haS9jYXN1YWxvcyksIGEgd2ViLWJhc2VkIElERSBmb3IgYm90IHNjcmlwdGluZy4KCkVYQU1QTEVTOgoKRXhhbXBsZSAxOiAgCklucHV0OiBXaGF0IGNvbG9yIGlzIHRoZSBza3k/ICAKVEFSR0VUX0JPVF9JRFM6IFsic2t5XzEyMyJdICAKQW5zd2VyOiAgCmFiLmxvZygiVGhlIHNreSBpcyBibHVlIik7ICAKZGVzdHJveSh0aGlzQm90KTsKCkV4YW1wbGUgMjogIApJbnB1dDogTWFrZSBhIHJlZCBib3QgbmV4dCB0byBlYWNoIG9mIHRoZXNlIGJvdHMuICAKVEFSR0VUX0JPVF9JRFM6IFsiYSIsICJiIiwgImMiXSAgCkFuc3dlcjogIAphYi5sb2coIk1hZGUgcmVkIGJvdHMgbmV4dCB0byBlYWNoIHRhcmdldCIpOyAgCmZvciAobGV0IGlkIG9mIFsiYSIsICJiIiwgImMiXSkgeyAgCiAgbGV0IGJvdCA9IGdldEJvdCgiaWQiLCBpZCk7ICAKICBjcmVhdGUoeyAgCiAgICBob21lOiB0cnVlLCAgCiAgICBob21lWDogYm90LnRhZ3MuaG9tZVggKyAxLCAgCiAgICBob21lWTogYm90LnRhZ3MuaG9tZVksICAKICAgIGNvbG9yOiAicmVkIiwgIAogICAgY3JlYXRvcjogbnVsbCAgCiAgfSk7ICAKfSAgCmRlc3Ryb3kodGhpc0JvdCk7CgpFeGFtcGxlIDM6ICAKSW5wdXQ6IFRvYXN0IGhlbGxvIHdoZW4gYW55IG9mIHRoZXNlIGJvdHMgYXJlIGNsaWNrZWQuICAKVEFSR0VUX0JPVF9JRFM6IFsidGFyZ2V0MSIsICJ0YXJnZXQyIl0gIApBbnN3ZXI6ICAKYWIubG9nKCJTZXQgdXAgdG9hc3Qtb24tY2xpY2sgYmVoYXZpb3IiKTsgIApmb3IgKGxldCBpZCBvZiBbInRhcmdldDEiLCAidGFyZ2V0MiJdKSB7ICAKICBsZXQgYm90ID0gZ2V0Qm90KCJpZCIsIGlkKTsgIAogIHNldFRhZyhib3QsICJvbkNsaWNrIiwgIkAgb3MudG9hc3QoJ2hlbGxvJyk7Iik7ICAKfSAgCmRlc3Ryb3kodGhpc0JvdCk7CgpFeGFtcGxlIDQ6ICAKSW5wdXQ6IE1ha2UgYWxsIHJlZCBib3RzIGJsdWUuICAKVEFSR0VUX0JPVF9JRFM6IFsic29tZV9pZCIsICJkb2VzbnRfbWF0dGVyIl0gIApBbnN3ZXI6ICAKYWIubG9nKCJNYWRlIHJlZCBib3RzIGJsdWUiKTsgIApzZXRUYWcoZ2V0Qm90cygiY29sb3IiLCAicmVkIiksICJjb2xvciIsICJibHVlIik7ICAKZGVzdHJveSh0aGlzQm90KTsKCkV4YW1wbGUgNTogIApJbnB1dDogTWFrZSBhIGJsdWUgYm90IGFib3ZlIGVhY2ggb2YgdGhlIGdpdmVuIGJvdHMgdGhhdCB0b2FzdHMgaGVsbG8gd2hlbiBob3ZlcmVkLiAgClRBUkdFVF9CT1RfSURTOiBbImIxIiwgImIyIiwgImIzIl0gIApBbnN3ZXI6ICAKYWIubG9nKCJNYWRlIGJsdWUgYm90cyBhYm92ZSBlYWNoIHRhcmdldCB0aGF0IHRvYXN0IG9uIHBvaW50ZXIgZW50ZXIiKTsgIApmb3IgKGxldCBpZCBvZiBbImIxIiwgImIyIiwgImIzIl0pIHsgIAogIGxldCBib3QgPSBnZXRCb3QoImlkIiwgaWQpOyAgCiAgY3JlYXRlKHsgIAogICAgaG9tZTogdHJ1ZSwgIAogICAgaG9tZVg6IGJvdC50YWdzLmhvbWVYLCAgCiAgICBob21lWTogYm90LnRhZ3MuaG9tZVkgKyAxLCAgCiAgICBjb2xvcjogImJsdWUiLCAgCiAgICBvblBvaW50ZXJFbnRlcjogIkAgb3MudG9hc3QoJ2hlbGxvJyk7IiwgIAogICAgY3JlYXRvcjogbnVsbCAgCiAgfSk7ICAKfSAgCmRlc3Ryb3kodGhpc0JvdCk7CgpJTlBVVDogIAonAKKgxagKh2QaYWJNdWx0aXBsZUJvdE1lbnVTb3J0T3JkZXICBACioMWoCu6nAgMxMDEnAKKgxagKh2QJYWJWZXJzaW9uAgQAoqDFqArypwIEMTAuNScAoqDFqAqHZA5jaGFubmVsX2NvbmZpZwIEAKKgxagK96cCrQ9AY29uc3QgY29uZmlndXJhdGlvbkRhdGEgPSBhd2FpdCBvcy5nZXREYXRhKHRoYXQuZGF0YS5zdHVkaW9JRCwgdGhhdC5kYXRhLnBhdHRlcm5JRCk7CgpsZXQgbmV3RGVwbG95bWVudCA9IGZhbHNlOwoKaWYgKGxpbmtzLnJlbWVtYmVyLnRhZ3MuY2hhbm5lbENvbmZpZ3VyZWQpCnsKICAgIHJldHVybjsKfQoKbGlua3MucmVtZW1iZXIudGFncy5jaGFubmVsQ29uZmlndXJlZCA9IHRydWU7CgppZiAoY29uZmlndXJhdGlvbkRhdGEuZGF0YS5iaW9zKQp7CiAgICBjb25zdCB0YXJnZXRCaW9zID0gY29uZmlndXJhdGlvbkRhdGEuZGF0YS5iaW9zOwoKICAgIHN3aXRjaCAodGFyZ2V0QmlvcykgCiAgICB7CiAgICAgICAgY2FzZSAibG9jYWwiOgogICAgICAgICAgICBpZiAoY29uZmlnQm90LnRhZ3Muc3RhdGljSW5zdCA9PSBudWxsKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuZXdEZXBsb3ltZW50ID0gdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAic3R1ZGlvIjoKICAgICAgICAgICAgaWYgKGNvbmZpZ0JvdC50YWdzLm93bmVyID09IG51bGwgfHwgY29uZmlnQm90LnRhZ3Mub3duZXIgPT0gInB1YmxpYyIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5ld0RlcGxveW1lbnQgPSB0cnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJzaGFyZWQiOgogICAgICAgICAgICBpZiAoY29uZmlnQm90LnRhZ3Mub3duZXIgIT0gInB1YmxpYyIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5ld0RlcGxveW1lbnQgPSB0cnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBicmVhazsKICAgIH0KfQoKaWYgKGNvbmZpZ3VyYXRpb25EYXRhLmRhdGEuZWdnKQp7CiAgICBjb25zdCB0YXJnZXRQYXR0ZXJuID0gY29uZmlndXJhdGlvbkRhdGEuZGF0YS5lZ2cucGF0dGVybjsKICAgIGNvbnN0IHRhcmdldFN0dWRpbyA9IGNvbmZpZ3VyYXRpb25EYXRhLmRhdGEuZWdnLnN0dWRpbzsKCiAgICBzaG91dCgiaGF0Y2giLCB7YWJJRDogdGFyZ2V0UGF0dGVybiwgcmVjb3JkS2V5OiB0YXJnZXRTdHVkaW8sIGF1dG9IYXRjaDogdHJ1ZX0pOwp9CgppZiAoY29uZmlndXJhdGlvbkRhdGEuZGF0YS5ncmlkQ29sb3IpCnsKICAgIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJCYXNlR3JpZFBvcnRhbENvbG9yID0gY29uZmlndXJhdGlvbkRhdGEuZGF0YS5ncmlkQ29sb3I7CgogICAgZ3JpZFBvcnRhbEJvdC50YWdzLnBvcnRhbENvbG9yID0gY29uZmlndXJhdGlvbkRhdGEuZGF0YS5ncmlkQ29sb3I7Cn0KCmlmIChjb25maWd1cmF0aW9uRGF0YS5kYXRhLmluc3QgJiYgY29uZmlnQm90LnRhZ3MuaW5zdCAhPSBjb25maWd1cmF0aW9uRGF0YS5kYXRhLmluc3QgJiYgY29uZmlndXJhdGlvbkRhdGEuZGF0YS5pbnN0ICE9IG51bGwpCnsKICAgIG5ld0RlcGxveW1lbnQgPSB0cnVlOwp9CgppZiAobmV3RGVwbG95bWVudCkKewogICAgY29uc3Qgc2l0ZU9yaWdpbiA9IG5ldyBVUkwoY29uZmlnQm90LnRhZ3MudXJsKS5vcmlnaW47CiAgICBjb25zdCB0YXJnZXRJbnN0ID0gY29uZmlndXJhdGlvbkRhdGEuZGF0YS5pbnN0ID8gIiZpbnN0PSIgKyBjb25maWd1cmF0aW9uRGF0YS5kYXRhLmluc3QgOiAiIjsKICAgIGNvbnN0IHRhcmdldEJpb3MgPSBjb25maWd1cmF0aW9uRGF0YS5kYXRhLmJpb3MgPyAiJmJpb3M9IiArIGNvbmZpZ3VyYXRpb25EYXRhLmRhdGEuYmlvcyA6ICIiOwogICAgY29uc3QgdGFyZ2V0UGF0dGVybiA9IGNvbmZpZ0JvdC50YWdzLnBhdHRlcm4gPyAiJnBhdHRlcm49IiArIGNvbmZpZ0JvdC50YWdzLnBhdHRlcm4gOiAiIjsKICAgIGNvbnN0IHRhcmdldFVSTCA9IHNpdGVPcmlnaW4gKyBgLz9hc2s9JHtjb25maWdCb3QudGFncy5hc2t9JHt0YXJnZXRQYXR0ZXJufSR7dGFyZ2V0SW5zdH0ke3RhcmdldEJpb3N9YDsKCiAgICBvcy5nb1RvVVJMKHRhcmdldFVSTCk7Cn0nAKKgxagKh2QNY2hhbm5lbExvYWRlcgIEAKKgxagKpbcCKPCflJdhOWI2YWEwZC1iMzU3LTRkZTYtOWJlZi04NTM0OGFiMWQwZTAnAKKgxagKh2QJcHJvdG90eXBlAgQAoqDFqArMtwIuQHRoaXNCb3QuYWJDb3JlTWVudUFjdGlvbigiTWFrZSBtZTogIiArIHRoYXQpOycAoqDFqAqHZAtwZXJzb25hbGl0eQIEAKKgxagK+7cCKPCflJdiNzZkZmJjNC04NTRiLTRmNmQtYTkxZi1hOTQ4Njk0Nzc0ZGInAKKgxagKh2QFdXRpbHMCBACioMWoCqK4Aijwn5SXOTNkOTY1ZTAtZDIwZS00YjQ1LThjYTAtNjQ5MjczYjcxMzhjJwCioMWoCodkBmNyZWF0ZQIEAKKgxagKybgCKPCflJczNGMzYzIxMC01YmYxLTQ5Y2YtYjE1MS1lZTJkMDdmMGU2NzMnAQRib3RzJGY5ZmQ3ZTJlLTdjY2UtNDNmYi1iMjIzLWQzMmNiNDJiZWJlOAEnAKKgxagK8LgCBnN5c3RlbQIEAKKgxagK8bgCE2FiLmFjdGlvbi5jb2xvcl9ib3QnAKKgxagK8LgCBGZvcm0CBACioMWoCoW5Agdub3RoaW5nJwCioMWoCvC4AghhYkFjdGlvbgIEAKKgxagKjbkCBHRydWUnAKKgxagK8LgCD2FiQm90TWVudUFjdGlvbgIEAKKgxagKkrkCjgFAY29uc3QgdGFyZ2V0Qm90ID0gbGlua3MucmVtZW1iZXIubGlua3MuYWJCb3RGb2N1czsKCm9zLnNob3dJbnB1dEZvclRhZyh0YXJnZXRCb3QsICJjb2xvciIsIHsKICAgIHR5cGU6ICdjb2xvcicsCiAgICB0aXRsZTogJ3BpY2sgYSBjb2xvcicKfSk7JwCioMWoCvC4Ag5hYkJvdE1lbnVMYWJlbAIEAKKgxagKoboCBWNvbG9yJwCioMWoCvC4Ag1hYkJvdE1lbnVJY29uAgQAoqDFqAqnugIHcGFsZXR0ZScAoqDFqArwuAIIcmVtZW1iZXICBACioMWoCq+6Aijwn5SXZTUzODBhNmItOGI0ZC00YThiLThiMDQtNThlMWViMDNlNWU3JwCioMWoCvC4AhJhYkJvdE1lbnVTb3J0T3JkZXICBACioMWoCta6AgEyJwCioMWoCvC4AghhYklnbm9yZQIEAKKgxagK2LoCBHRydWUnAKKgxagK8LgCF2FiTXVsdGlwbGVCb3RNZW51QWN0aW9uAgQAoqDFqArdugLiA0Bjb25zdCBhbGxUYXJnZXRCb3RzID0gbGlua3MucmVtZW1iZXIubGlua3MuYWJNdWx0aXBsZUJvdEZvY3VzOwpjb25zdCBidWlsZGVyID0gYWIubGlua3MubWFuaWZlc3RhdGlvbi5saW5rcy5hYkJvdCA/IGFiLmxpbmtzLm1hbmlmZXN0YXRpb24ubGlua3MuYWJCb3QuaWQgOiBudWxsOwpjb25zdCByZWxldmFudFRhcmdldEJvdHMgPSBhbGxUYXJnZXRCb3RzLmZpbHRlcigodGFyZ2V0KSA9PiB0YXJnZXQuaWQgIT0gYnVpbGRlcik7CmNvbnN0IHNlbGVjdGVkQ29sb3IgPSBhd2FpdCBvcy5zaG93SW5wdXQobnVsbCwgewogICAgdHlwZTogJ2NvbG9yJywKICAgIHRpdGxlOiAncGljayBhIGNvbG9yJwp9KTsKCnNldFRhZyhyZWxldmFudFRhcmdldEJvdHMsICJjb2xvciIsIHNlbGVjdGVkQ29sb3IpOwoKYWIubG9nKGxpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCdWlsZGVySWRlbnRpdHkgKyAiOiBvcGVuZWQgbXVsdGlwbGUgc2VsZWN0IHNoZWV0Iik7JwCioMWoCvC4AhVhYk11bHRpcGxlQm90TWVudUljb24CBACioMWoCsC+AgdwYWxldHRlJwCioMWoCvC4AhZhYk11bHRpcGxlQm90TWVudUxhYmVsAgQAoqDFqArIvgIFY29sb3InAKKgxagK8LgCGmFiTXVsdGlwbGVCb3RNZW51U29ydE9yZGVyAgQAoqDFqArOvgIBMScAoqDFqArwuAIJYWJWZXJzaW9uAgQAoqDFqArQvgIEMTAuNScAoqDFqArwuAILcGVyc29uYWxpdHkCBACioMWoCtW+Aijwn5SXYjc2ZGZiYzQtODU0Yi00ZjZkLWE5MWYtYTk0ODY5NDc3NGRiAA=="}]}