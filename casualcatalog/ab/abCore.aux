{"version":2,"updates":[{"id":0,"timestamp":1757101392591,"update":"AVDKp7XLDQAnAQRib3RzJDY2NTdiODY1LWU5ODMtNDQwMS05ZmM5LWY1NDE4ZDE4YTdmNwEnAMqntcsNABJhYkNvcmVNYWpvclZlcnNpb24CBADKp7XLDQECMTAnAMqntcsNABJhYkNvcmVNaW5vclZlcnNpb24CBADKp7XLDQQBOScAyqe1yw0ABnN5c3RlbQIEAMqntcsNBg1hYi5jb3JlLmxlYXJuJwDKp7XLDQAEYWJJRAIEAMqntcsNFAVsZWFybicAyqe1yw0ABGZvcm0CBADKp7XLDRoHbm90aGluZycAyqe1yw0ABmFiQm9vdAIEAMqntcsNIvcoQC8qKgoqIE1JVCBMaWNlbnNlCioKKiBDb3B5cmlnaHQgKGMpIDIwMTkgQ2FzdWFsIFNpbXVsYXRpb24sIEluYy4KKgoqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbAoqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCiogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCiogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKKgoqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbAoqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCioKKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgoqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAoqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQoqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLAoqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFCiogU09GVFdBUkUuCiogQGxpY2Vuc2UgTUlUCiovCgovL2luc3QgbW9kZSAocGxheWVyIG9yIGJ1aWxkZXIpCmxldCBpbnN0TW9kZUNoZWNrID0gYXdhaXQgb3MudmVyc2lvbigpLnBsYXllck1vZGU7Ci8vY2hlY2sgc2VsZiBmb3IgaW5pdGlhbCBib290IGRhdGEKbGV0IGluaXRpYWxCb290ID0gbGlua3MucmVtZW1iZXIudGFncy5pbml0aWFsQm9vdCA/IHRydWUgOiBmYWxzZTsKLy9jaGVjayB1cmwgZm9yIHBvc3NpYmxlIGFiJ3MgdG8gbG9hZApsZXQgYm9vdEZsYWcgPSBjb25maWdCb3QudGFncy5wYXR0ZXJuID8gY29uZmlnQm90LnRhZ3MucGF0dGVybiA6IGNvbmZpZ0JvdC50YWdzLmFiOwovL2NoZWNrIGZvciBhc2sKbGV0IGFzayA9IGNvbmZpZ0JvdC50YWdzLmFzazsKLy9sb2dpbgpsZXQgc3RhdHVzID0gYXdhaXQgdGhpc0JvdC5sb2FkaW5nU3RhdHVzKCk7Ci8vc2VlZCAobm90IGFjdGl2ZWx5IHVzZWQgaGVyZSkKbGV0IHNlZWQgPSBjb25maWdCb3QudGFncy5zZWVkOwovL3Byb21wdApsZXQgcHJvbXB0ID0gY29uZmlnQm90LnRhZ3MucHJvbXB0OwovL2NoYW5uZWwKbGV0IGNoYW5uZWwgPSBjb25maWdCb3QudGFncy5jaGFubmVsOwovL3JlcXVlc3QgYXV0aCBib3QKYXdhaXQgb3MucmVxdWVzdEF1dGhCb3RJbkJhY2tncm91bmQoKTsKCi8vcmVkaXJlY3QgaWYgaW4gVVJMCmlmIChjb25maWdCb3QudGFncy5qb2luQ29kZSkgewogICAgdGhpc0JvdC5hYkpvaW5Ib3N0KHsgdGV4dDogY29uZmlnQm90LnRhZ3Muam9pbkNvZGUgfSk7Cn0KCi8vc3RhdHVzIGNsZWFuIHVwCmRlc3Ryb3koc3RhdHVzKTsKCi8vY2hlY2sgdGltZSBpZiBuZWVkZWQKaWYgKGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJDb25kaXRpb24pIHsKICAgIGF3YWl0IGxpbmtzLnJlbWVtYmVyLmFiQ29uZGl0aW9uKCk7Cn0KCi8vaWYgbm8gc3R1ZGlvLCBzZXQgc3R1ZGlvCmlmIChhdXRoQm90ICYmICFjb25maWdCb3QudGFncy5zdHVkaW8pIHsKICAgIGNvbmZpZ0JvdC50YWdzLnN0dWRpbyA9IGF1dGhCb3QuaWQ7Cn0KCmlmIChhdXRoQm90KSB7CiAgICB0aGlzQm90LmFiTG9hZFN0dWRpb3MoKTsKfQoKaWYgKCFsaW5rcy5wZXJzb25hbGl0eSkgeyAKICAgIGF3YWl0IHRoaXNCb3QuYWJBZGFwdCgiYWJQZXJzb25hbGl0eSIpOwp9CgovL2luaXRpYWxpemUgcmVtZW1iZXIgZ2xvYmFscwpnbG9iYWxUaGlzLmFiSW5zdE1lbW9yeSA9IGxpbmtzLnJlbWVtYmVyOwpnbG9iYWxUaGlzLmFiUmVtZW1iZXIgPSBsaW5rcy5yZW1lbWJlcjsKZ2xvYmFsVGhpcy5hYlBlcnNvbmFsaXR5ID0gbGlua3MucGVyc29uYWxpdHk7CgppZiAobGlua3MucmVtZW1iZXIudGFncy5hYkJhc2VHcmlkUG9ydGFsQ29sb3IpIHsKICAgIGdyaWRQb3J0YWxCb3QudGFncy5wb3J0YWxDb2xvciA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJCYXNlR3JpZFBvcnRhbENvbG9yOwp9CgovL1RoaXMgY2hlY2tzIGZvciB0aGUgYXBwcm9wcmlhdGUgYXJyYXkgb2Ygc2tpbGxzIGFuZCBpbml0aWFsaXplcyB0aGVtCmF3YWl0IHRoaXNCb3QuYWJTa2lsbEluaXRpYWxpemF0aW9uKGluc3RNb2RlQ2hlY2spOwoKLy9pbml0aWFsaXppbmcgb2YgZ2xvYmFsIHZhcmlhYmxlcwpnbG9iYWxUaGlzLmJ1aWxkZXJWZXJzaW9uID0gaW5zdE1vZGVDaGVjayA9PSAiYnVpbGRlciIgPyB0cnVlIDogZmFsc2U7Cmdsb2JhbFRoaXMuYWJMb25nVGVybU1lbW9yeVNlYXJjaCA9IGxpbmtzLnNlYXJjaDsKZ2xvYmFsVGhpcy5hYlNlYXJjaCA9IGxpbmtzLnNlYXJjaDsKZ2xvYmFsVGhpcy5hYlB1Ymxpc2ggPSBsaW5rcy5zdG9yZTsKZ2xvYmFsVGhpcy5hYlN0b3JlID0gbGlua3Muc3RvcmU7Cmdsb2JhbFRoaXMuYWIgPSB0aGlzQm90OwoKLy9wb3B1bGF0ZSBib290ZmxhZyBhYgppZiAoaW5pdGlhbEJvb3QgJiYgYm9vdEZsYWcpIHsKICAgIGF3YWl0IGxpbmtzLnNlYXJjaC5vbkxvb2t1cEFCRWdncyh7IGFiSUQ6IGJvb3RGbGFnLCBpbml0aWFsQm9vdDogdHJ1ZSwgYXV0b0hhdGNoOiB0cnVlLCBzb3VyY2VFdmVudDogJ2Jvb3QnIH0pOwp9CgovL2xvb2t1cCBhc2tJRCBpZiBhdmFpbGFibGUKaWYgKGluaXRpYWxCb290ICYmIGFzaykgewogICAgaWYgKGFzayA9PSAiZWdnQ2FydG9uIiB8fCBhc2sgPT0gImNhc3VhbFR1dG9yaWFsIikgewogICAgICAgIGF3YWl0IHRoaXNCb3QuYWJBZGFwdChhc2spOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgYXdhaXQgdGhpc0JvdC5hYkFkYXB0KCJhYkFjdGlvbiIpOwoKICAgICAgICBsaW5rcy5hc2suYWJDb3JlTWVudUFjdGlvbihhc2spOwogICAgfQp9CgovL2NoZWNrIGZvciBjaGFubmVsIGlmIGNoYW5uZWxzIGFsbG93ZWQKaWYgKGluaXRpYWxCb290ICYmIGNoYW5uZWwgJiYgbGlua3MucmVtZW1iZXIudGFncy5hbGxvd0NoYW5uZWxzKSB7CiAgICBhd2FpdCB0aGlzQm90LmFiQWRhcHQoImFiQWN0aW9uIik7CgogICAgbGlua3MuYXNrLmFiQ29yZU1lbnVBY3Rpb24oIkAiICsgY2hhbm5lbCk7Cn0KCi8vbG9hZCBwZXJzb25hbCBjaGFubmVsIGJ5IGRlZmF1bHQgaWYgY2hhbm5lbHMgYWxsb3dlZCBhbmQgbm8gb3RoZXIgZmxhZ3MgcHJlc2VudAppZiAoaW5pdGlhbEJvb3QgJiYgIWNoYW5uZWwgJiYgIWFzayAmJiAhYm9vdEZsYWcgJiYgbGlua3MucmVtZW1iZXIudGFncy5hbGxvd0NoYW5uZWxzKSB7CiAgICBhd2FpdCB0aGlzQm90LmFiQWRhcHQoImFiQ2hhbm5lbCIpOwoKICAgIGF3YWl0IGxpbmtzLmNoYW5uZWwubG9hZFBlcnNvbmFsQ2hhbm5lbCgpOwp9CgovL2NoZWNrIGZvciBhcnRpZmFjdCBGSVgKaWYgKGNvbmZpZ0JvdC50YWdzLmFydGlmYWN0ICYmIGluaXRpYWxCb290ICYmICFhc2sgJiYgIWJvb3RGbGFnKSB7CiAgICBjb25zdCBhcnRpZmFjdCA9IGNvbmZpZ0JvdC50YWdzLmFydGlmYWN0OwogICAgY29uc3QgYXJ0SW5kZXggPSBhcnRpZmFjdC5pbmRleE9mKCJfYXJ0XyIpOwogICAgY29uc3Qgc3R1ZGlvID0gYXJ0aWZhY3Quc3Vic3RyaW5nKDAsIGFydEluZGV4KTsKICAgIGNvbnN0IHJlY29yZEFkZHJlc3MgPSBhcnRpZmFjdC5zdWJzdHJpbmcoYXJ0SW5kZXgpOwogICAgY29uc3QgcmVjb3JkRGF0YSA9IGF3YWl0IG9zLmdldERhdGEoc3R1ZGlvLCByZWNvcmRBZGRyZXNzKTsKICAgIGNvbnN0IGFza0lEID0gcmVjb3JkRGF0YS5kYXRhLnBhdHRlcm47CgogICAgYXdhaXQgdGhpc0JvdC5hYkFkYXB0KCJhYkFjdGlvbiIpOwoKICAgIGxpbmtzLmFzay5hYkNvcmVNZW51QWN0aW9uKGFza0lEKTsKfQoKLy8gQ2hlY2sgaWYgd2UgY2FuIHdha2UgdXAgYWIsIGFuZCB0aGVuIGRvIHNvLgppZiAoIWNvbmZpZ0JvdC50YWdzLmFiU2xlZXApIHsKICAgIGlmICgoaW5pdGlhbEJvb3QgJiYgIWJvb3RGbGFnICYmICFhc2spIHx8IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJBbHdheXNTdGFydEF3YWtlIHx8IGNvbmZpZ0JvdC50YWdzLmFiU3RheUF3YWtlKSB7CiAgICAgICAgbGlua3MubWFuaWZlc3RhdGlvbi5hYlNldEF3YWtlKHsgYXdha2U6IHRydWUsIGluaXRpYWw6IGluaXRpYWxCb290IH0pOwogICAgfQp9CgovL3NldCBpbml0aWFsIGJvb3QgZGF0YQppZiAoaW5pdGlhbEJvb3QpIHsKICAgIHNldFRhZ01hc2sobGlua3MucmVtZW1iZXIsICdpbml0aWFsQm9vdCcsIGZhbHNlLCAnc2hhcmVkJyk7CgogICAgaWYgKGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJJbml0aWFsaXphdGlvbkNvbmZpZ3VyYXRpb24pIHsKICAgICAgICBsaW5rcy5yZW1lbWJlci5hYkluaXRpYWxpemF0aW9uQ29uZmlndXJhdGlvbigpOwogICAgfQp9CgovL2NsZWFuIHVwIFVSTCB3aXRoIHRhZ1BvcnRhbAppZiAoY29uZmlnQm90LnRhZ3MudGFnUG9ydGFsICYmICFjb25maWdCb3QudGFncy50YWdQb3J0YWxBbmNob3JQb2ludCAmJiBidWlsZGVyVmVyc2lvbikgewogICAgY29uZmlnQm90LnRhZ3MudGFnUG9ydGFsID0gbnVsbDsKICAgIGNvbmZpZ0JvdC50YWdzLnRhZ1BvcnRhbFNwYWNlID0gbnVsbDsKfQoKLy9wYXVzZSBmb3IgYWIgbG9hZGluZwphd2FpdCBvcy5zbGVlcCg1MDApOwoKLy9pbml0aWFsaXplIHRpbWUgYm90CnRoaXNCb3QuYWJUaW1lcigpOwoKbGlua3MucGVyc29uYWxpdHkudXBkYXRlUGVyc29uYWxpdHkoKTsKCi8vaW5pdGlhbGl6YXRpb24gc2hvdXQKc3VwZXJTaG91dCgib25BQkluaXRpYWxpemVkIiwgdGFncy5hYkluc3QpOygAyqe1yw0ABmFiQ29yZQF4JwDKp7XLDQAHYWJBZGFwdAIEAMqntcsNmynIDkBsZXQgc2tpbGxOYW1lOwpsZXQgc2tpbGxEYXRhOwoKaWYgKHR5cGVvZiB0aGF0ID09PSAnc3RyaW5nJykgewogICAgc2tpbGxOYW1lID0gdGhhdDsKICAgIHNraWxsRGF0YSA9IG51bGw7Cn0gZWxzZSBpZiAodHlwZW9mIHRoYXQgPT09ICdvYmplY3QnKSB7CiAgICBpZiAodGhhdC5zeXN0ZW1JRCkgewogICAgICAgIHNraWxsTmFtZSA9IHRoYXQuc3lzdGVtSUQ7CiAgICB9IGVsc2UgaWYgKHRoYXQuc2tpbGxOYW1lKSB7CiAgICAgICAgc2tpbGxOYW1lID0gdGhhdC5za2lsbE5hbWU7CiAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUuZXJyb3IoYFske3RhZ3Muc3lzdGVtfS4ke3RhZ05hbWV9XSBza2lsbE5hbWUgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXIuYCk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHNraWxsRGF0YSA9IHRoYXQuZGF0YSA/PyBudWxsOwp9Cgp0cnkgewogICAgY29uc3QgdXJsID0gdGhpc0JvdC5hYkJ1aWxkQ2FzdWFsQ2F0YWxvZ1VSTChgL2FiLyR7c2tpbGxOYW1lfS5hdXhgKTsKICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgd2ViLmhvb2soeyBtZXRob2Q6ICJHRVQiLCB1cmwgfSk7CgogICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7CiAgICAgICAgY29uc29sZS5sb2coYFske3RhZ3Muc3lzdGVtfS4ke3RhZ05hbWV9XSBDb3VsZCBub3QgZG93bmxvYWQgJHtza2lsbE5hbWV9LiBSZXNwb25zZTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBsZXQgYm90SWRzOwoKICAgIGlmIChyZXNwb25zZS5kYXRhLnZlcnNpb24gPT09IDIpIHsKICAgICAgICAvLyBBVVggRm9ybWF0IFZlcnNpb24gMi4KICAgICAgICBjb25zdCB1cGRhdGVzID0gcmVzcG9uc2UuZGF0YS51cGRhdGVzOwogICAgICAgIGNvbnN0IHN0YXRlID0gYXdhaXQgb3MuZ2V0SW5zdFN0YXRlRnJvbVVwZGF0ZXModXBkYXRlcyk7CiAgICAgICAgYXdhaXQgb3MuYXBwbHlVcGRhdGVzVG9JbnN0KHVwZGF0ZXMpOwoKICAgICAgICBib3RJZHMgPSBPYmplY3Qua2V5cyhzdGF0ZSk7CiAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUuZXJyb3IoYFske3RhZ3Muc3lzdGVtfS4ke3RhZ05hbWV9XSBBVVggZm9ybWF0IHZlcnNpb24gJHtyZXNwb25zZS5kYXRhLnZlcnNpb259IGlzIG5vdCBzdXBwb3J0ZWQuYCk7CiAgICB9CgogICAgaWYgKGJvdElkcyAmJiBib3RJZHMubGVuZ3RoID4gMCkgewogICAgICAgIHdoaXNwZXIoYm90SWRzLCB0YWdOYW1lLCBjb25maWdCb3QudGFncy5pbnN0KTsKICAgICAgICB3aGlzcGVyKGJvdElkcywgIm9uU2tpbGxVcGRhdGUiLCB7IGRhdGE6IHNraWxsRGF0YSB9KTsKICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS5lcnJvcihgWyR7dGFncy5zeXN0ZW19LiR7dGFnTmFtZX1dIE5vIGJvdHMgYXBwZWFyIHRvIGhhdmUgYmVlbiBsb2FkZWQgd2l0aCAke3NraWxsTmFtZX0uYCk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGlmICghdGhpc0JvdC52YXJzLmxvYWRlZFNraWxscykgewogICAgICAgIHRoaXNCb3QudmFycy5sb2FkZWRTa2lsbHMgPSBuZXcgU2V0KCk7CiAgICB9CgogICAgaWYgKCF0aGlzQm90LnZhcnMubG9hZGVkU2tpbGxzLmhhcyhza2lsbE5hbWUpKSB7CiAgICAgICAgdGhpc0JvdC52YXJzLmxvYWRlZFNraWxscy5hZGQoc2tpbGxOYW1lKTsKICAgIH0KCiAgICByZXR1cm4gdHJ1ZTsKfSBjYXRjaCAoZSkgewogICAgY29uc29sZS5lcnJvcihlKTsKICAgIGNvbnNvbGUuZXJyb3IoYFske3RhZ3Muc3lzdGVtfS4ke3RhZ05hbWV9XSBGYWlsZWQgdG8gZG93bmxvYWQgJHtza2lsbE5hbWV9LiBTZWUgYWJvdmUgZXJyb3IuYCk7CiAgICByZXR1cm4gZmFsc2U7Cn0nAMqntcsNAAtkZXNjcmlwdGlvbgIEAMqntcsN5DdPVGhpcyBza2lsbCBpcyBkZXNpZ25lZCB0byBoYW5kbGUgYm90aCByZWNvbmZpZ3VyYXRpb24gb2YgYWIgYW5kIGluaXRpYWxpemF0aW9uLicAyqe1yw0ACm9uQm90QWRkZWQCBADKp7XLDbQ48QFAY29uc29sZS5sb2coYFske3RhZ3Muc3lzdGVtfS4ke3RhZ05hbWV9XSBhYkNvcmUgU1RBUlQgVVBgKTsKCnRoaXNCb3QuYWJJbnN0VXBkYXRlKCk7CgppZiAoIWxpbmtzLnJlbWVtYmVyKSB7CiAgICBjb25zb2xlLmVycm9yKGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gQ291bGQgbm90IGZpbmQgYWJDb25maWcgcmVtZW1iZXIgYm90LmApOwp9CgpzZXRUaW1lb3V0KCgpID0+IHRoaXNCb3QuYWJCb290KCksIDUwMCk7JwDKp7XLDQAIcmVtZW1iZXICBADKp7XLDaY6KPCflJdlNTM4MGE2Yi04YjRkLTRhOGItOGIwNC01OGUxZWIwM2U1ZTcnAMqntcsNAANsb2cCBADKp7XLDc06bEAvL3Bhc3MgdGhyb3VnaCBsb2cgZGF0YQppZiAobGlua3MuY29uc29sZSkgewogICAgbGlua3MuY29uc29sZS5sb2codGhhdCk7Cn0KZWxzZSB7CiAgICBjb25zb2xlLmxvZyh0aGF0KTsKfScAyqe1yw0ADW1hbmlmZXN0YXRpb24CBADKp7XLDbo7KPCflJdkY2E1ZDk4Ny1jNGQ4LTQ2ZTQtYjYwYy1kYWE3YjJmNGRkYWQnAMqntcsNAAxhYkNyZWF0ZUhvc3QCBADKp7XLDeE7lgpAY29uc3Qgc2l0ZU9yaWdpbiA9IG5ldyBVUkwoY29uZmlnQm90LnRhZ3MudXJsKS5vcmlnaW47CgovL3RoaXMgZnVuY3Rpb24gaGFuZGxlcyBjcmVhdGluZyBhIGZpbGUgZm9yIGpvaW4gY29kZXMKaWYgKGxpbmtzLnJlbWVtYmVyLnRhZ3MuaG9zdElEKSB7CiAgICBvcy50b2FzdCgidXJsIGNvcGllZCB0byBjbGlwYm9hcmQiKTsKCiAgICBvcy5zZXRDbGlwYm9hcmQoc2l0ZU9yaWdpbiArICIvP2pvaW5Db2RlPSIgKyBsaW5rcy5yZW1lbWJlci50YWdzLmhvc3RJRC5zdWJzdHJpbmcoMCwgMykgKyAiLSIgKyBsaW5rcy5yZW1lbWJlci50YWdzLmhvc3RJRC5zdWJzdHJpbmcoMykpOwoKICAgIHJldHVybjsKfQoKaWYgKCFhdXRoQm90KSB7CiAgICBhd2FpdCBvcy5yZXF1ZXN0QXV0aEJvdCgpOwp9CgppZiAoIWF1dGhCb3QpIHsKICAgIG9zLnRvYXN0KCJwbGVhc2UgbG9nIGluIHRvIGdlbmVyYXRlIGEgam9pbiBjb2RlIik7CiAgICByZXR1cm47Cn0KCmNvbnN0IG5ld0hvc3RJRCA9IHV1aWQoKS5yZXBsYWNlQWxsKCItIiwgIiIpLnN1YnN0cmluZygwLCA2KTsKY29uc3QgZGF0ZSA9IERhdGVUaW1lLm5vdygpLnRvTWlsbGlzKCk7CmNvbnN0IHJlY29yZEtleSA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJSZWNvcmRLZXk7CmNvbnN0IHJlY29yZERhdGEgPSBhd2FpdCBvcy5yZWNvcmREYXRhKHJlY29yZEtleSwgbmV3SG9zdElELCB7IHVybDogY29uZmlnQm90LnRhZ3MudXJsLCBkYXRlOiBkYXRlLCBtYXJrZXJzOiBbInB1YmxpY1JlYWQiXSB9KTsKCmlmIChyZWNvcmREYXRhLnN1Y2Nlc3MpIHsKICAgIHNldFRhZ01hc2sobGlua3MucmVtZW1iZXIsICdob3N0SUQnLCBuZXdIb3N0SUQuc3Vic3RyaW5nKDAsIDMpICsgIi0iICsgbmV3SG9zdElELnN1YnN0cmluZygzKSwgJ3NoYXJlZCcpOwoKICAgIGNvbnN0IGpvaW5VUkwgPSBzaXRlT3JpZ2luICsgIi8/am9pbkNvZGU9IiArIGxpbmtzLnJlbWVtYmVyLnRhZ3MuaG9zdElEOwoKICAgIG9zLnNldENsaXBib2FyZChqb2luVVJMKTsKCiAgICB0aGF0LnRhZ3MubGFiZWwgPSAiam9pbiBjb2RlOiAiICsgbmV3SG9zdElELnN1YnN0cmluZygwLCAzKSArICItIiArIG5ld0hvc3RJRC5zdWJzdHJpbmcoMyk7CgogICAgb3Muc2hvd1FSQ29kZShqb2luVVJMKTsKCiAgICBvcy50b2FzdCgiaG9zdCBnZW5lcmF0ZWQsIHVybCBjb3BpZWQgdG8gY2xpcGJvYXJkOiAiICsgbmV3SG9zdElEKTsKfQplbHNlIHsKICAgIG9zLnRvYXN0KCJzb21ldGhpbmcgd2VudCB3cm9uZywgcGxlYXNlIHRyeSBhZ2FpbiIpOwoKICAgIHNob3V0KCJhYk1lbnVSZWZyZXNoIik7Cn0nAMqntcsNAAphYkpvaW5Ib3N0AgQAyqe1yw34Re4GQC8vbG9naWMgZm9yIHVzaW5nIGEgam9pbiBjb2RlIChjaGVja3MgZm9yIGV4aXN0aW5nIGZpbGVzKQpzaG91dCgiYWJNZW51UmVmcmVzaCIpOwoKbGV0IGdldFJlY29yZDsKCmlmICh0aGF0LmRhdGEpIHsKICAgIGdldFJlY29yZCA9IHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogdGhhdC5kYXRhIH07Cn0KZWxzZSB7CiAgICBjb25zdCBqb2luQ29kZSA9IHRoYXQudGV4dC5yZXBsYWNlQWxsKCItIiwgIiIpOwogICAgY29uc3QgcmVjb3JkS2V5ID0gbGlua3MucmVtZW1iZXIudGFncy5hYlJlY29yZEtleTsKICAgIGNvbnNvbGUubG9nKCJKT0lOQ09ERSIsIGpvaW5Db2RlKQogICAgZ2V0UmVjb3JkID0gYXdhaXQgb3MuZ2V0RGF0YShyZWNvcmRLZXksIGpvaW5Db2RlKTsKfQoKaWYgKGdldFJlY29yZC5zdWNjZXNzKSB7CiAgICBjb25zdCBkYXRlID0gRGF0ZVRpbWUubm93KCk7CiAgICBsZXQgY3JlYXRlRGF0ZSA9IERhdGVUaW1lLmZyb21NaWxsaXMoZ2V0UmVjb3JkLmRhdGEuZGF0ZSk7CiAgICBsZXQgZGlmZmVyZW5jZSA9IGRhdGUuZGlmZihjcmVhdGVEYXRlLCAiZGF5cyIpLnRvT2JqZWN0KCk7CgogICAgZGlmZmVyZW5jZSA9IE1hdGguZmxvb3IoZGlmZmVyZW5jZS5kYXlzKTsKCiAgICBpZiAoZGlmZmVyZW5jZSA8IDgpIHsKICAgICAgICBvcy50b2FzdCgiam9pbmluZyBob3N0IG5vdyIpOwoKICAgICAgICBvcy5nb1RvVVJMKGdldFJlY29yZC5kYXRhLnVybCk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvcy50b2FzdCgiam9pbiBjb2RlIG91dCBvZiBkYXRlLCBwbGVhc2UgZ2VuZXJhdGUgYSBuZXcgam9pbiBjb2RlIik7CiAgICB9Cn0KZWxzZSB7CiAgICBvcy50b2FzdCgiY29kZS9hYiBpbnZhbGlkLCBwbGVhc2UgdHJ5IGFnYWluIik7Cn0nAMqntcsNAAZzZWFyY2gCBADKp7XLDedMKPCflJdkODM3MTQ0NC05MTU4LTQ0MzYtOGZjNy04NGNjOTFiN2Y1MjUnAMqntcsNAAhhYklnbm9yZQIEAMqntcsNjk0EdHJ1ZScAyqe1yw0ABG1lbnUCBADKp7XLDZNNKPCflJdiMzBjNmM1ZC1hNGY3LTQyNjYtYmEzOC0zOTNkYzk1ZTFlY2InAMqntcsNABVhYlNraWxsSW5pdGlhbGl6YXRpb24CBADKp7XLDbpNowJALy9GaW5kIHRoZSBhcHByb3ByaWF0ZSBhcnJheSBhbmQgcG9wdWxhdGUgc2tpbGxzCmxldCBza2lsbEFycmF5ID0gbGlua3MucmVtZW1iZXIudGFnc1t0aGF0ICsgIlNraWxsQXJyYXkiXTsKCmZvciAobGV0IGkgPSAwOyBpIDwgc2tpbGxBcnJheS5sZW5ndGg7IGkrKykgewogICAgYXdhaXQgdGhpc0JvdC5hYkFkYXB0KHNraWxsQXJyYXlbaV0pOwp9CgppZiAoY29uZmlnQm90LnRhZ3MuZW1iZWQgPT09ICdpb3MnKSB7CiAgICBhd2FpdCB0aGlzQm90LmFiQWRhcHQoJ2FiSU9TQnJpZGdlJyk7Cn0KCnJldHVybjsnAMqntcsNAAZiYW5uZXICBADKp7XLDd5PKPCflJdiNTUyZWFmOS1hOWQ2LTQxYzgtODUxNS1jYmQyYWJlYWFlNzMnAMqntcsNAAVpbnB1dAIEAMqntcsNhVAo8J+Ul2Y4NjAyODc4LWMyZWYtNDhiZC04NWEwLThkNjM1MWViNDEyMCcAyqe1yw0ADWxvYWRpbmdTdGF0dXMCBADKp7XLDaxQxgdAY29uZmlnQm90Lm1hc2tzLm1lbnVQb3J0YWwgPSAiYWJMb2FkU3RhdHVzIjsKCmxldCBzdGF0dXNCb3QgPSB7fTsKCnN0YXR1c0JvdC5zcGFjZSA9ICJ0ZW1wTG9jYWwiOwpzdGF0dXNCb3QubGFiZWwgPSAidmVyaWZ5aW5nIGF1dGhCb3QiOwpzdGF0dXNCb3QubGFiZWxDb2xvciA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJCYXNlU3Ryb2tlQ29sb3I7CnN0YXR1c0JvdC5hYkxvYWRTdGF0dXMgPSB0cnVlOwpzdGF0dXNCb3QubWVudUl0ZW1TdHlsZSA9IHsgImJhY2tncm91bmQiOiAibm9uZSIgfTsKc3RhdHVzQm90LnRyYWNrTnVtID0gMDsKc3RhdHVzQm90Lm9uQ3JlYXRlID0gYEAKICAgIGlmICh0YWdzLnRyYWNrTnVtID09IDIpIHsKICAgICAgICB0YWdzLnRyYWNrTnVtID0gMDsKICAgIH0KICAgIGVsc2UgewogICAgICAgIHRhZ3MudHJhY2tOdW0rKzsKICAgIH0KCiAgICB0YWdzLmxhYmVsID0gdGFnc1sibGFiZWwiK3RhZ3MudHJhY2tOdW1dOwogICAgdGFncy5mb3JtQWRkcmVzcyA9IHRhZ3NbImZvcm0iK3RhZ3MudHJhY2tOdW1dOwoKICAgIHNldFRpbWVvdXQoKCkgPT4gd2hpc3Blcih0aGlzQm90LCAib25DcmVhdGUiKSwgNTAwKTtgOwpzdGF0dXNCb3QubGFiZWwwID0gInZlcmlmeWluZyBhdXRoQm90LiI7CnN0YXR1c0JvdC5sYWJlbDEgPSAidmVyaWZ5aW5nIGF1dGhCb3QuLiI7CnN0YXR1c0JvdC5sYWJlbDIgPSAidmVyaWZ5aW5nIGF1dGhCb3QuLi4iOwpzdGF0dXNCb3QuZm9ybTAgPSAiaG91cmdsYXNzX2JvdHRvbSI7CnN0YXR1c0JvdC5mb3JtMSA9ICJob3VyZ2xhc3NfdG9wIjsKc3RhdHVzQm90LmZvcm0yID0gImhvdXJnbGFzc19ib3R0b20iOwpzdGF0dXNCb3Qub25EZXN0cm95ID0gYEAKICAgIGNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gbnVsbDsKYDsKCmxldCBjcmVhdGVkU3RhdHVzQm90ID0gY3JlYXRlKHN0YXR1c0JvdCk7CgpyZXR1cm4gY3JlYXRlZFN0YXR1c0JvdDsnAMqntcsNAANhc2sCBADKp7XLDfNXKPCflJdlYzg1YzFkNi05ZjFhLTQwZDQtODJlMS01YmQ2ODAzNDljMjcnAMqntcsNAA1hYkxvYWRTdHVkaW9zAgQAyqe1yw2aWFtAY29uc3QgdXNlclN0dWRpb3MgPSBhd2FpdCBvcy5saXN0VXNlclN0dWRpb3MoKTsKY29uZmlnQm90LnRhZ3MudXNlcl9zdHVkaW9zID0gdXNlclN0dWRpb3M7JwDKp7XLDQAHYWJUaW1lcgIEAMqntcsN9ljBBkBpZiAoZ2V0Qm90KCJhYlRpbWVyIiwgdHJ1ZSkpIHsKICAgIHJldHVybjsKfQoKaWYgKCF0YWdzLmFiWFApIHsKICAgIHNldFRhZ01hc2sodGhpc0JvdCwgImFiWFAiLCAiMCIsICJsb2NhbCIpOwp9CgpsZXQgdGltZXJCb3QgPSB7fTsKCnRpbWVyQm90LnNwYWNlID0gInRlbXBMb2NhbCI7CnRpbWVyQm90Lm1hbmFnZXIgPSBnZXRMaW5rKHRoaXNCb3QpOwp0aW1lckJvdC5vbkNyZWF0ZSA9IGBACiAgICBtYXNrcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHRoaXNCb3Qub25UaW1lQ2hlY2soKSwgNjAwMDApOwpgOwp0aW1lckJvdC5hYlRpbWVyID0gdHJ1ZTsKdGltZXJCb3Qub25UaW1lQ2hlY2sgPSBgQAogICAgaWYgKHRhZ3Mubm90SWRsZSkgewogICAgICAgIHRhZ3Mubm90SWRsZSA9IGZhbHNlOwoKICAgICAgICAvL2NvbnNvbGUubG9nKCJYUCIsIGxpbmtzLm1hbmFnZXIudGFncy5hYlhQKTsKCiAgICAgICAgY29uc3QgdG90YWxYUCA9IGxpbmtzLm1hbmFnZXIudGFncy5hYlhQICsgMTsKCiAgICAgICAgc2V0VGFnTWFzayhsaW5rcy5tYW5hZ2VyLCAiYWJYUCIsIHRvdGFsWFAsICJsb2NhbCIpOwogICAgfQpgOwp0aW1lckJvdC5ub3RJZGxlID0gZmFsc2U7CnRpbWVyQm90Lm9uQW55QWN0aW9uID0gYEAKICAgIGlmICghdGFncy5ub3RJZGxlKSB7CiAgICAgICAgaWYgKHRoYXQuYWN0aW9uLmlkID09IGdyaWRQb3J0YWxCb3QuaWQpCiAgICAgICAgewogICAgICAgICAgICB0YWdzLm5vdElkbGUgPSB0cnVlOwogICAgICAgIH0KICAgIH0KYDsKCmxldCBhYlRpbWVyID0gY3JlYXRlKHRpbWVyQm90KTsKCmdsb2JhbFRoaXMuYWJUaW1lciA9IGFiVGltZXI7JwDKp7XLDQAFc3RvcmUCBADKp7XLDbhfKPCflJc3NmFmMDQ5MS0zOTE5LTQ5ODQtYWE4Mi0yMmM3NDJmNDI2M2YnAMqntcsNAAdjb25zb2xlAgQAyqe1yw3fXyjwn5SXMjRiN2U2NmYtMGQ1Yi00MDY0LWJmNDgtYjU2MmI5ZTZlM2ViJwDKp7XLDQAJYWJWZXJzaW9uAgQAyqe1yw2GYAQxMC45JwDKp7XLDQAMYWJMb2FkQ29uZmlnAgQAyqe1yw2LYJoGQGNvbnN0IHVybCA9IG5ldyBVUkwob3MuZ2V0QUIxQm9vdHN0cmFwVVJMKCkpOwp1cmwucGF0aG5hbWUgPSB1cmwucGF0aG5hbWUucmVwbGFjZSgnYWIxLmF1eCcsICdhYkNvbmZpZy5hdXgnKTsKCnRyeSB7CiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHdlYi5ob29rKHsgbWV0aG9kOiAiR0VUIiwgdXJsOiB1cmwuaHJlZiB9KTsKCiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICBjb25zb2xlLmxvZyhgWyR7dGFncy5zeXN0ZW19LiR7dGFnTmFtZX1dIENvdWxkIG5vdCBkb3dubG9hZCBhYkNvbmZpZy4gUmVzcG9uc2U6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgY29uc3QgdXBkYXRlcyA9IHJlc3BvbnNlLmRhdGEudXBkYXRlczsKICAgIGF3YWl0IG9zLmFwcGx5VXBkYXRlc1RvSW5zdCh1cGRhdGVzKTsKCiAgICBpZiAobGlua3MucmVtZW1iZXIpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS5lcnJvcihgWyR7dGFncy5zeXN0ZW19LiR7dGFnTmFtZX1dIExvYWRlZCBhYkNvbmZpZyBhdXggYnV0IGNvdWxkIG5vdCBmaW5kIHJlbWVtYmVyIGJvdC5gKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9Cn0gY2F0Y2ggKGUpIHsKICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICBjb25zb2xlLmVycm9yKGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gRmFpbGVkIHRvIGRvd25sb2FkIGFiQ29uZmlnLiBTZWUgYWJvdmUgZXJyb3IuYCk7CiAgICByZXR1cm4gZmFsc2U7Cn0nAMqntcsNABdhYkJ1aWxkQ2FzdWFsQ2F0YWxvZ1VSTAIEAMqntcsNpmb/AUBjb25zdCByZWxhdGl2ZVBhdGggPSB0aGF0OwoKY29uc3QgdXJsID0gbmV3IFVSTChsaW5rcy5yZW1lbWJlci50YWdzLmNhc3VhbENhdGFsb2dVUkwpOwpjb25zdCBlbnYgPSBsaW5rcy5yZW1lbWJlci50YWdzLmNhc3VhbENhdGFsb2dFbnY7Cgp1cmwucGF0aG5hbWUgPSByZWxhdGl2ZVBhdGg7CgppZiAoZW52ICYmIGVudiAhPT0gJ3Byb2QnKSB7CiAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgnZW52JywgZW52KTsKfQoKcmV0dXJuIHVybC5ocmVmOycAyqe1yw0AB2NoYW5uZWwCBADKp7XLDaZoKPCflJdhOWI2YWEwZC1iMzU3LTRkZTYtOWJlZi04NTM0OGFiMWQwZTAnAMqntcsNAAtwZXJzb25hbGl0eQIEAMqntcsNzWgo8J+Ul2I3NmRmYmM0LTg1NGItNGY2ZC1hOTFmLWE5NDg2OTQ3NzRkYicAyqe1yw0ADGFiSW5zdFVwZGF0ZQIEAMqntcsN9GiiAUAvLyBVcGRhdGUgdGhlIGFiSW5zdCB0YWcgd2hpY2ggcmVwcmVzZW50cyB0aGUgaW5zdCB0aGF0IHRoaXMgYWIgZXhpc3RzIGluLgpjb25zdCBjdXJJbnN0ID0gb3MuZ2V0Q3VycmVudEluc3QoKTsKc2V0VGFnTWFzayh0aGlzQm90LCAnYWJJbnN0JywgY3VySW5zdCwgJ3NoYXJlZCcpOycAyqe1yw0ADG9uSW5zdEpvaW5lZAIEAMqntcsNl2oYQHRoaXNCb3QuYWJJbnN0VXBkYXRlKCk7JwDKp7XLDQALb25JbnN0TGVhdmUCBADKp7XLDbBqGEB0aGlzQm90LmFiSW5zdFVwZGF0ZSgpOycAyqe1yw0ADHJlc2VydmVkQXNrcwIEAMqntcsNyWoM8J+nrFsiaG9tZSJdJwDKp7XLDQAIYXJ0aWZhY3QCBADKp7XLDdRqKPCflJc3OGU0MTUwMy1jOTMzLTRmOGEtODE3YS1iYTk3YmY4ZDVkMjcnAMqntcsNAAtib3RfZmFjdG9yeQIEAMqntcsN+2oo8J+Ul2M3OGFhNjYzLWQwNWMtNGVjNC1iYzJjLTI2ZmQ1MTU2MGI5NycAyqe1yw0ABXV0aWxzAgQAyqe1yw2iayjwn5SXOTNkOTY1ZTAtZDIwZS00YjQ1LThjYTAtNjQ5MjczYjcxMzhjJwDKp7XLDQAIdXBkYXRlQUICBADKp7XLDclrd0Bjb25zdCBsb2FkZWRTS2lsbHMgPSB0aGlzQm90LnZhcnMubG9hZGVkU2tpbGxzOw0KDQpsb2FkZWRTS2lsbHMuZm9yRWFjaCgoc2tpbGwpID0+IHsNCiAgICB0aGlzQm90LmFiQWRhcHQoc2tpbGwpOw0KfSk7AA=="}]}