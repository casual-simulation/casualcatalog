{"version":2,"updates":[{"id":0,"timestamp":1753118354827,"update":"AakD9JDTyQQAJwEEYm90cyQwMjgzNjVhNC0wMzZmLTQxZDAtOWFmMS03MTVhZDRmMmFhN2EBJwD0kNPJBAAGc3lzdGVtAgQA9JDTyQQBDWFiLnNoZWxsLmdyaWQnAPSQ08kEAARmb3JtAgQA9JDTyQQPB25vdGhpbmcnAPSQ08kEAAxvbkFueUJvdERyYWcCBAD0kNPJBBe7AUAvL2NvbnRyb2xzIGdyaWQgc25hcAppZiAobGlua3MucmVtZW1iZXIudGFncy5hYkdyaWRTbmFwU3RhdGUpCnsKICAgIG9zLmFkZERyb3BTbmFwKCJncmlkIik7Cn0KCi8vY29udHJvbHMgYm90IHNuYXAKaWYgKGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJCb3RTbmFwU3RhdGUpCnsKICAgIG9zLmFkZERyb3BTbmFwKCJmYWNlIik7Cn0nAPSQ08kEAAhyZW1lbWJlcgIEAPSQ08kE0wEo8J+Ul2U1MzgwYTZiLThiNGQtNGE4Yi04YjA0LTU4ZTFlYjAzZTVlNycA9JDTyQQACGFiSWdub3JlAgQA9JDTyQT6AQR0cnVlJwD0kNPJBAAHYWJTaGVsbAIEAPSQ08kE/wEEdHJ1ZScA9JDTyQQACWFiVmVyc2lvbgIEAPSQ08kEhAIEMTAuNScA9JDTyQQABWZvY3VzAgQA9JDTyQSJAqwEQC8vc2hvdXQoImZvY3VzIiwge2JvdDogYm90LCBwb3NpdGlvbjp7eDogeCwgeTogeX19KTsKCmNvbnN0IGZvY3VzVHlwZSA9IHRoYXQuYm90ID8gImJvdCIgOiAicG9zaXRpb24iOwpjb25zdCBkdXJhdGlvbiA9IHRoYXQuZHVyYXRpb247CmNvbnN0IHpvb20gPSB0aGF0Lnpvb20gPz8gY29uZmlnQm90LnRhZ3MubWFwUG9ydGFsID8gMjAwMCA6IDEwOwpjb25zdCByb3RhdGlvbiA9IHRoYXQucm90YXRpb24gPz8ge3g6IDQ1LCB5OiA0NX07CmNvbnN0IGVhc2luZyA9IHRoYXQuZWFzaW5nID8/IHt0eXBlOiAibGluZWFyIiwgbW9kZTogImlub3V0In07CmNvbnN0IGZvY3VzT3B0aW9ucyA9IHsKICAgIHpvb206IHpvb20sCiAgICByb3RhdGlvbjogcm90YXRpb24sCiAgICBlYXNpbmc6IGVhc2luZywKICAgIGR1cmF0aW9uOiBkdXJhdGlvbgp9OwoKaWYgKGZvY3VzVHlwZSA9PSAiYm90IikKewogICAgYXdhaXQgb3MuZm9jdXNPbih0aGF0LmJvdCwgZm9jdXNPcHRpb25zKTsKfQplbHNlCnsKICAgIGF3YWl0IG9zLmZvY3VzT24odGhhdC5wb3NpdGlvbiwgZm9jdXNPcHRpb25zKTsKfScBBGJvdHMkMTFjOTVjN2QtYTE5My00MDBlLWI3MTAtM2JhMDQ4NmE2YTFhAScA9JDTyQS2BgZzeXN0ZW0CBAD0kNPJBLcGE2FiLnNoZWxsLmNvbXBvbmVudHMnAPSQ08kEtgYMQXBwQ29udGFpbmVyAgQA9JDTyQTLBqwEQGNvbnN0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gPSBvcy5hcHBIb29rczsKCmNvbnN0IEFwcENvbnRhaW5lciA9ICh7CiAgICBpZCA9IHV1aWQoKSwKICAgIG9uQmFja2dyb3VuZENsaWNrLAogICAgY2hpbGRyZW4KfSkgPT4gewogICAgY29uc3QgW2FwcElkLCBdID0gdXNlU3RhdGUoaWQpOwoKICAgIGNvbnN0IG9uQ2xpY2sgPSB1c2VDYWxsYmFjaygoZSkgPT4gewogICAgICAgIGlmIChlLnRhcmdldC5pZCA9PT0gYXBwSWQpIHsKICAgICAgICAgICAgaWYgKG9uQmFja2dyb3VuZENsaWNrKSB7CiAgICAgICAgICAgICAgICAvLyBDbGlja2VkIG9uIGFwcCBiYWNrZ3JvdW5kLgogICAgICAgICAgICAgICAgb25CYWNrZ3JvdW5kQ2xpY2soKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sIFthcHBJZF0pOwoKICAgIHJldHVybiAoCiAgICAgICAgPGRpdiBpZD17YXBwSWR9IGNsYXNzTmFtZT0nYWItYXBwLWJnJyBvbkNsaWNrPXtvbkNsaWNrfT4KICAgICAgICAgICAge2NoaWxkcmVufQogICAgICAgIDwvZGl2PgogICAgKQp9CgpyZXR1cm4gQXBwQ29udGFpbmVyOycA9JDTyQS2BghUZXh0TGluawIEAPSQ08kE+AqjA0Bjb25zdCBUZXh0TGluayA9ICh7CiAgICBvbkNsaWNrLAogICAgY2hpbGRyZW4sCn0pID0+IHsKICAgIHJldHVybiAoCiAgICAgICAgPHNwYW4gCiAgICAgICAgICAgIGNsYXNzTmFtZT0nYWItYXBwLXRleHQtbGluayBib2xkJyAKICAgICAgICAgICAgb25DbGljaz17b25DbGlja30KICAgICAgICAgICAgc3R5bGU9e3sKICAgICAgICAgICAgICAgICctLWFiLWFwcC10ZXh0LWxpbmstY29sb3InOiBsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQmFzZUNvbG9yLAogICAgICAgICAgICAgICAgJy0tYWItYXBwLXRleHQtbGluay1ob3Zlci1jb2xvcic6IGxpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCbHVlcHJpbnRDb2xvcgogICAgICAgICAgICB9fQogICAgICAgID57Y2hpbGRyZW59PC9zcGFuPgogICAgKQp9CgpyZXR1cm4gVGV4dExpbms7JwD0kNPJBLYGBldpbmRvdwIEAPSQ08kEnA62AkBjb25zdCBXaW5kb3cgPSAoewogICAgaWQsCiAgICBkaXNhYmxlU2hhZG93LAogICAgY2hpbGRyZW4sCn0pID0+IHsKCiAgICBsZXQgd2luZG93Q2xhc3NOYW1lID0gJ2FiLWFwcC13aW5kb3cnOwoKICAgIGlmIChkaXNhYmxlU2hhZG93KSB7CiAgICAgICAgd2luZG93Q2xhc3NOYW1lICs9ICcgbm8tc2hhZG93JzsKICAgIH0KCiAgICByZXR1cm4gKAogICAgICAgIDxkaXYgaWQ9e2lkfSBjbGFzc05hbWU9e3dpbmRvd0NsYXNzTmFtZX0+CiAgICAgICAgICAgIHtjaGlsZHJlbn0KICAgICAgICA8L2Rpdj4KICAgICkKfQoKcmV0dXJuIFdpbmRvdzsnAPSQ08kEtgYMVGV4dExpbmsuY3NzAgQA9JDTyQTTEO0BLmFiLWFwcC10ZXh0LWxpbmsgewogIGNvbG9yOiB2YXIoLS1hYi1hcHAtdGV4dC1saW5rLWNvbG9yLCByZ2IoNzEgMjU1IDEzNykpOwp9CgouYWItYXBwLXRleHQtbGluazpob3ZlciB7CiAgY3Vyc29yOiBwb2ludGVyOwogIGNvbG9yOiB2YXIoLS1hYi1hcHAtdGV4dC1saW5rLWhvdmVyLWNvbG9yLCByZ2IoMCAxOTIgMjU1KSk7Cn0KCi5hYi1hcHAtdGV4dC1saW5rLmJvbGQgewogIGZvbnQtd2VpZ2h0OiBib2xkOwp9JwD0kNPJBLYGFUJhY2tncm91bmRPdmVybGF5LmNzcwIEAPSQ08kEwRJxLmFiLWFwcC1iZyB7CiAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMzMpOwogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDEwMCU7Cn0nAPSQ08kEtgYKV2luZG93LmNzcwIEAPSQ08kEsxOoAy5hYi1hcHAtd2luZG93IHsKICAgIHBvc2l0aW9uOiBmaXhlZDsKICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7CiAgICBjb2xvcjogd2hpdGU7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmYyZjJmOwogICAgd2lkdGg6IDgwdnc7CiAgICBoZWlnaHQ6IDcwdmg7CiAgICBtYXgtd2lkdGg6IDE1MDBweDsKICAgIG1heC1oZWlnaHQ6IDEwMDBweDsKICAgIGxlZnQ6IDUwJTsKICAgIHRvcDogNTAlOwogICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7CiAgICBib3gtc2hhZG93OiAwcHggMHB4IDEycHggMHB4IGJsYWNrOwogICAgb3ZlcmZsb3c6IGF1dG87CiAgICBwYWRkaW5nLWxlZnQ6IDhweDsKICAgIHBhZGRpbmctcmlnaHQ6IDhweDsKfQoKLmFiLWFwcC13aW5kb3cubm8tc2hhZG93IHsKICAgIGJveC1zaGFkb3c6IG5vbmU7Cn0nAPSQ08kEtgYIcmVtZW1iZXICBAD0kNPJBNwWKPCflJdlNTM4MGE2Yi04YjRkLTRhOGItOGIwNC01OGUxZWIwM2U1ZTcnAPSQ08kEtgYIYWJJZ25vcmUCBAD0kNPJBIMXBHRydWUnAPSQ08kEtgYHYWJTaGVsbAIEAPSQ08kEiBcEdHJ1ZScA9JDTyQS2BglhYlZlcnNpb24CBAD0kNPJBI0XBDEwLjUnAPSQ08kEtgYLcGVyc29uYWxpdHkCBAD0kNPJBJIXKPCflJdiNzZkZmJjNC04NTRiLTRmNmQtYTkxZi1hOTQ4Njk0Nzc0ZGInAQRib3RzJDI0YjdlNjZmLTBkNWItNDA2NC1iZjQ4LWI1NjJiOWU2ZTNlYgEnAPSQ08kEuRcHQXBwLmNzcwIEAPSQ08kEuhexFjpyb290IHsKICAtLWFiLWNvbnNvbGUtYmc6ICNmOGY5ZmE7CiAgLS1vbi1hYi1jb25zb2xlLWJnOiAjMjEyNTI5OwogIC0tYWItY29uc29sZS1oZWlnaHQ6IDMzdmg7Cn0KLyogRGFyayBtb2RlIHN1cHBvcnQgKi8KQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaykgewogIDpyb290IHsKICAgIC0tYWItY29uc29sZS1iZzogIzIxMjUyOTsKICAgIC0tb24tYWItY29uc29sZS1iZzogI2Y4ZjlmYTsKICB9Cn0KCi5hYi1jb25zb2xlLWJ0biB7CiAgY3Vyc29yOiBwb2ludGVyOwogIGNvbG9yOiBpbmhlcml0OwogIGxldHRlci1zcGFjaW5nOiBpbmhlcml0OwogIGxpbmUtaGVpZ2h0OiBpbmhlcml0OwogIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0OwogIHRleHQtaW5kZW50OiBpbmhlcml0OwogIHRleHQtc2hhZG93OiBpbmhlcml0OwogIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7CiAgbWFyZ2luOiBpbmhlcml0OwogIHBhZGRpbmctYmxvY2s6IGluaGVyaXQ7CiAgcGFkZGluZy1pbmxpbmU6IGluaGVyaXQ7CiAgYm9yZGVyOiBub25lOwogIHRyYW5zZm9ybTogc2NhbGUoMS4yKTsKfQoKLmFiLWNvbnNvbGUgewogIHdpZHRoOiAxMDB2dzsKICBtYXgtaGVpZ2h0OiB2YXIoLS1hYi1jb25zb2xlLWhlaWdodCk7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIHBhZGRpbmc6IDA7CiAgY29sb3I6IHZhcigtLW9uLWFiLWNvbnNvbGUtYmcpOwogIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OwogIGJhY2tkcm9wLWZpbHRlcjogYmx1cigxMHB4KSBicmlnaHRuZXNzKDIwMCUpOwogIGFuaW1hdGlvbi1uYW1lOiBzbGlkZS1hcHAtaW47CiAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjVzOwogIG92ZXJmbG93LXk6IGhpZGRlbjsKICB6LWluZGV4OiAxOwp9CgouYWItY29uc29sZTo6YWZ0ZXIgewogIGNvbnRlbnQ6ICIiOwogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFiLWNvbnNvbGUtYmcpOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDA7CiAgbGVmdDogMDsKICByaWdodDogMDsKICBib3R0b206IDA7CiAgb3BhY2l0eTogMC45OwogIHotaW5kZXg6IDA7Cn0KCkBrZXlmcmFtZXMgc2xpZGUtYXBwLWluIHsKICBmcm9tIHsKICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllciguNiwwLC43OSwxLjAzKTsKICAgIC8qIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMTAlKTsgKi8KICAgIC8qIGhlaWdodDogMHB4OyAqLwogICAgLyogbWluLWhlaWdodDogMHB4OyAqLwogICAgbWF4LWhlaWdodDogMHB4OwogIH0KCiAgdG8gewogICAgbWF4LWhlaWdodDogdmFyKC0tYWItY29uc29sZS1oZWlnaHQpOwogICAgLyogbWluLWhlaWdodDogdmFyKC0tYWItY29uc29sZS1oZWlnaHQpOyAqLwogIH0KfQoKLmFiLWNvbnNvbGUgPiBkaXYgewogIHotaW5kZXg6IDE7CiAgcG9zaXRpb246IHJlbGF0aXZlCn0KCi5hYi1jb25zb2xlLXRvcC1iYXIgewogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFiLWNvbnNvbGUtYmcpOwogIHdpZHRoOiAxMDAlOwogIHRleHQtYWxpZ246IGNlbnRlcjsKICB1c2VyLXNlbGVjdDogbm9uZTsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAganVzdGlmeS1jb250ZW50OiBlbmQ7CiAgcGFkZGluZzogMC41cmVtOwp9CgouYWItY29uc29sZS1sb2cgewogIG92ZXJmbG93LXk6IGF1dG87CiAgZmxleC1ncm93OiAxOwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlOwogIG1pbi1oZWlnaHQ6IDI0cHg7CiAgcGFkZGluZzogMCAxcmVtOwogIGN1cnNvcjogcG9pbnRlcjsKICBvdmVyc2Nyb2xsLWJlaGF2aW9yOiBjb250YWluOwp9CgouYWItY29uc29sZS1jb250ZW50IHsKICBjdXJzb3I6IGluaXRpYWw7Cn0KCi5hYi1jb25zb2xlLW1lc3NhZ2UtY29udGFpbmVyIHsKICBtYXJnaW46IDAuNXJlbSAwOwp9Ci5hYi1jb25zb2xlLW1lc3NhZ2UgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IHJvdzsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGdhcDogOHB4Owp9CgouYWItY29uc29sZS1zcGFjZXIgewogIGZsZXgtc2hyaW5rOiAwOwogIGZsZXgtZ3JvdzogMTsKfQoKLmFiLWNvbnNvbGUtY29udGVudCB7CiAgbWF4LXdpZHRoOiA4MHZ3OwogIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07CiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWItY29uc29sZS1iZyk7CiAgY29sb3I6IHZhcigtLW9uLWFiLWNvbnNvbGUtYmcpOwogIHBhZGRpbmc6IDAuNXJlbSAxcmVtOwp9CgouYWItY29uc29sZS10aW1lc3RhbXAgewogIG9wYWNpdHk6IDAuNjsKfQoKLmNvbnNvbGUtc2VuZC1idG4gewogIG1hcmdpbjogMCAhaW1wb3J0YW50OwogIHBhZGRpbmc6IDAgMXJlbSAhaW1wb3J0YW50OwogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFiLWNvbnNvbGUtYmcpOwogIGJvcmRlci1yYWRpdXM6IDRweDsKfQoKLmNvbnNvbGUtc2VuZC1idG4gPiBzcGFuIHsKICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoM3B4KQp9CgouYWItY29uc29sZS1pbnB1dC1jb250YWluZXIgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IHJvdzsKICBnYXA6IDAuNzVyZW07CiAgbWFyZ2luOiAwLjVyZW0gMXJlbTsKICBhbGlnbi1pdGVtczogY2VudGVyOwp9CgouYWItY29uc29sZS1pbnB1dC1jb250YWluZXIgPiBpbnB1dCB7CiAgYmFja2dyb3VuZDogdmFyKC0tYWItY29uc29sZS1iZyk7CiAgY29sb3I6IHZhcigtLW9uLWFiLWNvbnNvbGUtYmcpOwogIGZsZXgtZ3JvdzogMTsKICBvdXRsaW5lOiBub25lOwogIGJvcmRlcjogbm9uZTsKICBwYWRkaW5nOiAxcmVtOwogIGJvcmRlci1yYWRpdXM6IDRweDsKfScA9JDTyQS5FwZnZXRBcHACBAD0kNPJBOwt3SNAY29uc3QgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VNZW1vLCB1c2VSZWYgfSA9IG9zLmFwcEhvb2tzCmNvbnN0IFRvcEJhciA9IHRoaXNCb3QuVG9wQmFyKCk7CmNvbnN0IE1lc3NhZ2UgPSB0aGlzQm90Lk1lc3NhZ2UoKTsKCmNvbnN0IEFwcCA9ICgpID0+IHsKICAgIGNvbnN0IFtwb2ludGVyRG93blBvcywgc2V0UG9pbnRlckRvd25Qb3NdID0gdXNlU3RhdGUoe3g6IC0xLCB5OiAtMX0pOwogICAgY29uc3QgW2NvbnNvbGVMb2csIHNldENvbnNvbGVMb2ddID0gdXNlU3RhdGUoW10pOwogICAgY29uc3QgW3Nob3dDaGF0LCBzZXRTaG93Q2hhdF0gPSB1c2VTdGF0ZSh0YWdzLnNob3dDaGF0SW5wdXQpOwogICAgY29uc3QgW3VzZXJJbnB1dCwgc2V0VXNlcklucHV0XSA9IHVzZVN0YXRlKCcnKTsKICAgIGNvbnN0IFtzaG93QWxsLCBzZXRTaG93QWxsXSA9IHVzZVN0YXRlKGZhbHNlKTsKICAgIGNvbnN0IGlucHV0UmVmID0gdXNlUmVmKCk7CgogICAgY29uc3QgdXBkYXRlTG9nID0gKCkgPT4gewogICAgICAgIGlmICghdGhpc0JvdC52YXJzLm1lc3NhZ2VCb3RJZHMpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBib3RzID0gdGhpc0JvdC52YXJzLm1lc3NhZ2VCb3RJZHM7CiAgICAgICAgY29uc3QgbWVzc2FnZUxvZ0FyciA9IFtdOwoKICAgICAgICBmb3IgKGNvbnN0IGJvdElEIG9mIGJvdHMpIHsKICAgICAgICAgICAgY29uc3QgbWVzc2FnZUJvdCA9IGdldEJvdCgiaWQiLCBib3RJRCk7CiAgICAgICAgICAgIGlmIChtZXNzYWdlQm90KSB7CiAgICAgICAgICAgICAgICBtZXNzYWdlTG9nQXJyLnB1c2goewogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VCb3QudGFncy5tZXNzYWdlLAogICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbWVzc2FnZUJvdC50YWdzLnRpbWVzdGFtcCwKICAgICAgICAgICAgICAgICAgICBuYW1lOiBtZXNzYWdlQm90LnRhZ3MubmFtZQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgbWVzc2FnZUxvZ0Fyci5zb3J0KCAoYSwgYikgPT4gbmV3IERhdGUoYS50aW1lc3RhbXApIDwgbmV3IERhdGUoYi50aW1lc3RhbXApID8gMSA6IC0xICk7CgogICAgICAgIHNldENvbnNvbGVMb2cobWVzc2FnZUxvZ0Fycik7CiAgICB9CgogICAgdXNlRWZmZWN0KCgpID0+IHsKICAgICAgICB0aGlzQm90LnZhcnMudXBkYXRlTG9nID0gdXBkYXRlTG9nOwogICAgICAgIHRoaXNCb3QudmFycy5zZXRTaG93QWxsID0gc2V0U2hvd0FsbDsKCiAgICAgICAgdXBkYXRlTG9nKCk7CgogICAgICAgIHJldHVybiAoKCkgPT4gewogICAgICAgICAgICB0aGlzQm90LnZhcnMudXBkYXRlTG9nID0gbnVsbDsKICAgICAgICAgICAgdGhpc0JvdC52YXJzLnNldFNob3dBbGwgPSBudWxsOwogICAgICAgIH0pOwogICAgfSwgW10pOwoKICAgIHVzZUVmZmVjdCgoKSA9PiB7CiAgICAgICAgaWYgKGlucHV0UmVmLmN1cnJlbnQpIGlucHV0UmVmLmN1cnJlbnQuZm9jdXMoKTsKICAgIH0sIFtzaG93Q2hhdF0pOwoKICAgIGNvbnN0IGhhbmRsZVBvaW50ZXJEb3duID0gKGUpID0+IHsKICAgICAgICBzZXRQb2ludGVyRG93blBvcyh7CiAgICAgICAgICAgIHg6IGUuY2xpZW50WCwKICAgICAgICAgICAgeTogZS5jbGllbnRZLAogICAgICAgIH0pCiAgICB9CgogICAgY29uc3QgaGFuZGxlUG9pbnRlclVwID0gKGUpID0+IHsKICAgICAgICBjb25zdCBkaWZmWCA9IE1hdGguYWJzKGUuY2xpZW50WCAtIHBvaW50ZXJEb3duUG9zLngpOwogICAgICAgIGNvbnN0IGRpZmZZID0gTWF0aC5hYnMoZS5jbGllbnRZIC0gcG9pbnRlckRvd25Qb3MueSk7CgogICAgICAgIGlmIChkaWZmWCA8IDUgJiYgZGlmZlkgPCA1KSB7CiAgICAgICAgICAgIHNldFNob3dBbGwocyA9PiAhcyk7CiAgICAgICAgfQoKICAgICAgICBzZXRQb2ludGVyRG93blBvcyh7eDogLTEsIHk6IC0xfSk7CiAgICB9CgogICAgY29uc3QgaGFuZGxlU3VibWl0ID0gKCkgPT4gewogICAgICAgIGlmICh1c2VySW5wdXQpIHsKICAgICAgICAgICAgd2hpc3BlcihnZXRCb3QoJ3N5c3RlbScsICdhYi5hY3Rpb24uYXNrJyksICdhYkNvcmVNZW51QWN0aW9uJywgdXNlcklucHV0KQogICAgICAgICAgICBzZXRVc2VySW5wdXQoJycpOwogICAgICAgICAgICBjb25zb2xlLmxvZygiaW5wdXRSZWY6IiwgaW5wdXRSZWYuY3VycmVudCk7CiAgICAgICAgICAgIGlmIChpbnB1dFJlZi5jdXJyZW50KSBpbnB1dFJlZi5jdXJyZW50LnZhbHVlID0gJyc7CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiAoPD4KICAgICAgICA8c3R5bGU+e3RhZ3NbJ0FwcC5jc3MnXX08L3N0eWxlPgoKICAgICAgICA8ZGl2CiAgICAgICAgICAgIGlkPSJhYi1jb25zb2xlIgogICAgICAgICAgICBjbGFzc05hbWU9ImFiLWNvbnNvbGUiCiAgICAgICAgICAgIG9uUG9pbnRlckVudGVyPXsoZSkgPT4gewogICAgICAgICAgICAgICAgZ3JpZFBvcnRhbEJvdC5tYXNrcy5wb3J0YWxab29tYWJsZSA9IGZhbHNlOwogICAgICAgICAgICB9fQogICAgICAgICAgICBvblBvaW50ZXJMZWF2ZT17KGUpID0+IHsKICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5pZCA9PSAiYWItY29uc29sZSIpewogICAgICAgICAgICAgICAgICAgIGdyaWRQb3J0YWxCb3QubWFza3MucG9ydGFsWm9vbWFibGUgPSB0cnVlOyAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfX0KICAgICAgICA+CiAgICAgICAgICAgIHt0YWdzLnNob3dUb3BCYXIgJiYgPFRvcEJhciAvPn0KCiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0iYWItY29uc29sZS1sb2ciCiAgICAgICAgICAgICAgICBvblBvaW50ZXJEb3duPXtoYW5kbGVQb2ludGVyRG93bn0KICAgICAgICAgICAgICAgIG9uUG9pbnRlclVwPXtoYW5kbGVQb2ludGVyVXB9CiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIHsvKiBNZXNzYWdlIGhpc3RvcnkgKi8gQXJyYXkuaXNBcnJheShjb25zb2xlTG9nKQogICAgICAgICAgICAgICAgPyBzaG93QWxsCiAgICAgICAgICAgICAgICAgICAgPyBjb25zb2xlTG9nLm1hcCgobSwgaSkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW0gfHwgIW0udGltZXN0YW1wIHx8ICFtLm1lc3NhZ2UpIHsgcmV0dXJuIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wPXttLnRpbWVzdGFtcH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlPXttLm1lc3NhZ2V9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17bS5uYW1lfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17YG1lc3NhZ2UtJHtpfWB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICApfSkKICAgICAgICAgICAgICAgICAgICA6IDxNZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcD17Y29uc29sZUxvZ1swXT8udGltZXN0YW1wfQogICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlPXtjb25zb2xlTG9nWzBdPy5tZXNzYWdlfQogICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtjb25zb2xlTG9nWzBdPy5uYW1lfQogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA6IDw+PC8+fQoKICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAge3Nob3dDaGF0ICYmCiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSJhYi1jb25zb2xlLWlucHV0LWNvbnRhaW5lciIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9ImFzayBhYi0xIgogICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiBzZXRVc2VySW5wdXQoZS50YXJnZXQudmFsdWUpfQogICAgICAgICAgICAgICAgICAgICAgICBvbktleURvd249e2UgPT4geyBpZiAoZS5rZXkgPT09ICdFbnRlcicpIGhhbmRsZVN1Ym1pdCgpIH19CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17aW5wdXRSZWZ9CiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0iYWItY29uc29sZS1idG4gY29uc29sZS1zZW5kLWJ0biBtZC1pY29uIG1kLWljb24tZm9udCIKICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlU3VibWl0fQogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnNDBweCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzQ4cHgnLAogICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgID5zZW5kPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj59CiAgICAgICAgPC9kaXY+CiAgICA8Lz4pCn0KCnJldHVybiBBcHAKJwD0kNPJBLkXC2hpZGVDb25zb2xlAgQA9JDTyQTKUZ8BQHZhciBjdXJyZW50VmVyID0gbWFza3MuY29uc29sZVZlcnNpb24gPz8gMDsKYXdhaXQgb3MudW5yZWdpc3RlckFwcChgYWItY29uc29sZS0ke2N1cnJlbnRWZXJ9YCk7Cm1hc2tzLm9wZW4gPSBmYWxzZTsKZ3JpZFBvcnRhbEJvdC5tYXNrcy5wb3J0YWxab29tYWJsZSA9IG51bGw7JwD0kNPJBLkXA2xvZwIEAPSQ08kE6lLkCEBsZXQgYm90VGFncyA9IHt9OwoKY29uc3QgX3RpbWVzdGFtcCA9IG9zLmlzQ29sbGFib3JhdGl2ZSgpID8gb3MuYWdyZWVkVXBvblRpbWUgOiBvcy5sb2NhbFRpbWUKCmlmICh0eXBlb2YgdGhhdCA9PT0gJ3N0cmluZycpIHsKICAgIGNvbnN0IF9tZXNzYWdlVGV4dCA9IFN0cmluZyh0aGF0KS5zcGxpdCgnOiAnKTsKICAgIGNvbnN0IF9uYW1lID0gX21lc3NhZ2VUZXh0LnNoaWZ0KCk7CgogICAgaWYgKCF0aGF0LmluY2x1ZGVzKCc6ICcpKSB7CiAgICAgICAgYm90VGFncyA9IHsKICAgICAgICAgICAgc3BhY2U6ICJ0ZW1wTG9jYWwiLAogICAgICAgICAgICBuYW1lOiAiIiwKICAgICAgICAgICAgbWVzc2FnZTogdGhhdCwKICAgICAgICAgICAgYWJJZ25vcmU6IHRydWUsCiAgICAgICAgICAgIGNvbnNvbGVMb2dNZXNzYWdlQm90OiB0cnVlLAogICAgICAgICAgICB0aW1lc3RhbXA6IF90aW1lc3RhbXAsCiAgICAgICAgICAgIGNsZWFyQ29uc29sZUxvZ0JvdHM6ICJAZGVzdHJveSh0aGlzKSIKICAgICAgICB9CiAgICB9IGVsc2UgewogICAgICAgIGJvdFRhZ3MgPSB7CiAgICAgICAgICAgIHNwYWNlOiAidGVtcExvY2FsIiwKICAgICAgICAgICAgbmFtZTogX25hbWUsCiAgICAgICAgICAgIG1lc3NhZ2U6IF9tZXNzYWdlVGV4dC5qb2luKCc6ICcpLAogICAgICAgICAgICBhYklnbm9yZTogdHJ1ZSwKICAgICAgICAgICAgY29uc29sZUxvZ01lc3NhZ2VCb3Q6IHRydWUsCiAgICAgICAgICAgIHRpbWVzdGFtcDogX3RpbWVzdGFtcCwKICAgICAgICAgICAgY2xlYXJDb25zb2xlTG9nQm90czogIkBkZXN0cm95KHRoaXMpIgogICAgICAgIH0KICAgIH0KCn0gZWxzZSB7CiAgICBib3RUYWdzID0gewogICAgICAgIHNwYWNlOiAidGVtcExvY2FsIiwKICAgICAgICBhYklnbm9yZTogdHJ1ZSwKICAgICAgICBjb25zb2xlTG9nTWVzc2FnZUJvdDogdHJ1ZSwKICAgICAgICB0aW1lc3RhbXA6IF90aW1lc3RhbXAsCiAgICAgICAgY2xlYXJDb25zb2xlTG9nQm90czogIkBkZXN0cm95KHRoaXMpIiwKICAgICAgICAuLi50aGF0CiAgICB9Cn0KCmNvbnN0IGxvZ0JvdCA9IGNyZWF0ZShib3RUYWdzKTsKCmlmICh0aGlzQm90LnZhcnMudXBkYXRlTG9nKSB0aGlzQm90LnZhcnMudXBkYXRlTG9nKCk7JwD0kNPJBLkXC3Nob3dDb25zb2xlAgQA9JDTyQTPW+0DQGlmIChtYXNrcy5vcGVuKSB7IHJldHVybiB9OwoKY29uZmlnQm90Lm1hc2tzLnRhZ1BvcnRhbCA9IG51bGw7CmNvbmZpZ0JvdC5tYXNrcy50YWdQb3J0YWxTcGFjZSA9IG51bGw7CgovLyBVbnJlZ2lzdGVyIGluIGNhc2UgaXQgd2FzIGFscmVhZHkgb3Blbgp2YXIgY3VycmVudFZlciA9IG1hc2tzLmNvbnNvbGVWZXJzaW9uID8/IDA7CmF3YWl0IG9zLnVucmVnaXN0ZXJBcHAoYGFiLWNvbnNvbGUtJHtjdXJyZW50VmVyfWApOwoKY3VycmVudFZlciArPSAxOwptYXNrcy5jb25zb2xlVmVyc2lvbiA9IGN1cnJlbnRWZXI7Ci8vIEdldCwgcmVnaXN0ZXIsIGFuZCBjb21waWxlIHRoZSBhcHAKY29uc3QgQXBwID0gdGhpc0JvdC5nZXRBcHAoKTsKYXdhaXQgb3MucmVnaXN0ZXJBcHAoYGFiLWNvbnNvbGUtJHtjdXJyZW50VmVyfWAsIHRoaXNCb3QpOwpvcy5jb21waWxlQXBwKGBhYi1jb25zb2xlLSR7Y3VycmVudFZlcn1gLCA8QXBwIC8+KTsKbWFza3Mub3BlbiA9IHRydWU7CicA9JDTyQS5FwZzeXN0ZW0CBAD0kNPJBL1fEGFiLnNoZWxsLmNvbnNvbGUnAPSQ08kEuRcNdG9nZ2xlQ29uc29sZQIEAPSQ08kEzl+WAUBpZiAobWFza3Mub3BlbikgewogICAgd2hpc3Blcih0aGlzQm90LCAiaGlkZUNvbnNvbGUiKTsKICAgIG1hc2tzLm9wZW4gPSBmYWxzZTsKfSBlbHNlIHsKICAgIHdoaXNwZXIodGhpc0JvdCwgInNob3dDb25zb2xlIik7CiAgICBtYXNrcy5vcGVuID0gdHJ1ZTsKfScA9JDTyQS5FwRmb3JtAgQA9JDTyQTlYAdub3RoaW5nJwD0kNPJBLkXB2FiU2hlbGwCBAD0kNPJBO1gBHRydWUnAPSQ08kEuRcKYWJJRE9yaWdpbgIEAPSQ08kE8mAVYWJDb25zb2xlIHVwZGF0ZSA3LTE2JwD0kNPJBLkXBlRvcEJhcgIEAPSQ08kEiGHzBEBjb25zdCBvZmZzZXQgPSA4CmNvbnN0IGluaXRpYWxIZWlnaHQgPSAyNTYKY29uc3QgZHJhZ0ludGVydmFsID0gMjUKCmNvbnN0IEJ1dHRvbnNCYXIgPSAoKSA9PiB7CgogICAgY29uc3QgaGFuZGxlQ2xvc2UgPSAoKSA9PiB7CiAgICAgICAgc2hvdXQoJ2hpZGVDb25zb2xlJyk7CiAgICB9CgogICAgcmV0dXJuICg8PgogICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3NOYW1lPSJhYi1jb25zb2xlLXRvcC1iYXIiCiAgICAgICAgPgoKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3NOYW1lPSJhYi1jb25zb2xlLWJ0biBtZC1pY29uIG1kLWljb24tZm9udCIKICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsb3NlfQogICAgICAgICAgICAgICAgc3R5bGU9e3sKICAgICAgICAgICAgICAgICAgICB0b3A6ICI4cHgiLAogICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAiOHB4IiwKICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IDIsCiAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBjbG9zZQogICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICA8Lz4pCn0KCnJldHVybiBCdXR0b25zQmFyCicA9JDTyQS5Fw1zaG93Q2hhdElucHV0AgQA9JDTyQT8ZQVmYWxzZScA9JDTyQS5FwpzaG93VG9wQmFyAgQA9JDTyQSCZgVmYWxzZScA9JDTyQS5FwlhYlZlcnNpb24CBAD0kNPJBIhmBDEwLjUnAPSQ08kEuRcSc2V0QWJFeHBhbmRDb25zb2xlAgQA9JDTyQSNZpcCQGNvbnNvbGUubG9nKHRoaXNCb3QudmFycy5zZXRTaG93QWxsKQppZiAodHlwZW9mIHRoaXNCb3QudmFycy5zZXRTaG93QWxsICE9PSAnZnVuY3Rpb24nKSB7CiAgICByZXR1cm47Cn0KCmlmICh0aGF0ID09PSB1bmRlZmluZWQpIHsKICAgIHRoaXNCb3QudmFycy5zZXRTaG93QWxsKHMgPT4gIXMpOwp9IGVsc2UgaWYgKHRoYXQgPT0gdHJ1ZSkgewogICAgdGhpc0JvdC52YXJzLnNldFNob3dBbGwodHJ1ZSk7Cn0gZWxzZSB7CiAgICB0aGlzQm90LnZhcnMuc2V0U2hvd0FsbChmYWxzZSk7Cn0KJwD0kNPJBLkXCGFiSWdub3JlAgQA9JDTyQSlaAR0cnVlJwD0kNPJBLkXB01lc3NhZ2UCBAD0kNPJBKpo5xBAY29uc3QgeyB1c2VTdGF0ZSwgdXNlTWVtbywgdXNlRWZmZWN0IH0gPSBvcy5hcHBIb29rcwpjb25zdCBUb3BCYXIgPSB0aGlzQm90LlRvcEJhcigpCgpjb25zdCBNZXNzYWdlID0gKHsgdGltZXN0YW1wLCBtZXNzYWdlLCBuYW1lIH0pID0+IHsKICAgIGNvbnN0IFtzaG93VGltZSwgc2V0U2hvd1RpbWVdID0gdXNlU3RhdGUoZmFsc2UpOwogICAgY29uc3QgW3VzZXJNZXNzYWdlLCBzZXRVc2VyTWVzc2FnZV0gPSB1c2VTdGF0ZShmYWxzZSk7CgogICAgdXNlRWZmZWN0KCgpID0+IHsKICAgICAgICBpZiAoYXV0aEJvdCAmJiBhdXRoQm90LnRhZ3MubmFtZSkgewogICAgICAgICAgICBpZiAoYXV0aEJvdC50YWdzLm5hbWUgPT0gbmFtZSkgewogICAgICAgICAgICAgICAgc2V0VXNlck1lc3NhZ2UodHJ1ZSk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAobWFza3MucHJlZmVycmVkTmFtZSkgewogICAgICAgICAgICAgICAgaWYgKG1hc2tzLnByZWZlcnJlZE5hbWUgPT0gbmFtZSkgewogICAgICAgICAgICAgICAgICAgIHNldFVzZXJNZXNzYWdlKHRydWUpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0gCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChuYW1lID09ICJ1c2VyIiB8fCBuYW1lID09ICJVc2VyIikgewogICAgICAgICAgICBzZXRVc2VyTWVzc2FnZSh0cnVlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzZXRVc2VyTWVzc2FnZShmYWxzZSk7CiAgICAgICAgfQoKICAgIH0sIFtuYW1lXSkKCiAgICBjb25zdCB0aW1lVGV4dCA9IHVzZU1lbW8oCiAgICAgICAgKCkgPT4gewogICAgICAgICAgICBpZiAoIXRpbWVzdGFtcCkgeyByZXR1cm4gfQogICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wKS50b0xvY2FsZVN0cmluZygKICAgICAgICAgICAgICAgICAgICdlbi11cycsIHt0aW1lU3R5bGU6ICdtZWRpdW0nfSl9LAogICAgICAgIFt0aW1lc3RhbXBdCiAgICApOwoKICAgIGlmICghdGltZXN0YW1wIHx8ICFtZXNzYWdlKSB7IHJldHVybiA8PjwvPiB9CgogICAgcmV0dXJuICgKICAgICAgICA8ZGl2CiAgICAgICAgICAgIGNsYXNzTmFtZT0iYWItY29uc29sZS1tZXNzYWdlLWNvbnRhaW5lciIKICAgICAgICAgICAgb25Qb2ludGVyRW50ZXI9eygpID0+IHNldFNob3dUaW1lKHRydWUpfQogICAgICAgICAgICBvblBvaW50ZXJMZWF2ZT17KCkgPT4gc2V0U2hvd1RpbWUoZmFsc2UpfQogICAgICAgID4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgc3R5bGU9e3VzZXJNZXNzYWdlICYmIHt0ZXh0QWxpZ246ICdyaWdodCd9fQogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICB7bmFtZX0KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSJhYi1jb25zb2xlLW1lc3NhZ2UiIHN0eWxlPXt7CiAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiB1c2VyTWVzc2FnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncm93JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAncm93LXJldmVyc2UnCiAgICAgICAgICAgIH19PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9ImFiLWNvbnNvbGUtc3BhY2VyIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7CiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogdXNlck1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdyaWdodCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdsZWZ0JywKICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogc2hvd1RpbWUgPyAwLjYgOiAwCiAgICAgICAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICB7dGltZVRleHR9CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSJhYi1jb25zb2xlLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgIHttZXNzYWdlfQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgKQp9CgpyZXR1cm4gTWVzc2FnZTsnAPSQ08kEuRcQb25BbnlCb3RzUmVtb3ZlZAIEAPSQ08kEknmtAkBjb25zdCB7IGJvdElEcyB9ID0gdGhhdDsNCg0KZm9yIChjb25zdCBib3RJZCBvZiBib3RJRHMpIHsNCiAgICBpZiAodGhpc0JvdC52YXJzLm1lc3NhZ2VCb3RJZHMpIHsNCiAgICAgICAgY29uc3QgZGVsZXRlZCA9IHRoaXNCb3QudmFycy5tZXNzYWdlQm90SWRzLmRlbGV0ZShib3RJZCk7DQoNCiAgICAgICAgaWYgKGRlbGV0ZWQpIHsNCiAgICAgICAgICAgIHNob3V0KCdvbkFCQ29uc29sZUxvZ01lc3NhZ2VCb3RSZW1vdmVkJywgeyBjb25zb2xlTG9nTWVzc2FnZUJvdElkOiBib3RJZCB9KTsNCiAgICAgICAgfQ0KICAgIH0NCn0nAPSQ08kEuRcOb25BbnlCb3RzQWRkZWQCBAD0kNPJBMB7+ANAY29uc3QgeyBib3RzIH0gPSB0aGF0Ow0KDQpmb3IgKGNvbnN0IG5ld0JvdCBvZiBib3RzKSB7DQogICAgaWYgKG5ld0JvdC50YWdzLmNvbnNvbGVMb2dNZXNzYWdlQm90ID09PSB0cnVlKSB7DQogICAgICAgIC8vIEluaXQgbWVzc2FnZSBib3QgaWQgdHJhY2tpbmcgc2V0IGlmIG5lZWRlZC4NCiAgICAgICAgaWYgKCF0aGlzQm90LnZhcnMubWVzc2FnZUJvdElkcykgew0KICAgICAgICAgICAgdGhpc0JvdC52YXJzLm1lc3NhZ2VCb3RJZHMgPSBuZXcgU2V0KCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoIXRoaXNCb3QudmFycy5tZXNzYWdlQm90SWRzLmhhcyhuZXdCb3QuaWQpKSB7DQogICAgICAgICAgICB0aGlzQm90LnZhcnMubWVzc2FnZUJvdElkcy5hZGQobmV3Qm90LmlkKTsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgc2hvdXQoJ29uQUJDb25zb2xlTG9nTWVzc2FnZUJvdEFkZGVkJywgeyBjb25zb2xlTG9nTWVzc2FnZUJvdDogbmV3Qm90IH0pOw0KICAgIH0NCn0nAPSQ08kEuRcQb25BbnlCb3RzQ2hhbmdlZAIEAPSQ08kEuX/jBUBjb25zdCBib3RzID0gdGhhdDsNCg0KZm9yIChjb25zdCBib3Qgb2YgYm90cykgew0KICAgIGlmIChib3QuYm90LnRhZ3MuY29uc29sZUxvZ01lc3NhZ2VCb3QgPT09IHRydWUpIHsNCiAgICAgICAgLy8gSW5pdCBtZXNzYWdlIGJvdCBpZCB0cmFja2luZyBzZXQgaWYgbmVlZGVkLg0KICAgICAgICBpZiAoIXRoaXNCb3QudmFycy5tZXNzYWdlQm90SWRzKSB7DQogICAgICAgICAgICB0aGlzQm90LnZhcnMubWVzc2FnZUJvdElkcyA9IG5ldyBTZXQoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghdGhpc0JvdC52YXJzLm1lc3NhZ2VCb3RJZHMuaGFzKGJvdC5ib3QuaWQpKSB7DQogICAgICAgICAgICB0aGlzQm90LnZhcnMubWVzc2FnZUJvdElkcy5hZGQoYm90LmJvdC5pZCk7DQoNCiAgICAgICAgICAgIHNob3V0KCdvbkFCQ29uc29sZUxvZ01lc3NhZ2VCb3RBZGRlZCcsIHsgY29uc29sZUxvZ01lc3NhZ2VCb3Q6IGJvdC5ib3QgfSk7DQogICAgICAgIH0gDQoNCiAgICAgICAgaWYgKGJvdC50YWdzLmluY2x1ZGVzKCJtZXNzYWdlIikgfHwgYm90LnRhZ3MuaW5jbHVkZXMoIm5hbWUiKSB8fCBib3QudGFncy5pbmNsdWRlcygidGltZXN0YW1wIikgfHwgYm90LnRhZ3MuaW5jbHVkZXMoImNvbnNvbGVMb2dNZXNzYWdlQm90IikpIHsNCiAgICAgICAgICAgIGlmICh0aGlzQm90LnZhcnMudXBkYXRlTG9nKSB0aGlzQm90LnZhcnMudXBkYXRlTG9nKCk7ICAgICAgICANCiAgICAgICAgfQ0KICAgIH0NCn0nAPSQ08kEuRcfb25BQkNvbnNvbGVMb2dNZXNzYWdlQm90UmVtb3ZlZAIEAPSQ08kEnYUBNkBpZiAodGhpc0JvdC52YXJzLnVwZGF0ZUxvZykgdGhpc0JvdC52YXJzLnVwZGF0ZUxvZygpOycA9JDTyQS5Fx1vbkFCQ29uc29sZUxvZ01lc3NhZ2VCb3RBZGRlZAIEAPSQ08kE1IUBNkBpZiAodGhpc0JvdC52YXJzLnVwZGF0ZUxvZykgdGhpc0JvdC52YXJzLnVwZGF0ZUxvZygpOycBBGJvdHMkMjRkYzA0MzEtZmZiYi00NDhkLWFhNzUtOTcxYmFhMDcxOGRjAScA9JDTyQSLhgEGc3lzdGVtAgQA9JDTyQSMhgENYWIuc2hlbGwuaGVscCcA9JDTyQSLhgEJb25LZXlEb3duAgQA9JDTyQSahgGMAkBpZiAodGFncy5oZWxwQWN0aXZlICYmIHRoYXQua2V5cy5pbmNsdWRlcygnRXNjYXBlJykpIHsKICAgIGlmICh0aGlzQm90LnZhcnMub25Fc2NhcGVLZXlQcmVzcykgewogICAgICAgIGZvciAobGV0IGNhbGxiYWNrIG9mIHRoaXNCb3QudmFycy5vbkVzY2FwZUtleVByZXNzKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0nAPSQ08kEi4YBB3VubW91bnQCBAD0kNPJBKeIAaABQGF3YWl0IG9zLmNvbXBpbGVBcHAoJ2FiLWNvbW1hbmQtaGVscCcsIDw+PC8+KTsKYXdhaXQgb3MudW5yZWdpc3RlckFwcCgnYWItY29tbWFuZC1oZWxwJyk7Cgp0aGlzQm90LnZhcnMub25Fc2NhcGVLZXlQcmVzcyA9IHVuZGVmaW5lZDsKbWFza3MuaGVscEFjdGl2ZSA9IGZhbHNlOycA9JDTyQSLhgEJc3R5bGUuY3NzAgQA9JDTyQTIiQHxBy5oZWxwLXRhYmxlIHsKICB3aWR0aDogMTAwJTsKICBib3JkZXItc3BhY2luZzogMDsKfQoKLmhlbHAtdGFibGUgdGQgewogIHZlcnRpY2FsLWFsaWduOiB0b3A7CiAgcGFkZGluZy1ib3R0b206IDhweDsKICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7Cn0KCi5oZWxwLXRhYmxlIHRkIGgzIHsKICBtYXJnaW46IDA7Cn0KCi5oZWxwLXRhYmxlIHRkOmZpcnN0LWNoaWxkIHsKICBtaW4td2lkdGg6IDkwcHg7CiAgcGFkZGluZy1yaWdodDogOHB4Owp9Cgouc2VjdGlvbiB7CiAgbWFyZ2luLXRvcDogMTZweDsKfQoKLnNlY3Rpb24gcDpmaXJzdC1vZi10eXBlIHsKICBtYXJnaW4tdG9wOiA0cHg7CiAgbWFyZ2luLWxlZnQ6IDE2cHg7Cn0KCi5kZXNjcmlwdGlvbiB7IAogIHdoaXRlLXNwYWNlOiBwcmUtbGluZTsKfQoKLnVzYWdlLXRhYmxlIHsKICBib3JkZXItc3BhY2luZzogMDsKfQoKLnVzYWdlLXRhYmxlIHRkLGgzIHsgCiAgdmVydGljYWwtYWxpZ246IHRvcDsKICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7CiAgbWFyZ2luOiAwOwp9CgoudXNhZ2UtdGFibGUgdGQ6Zmlyc3QtY2hpbGQgewogIG1pbi13aWR0aDogNjBweDsKfQoKLmFyZ3MtdGFibGUgewogIG1hcmdpbi1sZWZ0OiAxNnB4Owp9CgouYXJncy10YWJsZSB0ZCB7CiAgdmVydGljYWwtYWxpZ246IHRvcDsKICBwYWRkaW5nLWJvdHRvbTogOHB4OwogIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsKfQoKLmFyZ3MtdGFibGUgdGQ6Zmlyc3QtY2hpbGQgewogIG1pbi13aWR0aDogOTBweDsKICBwYWRkaW5nLXJpZ2h0OiA4cHg7Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiA2NDBweCksIChtYXgtaGVpZ2h0OiA2MDBweCkgewogIC5oZWxwLXdpbmRvdyB7CiAgICB3aWR0aDogMTAwJTsKICAgIGhlaWdodDogMTAwJTsKICAgIGxlZnQ6IHVuc2V0OwogICAgdG9wOiB1bnNldDsKICAgIHRyYW5zZm9ybTogdW5zZXQ7CiAgICBtYXgtd2lkdGg6IHVuc2V0OwogICAgbWF4LWhlaWdodDogdW5zZXQ7CiAgICBib3gtc2hhZG93OiB1bnNldDsKICB9Cn0nAPSQ08kEi4YBCW9uRGVzdHJveQIEAPSQ08kEupEBE0B0aGlzQm90LnVubW91bnQoKTsnAPSQ08kEi4YBBW1vdW50AgQA9JDTyQTOkQGTA0Bjb25zdCB7CiAgICBhYkNvbW1hbmRzTWFuYWdlciwKICAgIHNlbGVjdGVkQ29tbWFuZAp9ID0gdGhhdCA/PyB7fTsKCmlmIChtYXNrcy5oZWxwQWN0aXZlKSB7CiAgICBhd2FpdCB0aGlzQm90LnVubW91bnQoKTsKfQoKY29uc3QgSGVscEFwcCA9IHRoaXNCb3QuSGVscEFwcCgpOwoKYXdhaXQgb3MucmVnaXN0ZXJBcHAoJ2FiLWNvbW1hbmQtaGVscCcsIHRoaXNCb3QpOwphd2FpdCBvcy5jb21waWxlQXBwKCdhYi1jb21tYW5kLWhlbHAnLCA8SGVscEFwcCBjb21tYW5kcz17YWJDb21tYW5kc01hbmFnZXIuY29tbWFuZHN9IGluaXRpYWxTZWxlY3RlZENvbW1hbmQ9e3NlbGVjdGVkQ29tbWFuZH0vPik7Cgp0aGlzQm90LnZhcnMub25Fc2NhcGVLZXlQcmVzcyA9IFtdOwptYXNrcy5oZWxwQWN0aXZlID0gdHJ1ZTsnAPSQ08kEi4YBB0hlbHBBcHACBAD0kNPJBOKUAbovQGNvbnN0IEFwcENvbnRhaW5lciA9IGxpbmtzLmNvbXBvbmVudHMuQXBwQ29udGFpbmVyKCk7CmNvbnN0IFdpbmRvdyA9IGxpbmtzLmNvbXBvbmVudHMuV2luZG93KCk7CmNvbnN0IFRleHRMaW5rID0gbGlua3MuY29tcG9uZW50cy5UZXh0TGluaygpOwpjb25zdCBjc3MgPSBsaW5rcy51dGlscy5hYkNvbXBpbGVDU1MoWyB0aGlzQm90LCBsaW5rcy5jb21wb25lbnRzIF0pOwoKY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VNZW1vIH0gPSBvcy5hcHBIb29rczsKCi8qKgogKiBAcGFyYW0ge09iamVjdH0gcHJvcHMKICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgQ29tbWFuZD59IHByb3BzLmNvbW1hbmRzCiAqLwpjb25zdCBBdmFpbGFibGVDb21tYW5kcyA9ICh7IGNvbW1hbmRzLCBvbkNvbW1hbmRDbGljayB9KSA9PiB7CiAgICBjb25zdCBjb21tYW5kTmFtZXMgPSBPYmplY3Qua2V5cyhjb21tYW5kcykuc29ydCgpOwoKICAgIGNvbnN0IG9uQ2xvc2UgPSB1c2VDYWxsYmFjaygoKSA9PiB7CiAgICAgICAgdGhpc0JvdC51bm1vdW50KCk7CiAgICB9LCBbXSk7CiAgICAKICAgIHJldHVybiAoCiAgICAgICAgPD4KICAgICAgICAgICAgPHA+PFRleHRMaW5rIG9uQ2xpY2s9e29uQ2xvc2V9PnsneCBDbG9zZSd9PC9UZXh0TGluaz48L3A+CiAgICAgICAgICAgIDxoMj5BdmFpbGFibGUgQ29tbWFuZHM8L2gyPgogICAgICAgICAgICA8cD5Vc2FnZTogLmNvbW1hbmQgW29wdGlvbnNdPC9wPgogICAgICAgICAgICA8YnIvPgogICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPSdoZWxwLXRhYmxlJz4KICAgICAgICAgICAgICAgIHtjb21tYW5kTmFtZXMubWFwKChuYW1lKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IGNvbW1hbmRzW25hbWVdOwoKICAgICAgICAgICAgICAgICAgICBsZXQgZGVzY3JpcHRpb24gPSBudWxsOwoKICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWFuZC5oZWxwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21tYW5kLmhlbHAuc2hvcnREZXNjcmlwdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBjb21tYW5kLmhlbHAuc2hvcnREZXNjcmlwdGlvbjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICByZXR1cm4gKAogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PFRleHRMaW5rIG9uQ2xpY2s9eygpID0+IG9uQ29tbWFuZENsaWNrKGNvbW1hbmQubmFtZSl9Pntjb21tYW5kLm5hbWV9PC9UZXh0TGluaz48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPntkZXNjcmlwdGlvbn08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIH0pfQogICAgICAgICAgICA8L3RhYmxlPgogICAgICAgIDwvPgogICAgKQp9CgovKioKICogQHBhcmFtIHtPYmplY3R9IHByb3BzCiAqIEBwYXJhbSB7Q29tbWFuZH0gcHJvcHMuY29tbWFuZAogKi8KY29uc3QgU3BlY2lmaWNDb21tYW5kID0gKHsgY29tbWFuZCwgb25CYWNrIH0pID0+IHsKICAgIGxldCB1c2FnZSA9ICcnOwogICAgbGV0IGRlc2NyaXB0aW9uID0gbnVsbDsKICAgIGxldCBhcmdzID0gbnVsbDsKCiAgICBpZiAoY29tbWFuZC5oZWxwKSB7CiAgICAgICAgaWYgKGNvbW1hbmQuaGVscC51c2FnZSkgewogICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb21tYW5kLmhlbHAudXNhZ2UpKSB7CiAgICAgICAgICAgICAgICB1c2FnZSA9IGNvbW1hbmQuaGVscC51c2FnZS5qb2luKCdcbicpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdXNhZ2UgPSBjb21tYW5kLmhlbHAudXNhZ2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChjb21tYW5kLmhlbHAubG9uZ0Rlc2NyaXB0aW9uKSB7CiAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gY29tbWFuZC5oZWxwLmxvbmdEZXNjcmlwdGlvbjsKICAgICAgICB9IGVsc2UgaWYgKGNvbW1hbmQuaGVscC5zaG9ydERlc2NyaXB0aW9uKSB7CiAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gY29tbWFuZC5oZWxwLnNob3J0RGVzY3JpcHRpb247CiAgICAgICAgfQoKICAgICAgICBpZiAoY29tbWFuZC5oZWxwLmFyZ3MgJiYgY29tbWFuZC5oZWxwLmFyZ3MubGVuZ3RoID4gMCkgewogICAgICAgICAgICBhcmdzID0gY29tbWFuZC5oZWxwLmFyZ3M7CiAgICAgICAgfQogICAgfQogICAgCiAgICByZXR1cm4gKAogICAgICAgIDw+ICAKICAgICAgICAgICAgPHA+PFRleHRMaW5rIG9uQ2xpY2s9e29uQmFja30+eyc8IEJhY2snfTwvVGV4dExpbms+PC9wPgogICAgICAgICAgICA8aDI+e2NvbW1hbmQubmFtZX08L2gyPgogICAgICAgICAgICB7IHVzYWdlICYmCiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPSd1c2FnZS10YWJsZSc+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGgzPlVzYWdlOjwvaDM+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt1c2FnZX08L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICB9CiAgICAgICAgICAgIHsgZGVzY3JpcHRpb24gJiYgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nc2VjdGlvbic+CiAgICAgICAgICAgICAgICAgICAgPGgzPkRlc2NyaXB0aW9uOjwvaDM+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSdkZXNjcmlwdGlvbic+e2Rlc2NyaXB0aW9ufTwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICB9CiAgICAgICAgICAgIHsgYXJncyAmJgogICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3NlY3Rpb24nPgogICAgICAgICAgICAgICAgICAgIDxoMz5Bcmd1bWVudHM6PC9oMz4KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPSdhcmdzLXRhYmxlJz4KICAgICAgICAgICAgICAgICAgICAgICAgeyBhcmdzLm1hcCgoYXJnKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFyZy5pZGVudGlmaWVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhcmdJZGVudGlmaWVyRGlzcGxheSA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXJnRGVzY3JpcHRpb25EaXNwbGF5ID0gbnVsbDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcuaWRlbnRpZmllcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdJZGVudGlmaWVyRGlzcGxheSA9IGFyZy5pZGVudGlmaWVyLmpvaW4oJyxcbicpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdJZGVudGlmaWVyRGlzcGxheSA9IGFyZy5pZGVudGlmaWVyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmcuZGVzY3JpcHRpb24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdEZXNjcmlwdGlvbkRpc3BsYXkgPSBhcmcuZGVzY3JpcHRpb247CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57YXJnSWRlbnRpZmllckRpc3BsYXkgPz8gJyd9PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnthcmdEZXNjcmlwdGlvbkRpc3BsYXkgPz8gJyd9PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB9KX0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIH0KICAgICAgICAgICAgPGJyLz4KICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT0naGVscC10YWJsZSc+CiAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgPC8+CiAgICApCn0KCi8qKgogKiBAcGFyYW0ge09iamVjdH0gcHJvcHMKICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgQ29tbWFuZD59IHByb3BzLmNvbW1hbmRzCiAqIEBwYXJhbSB7YW55W119IFtwcm9wcy5hcmdzXQogKi8KY29uc3QgSGVscEFwcCA9ICh7IGNvbW1hbmRzLCBpbml0aWFsU2VsZWN0ZWRDb21tYW5kIH0pID0+IHsKICAgIGNvbnN0IFsgc2VsZWN0ZWRDb21tYW5kLCBzZXRTZWxlY3RlZENvbW1hbmQgXSA9IHVzZVN0YXRlKGluaXRpYWxTZWxlY3RlZENvbW1hbmQpOwoKICAgIC8vIEVzY2FwZSBrZXkgcHJlc3MgZXZlbnQgaGFuZGxlcgogICAgdXNlRWZmZWN0KCgpID0+IHsKICAgICAgICBjb25zdCBvbkVzY2FwZUtleVByZXNzID0gKCkgPT4gewogICAgICAgICAgICBpZiAoc2VsZWN0ZWRDb21tYW5kICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHNldFNlbGVjdGVkQ29tbWFuZChudWxsKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXNCb3QudW5tb3VudCgpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB0aGlzQm90LnZhcnMub25Fc2NhcGVLZXlQcmVzcy5wdXNoKG9uRXNjYXBlS2V5UHJlc3MpOwoKICAgICAgICByZXR1cm4gKCkgPT4gewogICAgICAgICAgICBjb25zdCBjYWxsYmFja0luZGV4ID0gdGhpc0JvdC52YXJzLm9uRXNjYXBlS2V5UHJlc3MuZmluZEluZGV4KChjYWxsYmFjaykgPT4gY2FsbGJhY2sgPT09IG9uRXNjYXBlS2V5UHJlc3MpOwogICAgICAgICAgICBpZiAoY2FsbGJhY2tJbmRleCA+PSAwKSB7CiAgICAgICAgICAgICAgICB0aGlzQm90LnZhcnMub25Fc2NhcGVLZXlQcmVzcy5zcGxpY2UoY2FsbGJhY2tJbmRleCwgMSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LCBbc2VsZWN0ZWRDb21tYW5kXSk7CiAgICAKICAgIGNvbnN0IG9uQmFja2dyb3VuZENsaWNrID0gdXNlQ2FsbGJhY2soKCkgPT4gewogICAgICAgIHRoaXNCb3QudW5tb3VudCgpOwogICAgfSwgW10pOwoKICAgIGNvbnN0IG9uQ29tbWFuZENsaWNrID0gdXNlQ2FsbGJhY2soKG5hbWUpID0+IHsKICAgICAgICBzZXRTZWxlY3RlZENvbW1hbmQobmFtZSk7CiAgICB9LCBbc2V0U2VsZWN0ZWRDb21tYW5kXSkKCiAgICBjb25zdCBjb250ZW50ID0gdXNlTWVtbygoKSA9PiB7CiAgICAgICAgaWYgKCFzZWxlY3RlZENvbW1hbmQpIHsKICAgICAgICAgICAgcmV0dXJuIDxBdmFpbGFibGVDb21tYW5kcyBjb21tYW5kcz17Y29tbWFuZHN9IG9uQ29tbWFuZENsaWNrPXtvbkNvbW1hbmRDbGlja30vPgogICAgICAgIH0gZWxzZSB7IAogICAgICAgICAgICByZXR1cm4gPFNwZWNpZmljQ29tbWFuZCBjb21tYW5kPXtjb21tYW5kc1tzZWxlY3RlZENvbW1hbmRdfSBvbkJhY2s9eygpID0+IHNldFNlbGVjdGVkQ29tbWFuZChudWxsKX0vPgogICAgICAgIH0KICAgIH0sIFtjb21tYW5kcywgc2VsZWN0ZWRDb21tYW5kLCBzZXRTZWxlY3RlZENvbW1hbmRdKTsKCiAgICByZXR1cm4gKAogICAgICAgIDw+CiAgICAgICAgICAgIDxzdHlsZT57Y3NzfTwvc3R5bGU+CgogICAgICAgICAgICA8QXBwQ29udGFpbmVyIG9uQmFja2dyb3VuZENsaWNrPXtvbkJhY2tncm91bmRDbGlja30+CiAgICAgICAgICAgICAgICA8V2luZG93PgogICAgICAgICAgICAgICAgICAgIHtjb250ZW50fQogICAgICAgICAgICAgICAgPC9XaW5kb3c+CiAgICAgICAgICAgIDwvQXBwQ29udGFpbmVyPgogICAgICAgIDwvPgogICAgKQp9CgpyZXR1cm4gSGVscEFwcDsnAPSQ08kEi4YBCmNvbXBvbmVudHMCBAD0kNPJBJ3EASjwn5SXMTFjOTVjN2QtYTE5My00MDBlLWI3MTAtM2JhMDQ4NmE2YTFhJwD0kNPJBIuGAQV1dGlscwIEAPSQ08kExMQBKPCflJc5M2Q5NjVlMC1kMjBlLTRiNDUtOGNhMC02NDkyNzNiNzEzOGMnAPSQ08kEi4YBCGFiSWdub3JlAgQA9JDTyQTrxAEEdHJ1ZScA9JDTyQSLhgEHYWJTaGVsbAIEAPSQ08kE8MQBBHRydWUnAPSQ08kEi4YBCWFiVmVyc2lvbgIEAPSQ08kE9cQBBDEwLjUnAQRib3RzJDM0YzNjMjEwLTViZjEtNDljZi1iMTUxLWVlMmQwN2YwZTY3MwEnAPSQ08kE+sQBBnN5c3RlbQIEAPSQ08kE+8QBD2FiLnNoZWxsLmNyZWF0ZScA9JDTyQT6xAEEZm9ybQIEAPSQ08kEi8UBB25vdGhpbmcnAPSQ08kE+sQBC2Rlc2NyaXB0aW9uAgQA9JDTyQSTxQE9Qm90IHVzZWQgdG8gY3JlYXRlL21hbmlmZXN0IGJvdHMgaW50byBhbiBhY3R1YWwgc2NlbmUvcG9ydGFsLicA9JDTyQT6xAEMYWJDcmVhdGVCb3RzAgQA9JDTyQTRxQGkJ0BsZXQgeyAKICAgIGluaXRpYWxCb290LCAvLyBjaGVja3MgZm9yIGluaXRpYWwgYm9vdCBib29sZWFuIChvcHRpb25hbCkKICAgIGJvdERhdGEsIC8vIGJvdHMgdG8gYmUgZ2VuZXJhdGVkCiAgICBvcmlnaW4sIC8vIHdoZXJlIGRpZCB0aGUgZGF0YSBjb21lIGZyb20gKG9wdGlvbmFsKQogICAgc3R1ZGlvLCAvLyB3aGF0IHN0dWRpbyBpcyB0aGlzIGRhdGEgZnJvbSAob3B0aW9uYWwpCiAgICByZWNvcmQsIC8vIFJ5YW4gQ29vazogZG8gd2UgbmVlZCB0aGlzIGlmIHdlIGFscmVhZHkgaGF2ZSBzdHVkaW8/IChvcHRpb25hbCkKICAgIHZlcnNpb24sIC8vIHZlcnNpb24gb2YgdGhlIGRhdGEgKG9wdGlvbmFsKQogICAgZWdnUGFyYW1ldGVycywgLy8gZGF0YSB0byBwYXNzIHRvIGFsbCBjcmVhdGVkIGJvdHMgdmlhIEBvbkVnZ0hhdGNoLiAob3B0aW9uYWwpCiAgICBpZ25vcmVHcmlkRm9jdXMsIC8vIFJ5YW4gQ29vazogYWRkaW5nIHRoaXMgYXMgYW4gb3B0aW9uYWwgZmxhZy4gKG9wdGlvbmFsKQogICAgb25QcmVwcm9jZXNzQm90RGF0YSwgLy8gY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBwcmVwcm9jZXNzIHRoZSBib3QgZGF0YSBiZWZvcmUgdGhlIGJvdHMgYXJlIGNyZWF0ZWQuIChvcHRpb25hbCkKICAgIHNvdXJjZUV2ZW50LCAvLyBzb3VyY2VFdmVudCBpcyBhbiBldmVudCBuYW1lIHRoYXQgc3ltYm9saXplcyB3aGF0IHRyaWdnZXJlZCB0aGlzIGNhbGwgdG8gYWJDcmVhdGVCb3RzLiAob3B0aW9uYWwpLgp9ID0gdGhhdDsKCi8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGZvciB3aGVuIGFiQ3JlYXRlQm90cyBleHBlY3RlZCAiYm90cyIgcGFyYW1ldGVyLgppZiAoIWJvdERhdGEgJiYgdGhhdC5ib3RzKSB7CiAgICBib3REYXRhID0gdGhhdC5ib3RzOwp9CgpsZXQgYm90Q291bnQgPSBPYmplY3Qua2V5cyhib3REYXRhKS5sZW5ndGg7CmNvbnN0IGFiR3JpZEZvY3VzID0gbGlua3MucmVtZW1iZXIudGFncy5hYkdyaWRGb2N1czsKCi8vIFJ1biBzb21lIGFiLXNwZWNpZmljIHByZXByb2Nlc3Npbmcgb2YgYm90IGRhdGEuCmZvciAoY29uc3Qga2V5IGluIGJvdERhdGEpIHsKICAgIGNvbnN0IGRhdGEgPSBib3REYXRhW2tleV07CgogICAgaWYgKGRhdGEudGFncykgewogICAgICAgIGRhdGEudGFncy5hYklET3JpZ2luID0gb3JpZ2luOwogICAgICAgIGRhdGEudGFncy5hYklEU3R1ZGlvID0gc3R1ZGlvOwoKICAgICAgICBpZiAoZGF0YS50YWdzLmNyZWF0b3IpIHsKICAgICAgICAgICAgZGF0YS50YWdzLm9sZENyZWF0b3IgPSBkYXRhLnRhZ3MuY3JlYXRvcjsKICAgICAgICB9CgogICAgICAgIC8vIFJ5YW4gQ29vazogVGhpcyB0YXJnZXRQb3NpdGlvbiBzdHVmZiBpcyBhcHBhcmVudGx5IHVzZWQgZm9yIGJvdCBwYXN0aW5nPyAKICAgICAgICAvLyBUaGlzIGlzIHNvbWUgcmVhbGx5IGNvbmZ1c2luZyBsb2dpYyBhbmQgc2hvdWxkIGJlIHJlZmFjdG9yZWQgZXZlbnR1YWxseS4KICAgICAgICBpZiAoKGJvdENvdW50IDwgMiB8fCBib3RDb3VudCA8IDMgJiYgYm90RGF0YS5hYlhQQm90ICE9IG51bGwpICYmIGFiR3JpZEZvY3VzICYmICFpZ25vcmVHcmlkRm9jdXMpIHsKICAgICAgICAgICAgZGF0YS50YWdzW2FiR3JpZEZvY3VzLmRpbWVuc2lvbl0gPSB0cnVlOwogICAgICAgICAgICBkYXRhLnRhZ3NbYWJHcmlkRm9jdXMuZGltZW5zaW9uICsgJ1gnXSA9IGFiR3JpZEZvY3VzLnBvc2l0aW9uLng7CiAgICAgICAgICAgIGRhdGEudGFnc1thYkdyaWRGb2N1cy5kaW1lbnNpb24gKyAnWSddID0gYWJHcmlkRm9jdXMucG9zaXRpb24ueTsKICAgICAgICB9CiAgICB9Cn0KCi8vIERvIGFub3RoZXIgcHJlcHJvY2Vzc2luZyBwYXNzIHRoYXQgYWxsb3dzIGxpc3RlbmVycyB0byBwcmVwcm9jZXNzIHRoZSBib3QgZGF0YSBiZWZvcmUgdGhlIGJvdHMgYXJlYSBjcmVhdGVkLgpsZXQgcHJlcHJvY2Vzc0FyZyA9IHsgYm90RGF0YSwgb3JpZ2luLCBzdHVkaW8sIHJlY29yZCwgdmVyc2lvbiwgZWdnUGFyYW1ldGVycywgaW5pdGlhbEJvb3QsIHNvdXJjZUV2ZW50IH07CgppZiAob25QcmVwcm9jZXNzQm90RGF0YSkgewogICAgb25QcmVwcm9jZXNzQm90RGF0YShwcmVwcm9jZXNzQXJnKQp9Cgphd2FpdCBQcm9taXNlLmFsbFNldHRsZWQoc2hvdXQoJ29uQUJQcmVwcm9jZXNzQm90RGF0YScsIHByZXByb2Nlc3NBcmcpKTsKCi8vIENyZWF0ZSBib3RzIGZyb20gdGhlIGJvdCBkYXRhLgpsZXQgaWRNYXAgPSBuZXcgTWFwKCk7CmxldCBuZXdCb3RzID0gW107CmxldCBuZXdCb3RJZHMgPSBbXTsKCmZvciAoY29uc3Qga2V5IGluIGJvdERhdGEpIHsKICAgIGNvbnN0IGRhdGEgPSBib3REYXRhW2tleV07CgogICAgaWYgKGRhdGEudGFncykgewogICAgICAgIHRyeSB7IAogICAgICAgICAgICBjb25zdCBuZXdCb3QgPSBjcmVhdGUoZGF0YS50YWdzKTsKCiAgICAgICAgICAgIGlkTWFwLnNldChkYXRhLmlkLCBuZXdCb3QuaWQpOwogICAgICAgICAgICBuZXdCb3RzLnB1c2gobmV3Qm90KTsKICAgICAgICAgICAgbmV3Qm90SWRzLnB1c2gobmV3Qm90LmlkKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gaW52YWxpZCBib3RgLCBlKTsKICAgICAgICB9CiAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUubG9nKGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gc2tpcHBlZCBib3Q6IGAsIGRhdGEpOwogICAgfQp9CgovLyBBcnJheSBvZiB0YWcgcmVsYXRpb25zaGlwcyB0byBiZSBwcmVzZXJ2ZWQKY29uc3QgbGlua1RhZ3MgPSBbImxpbmsiLCAiY3JlYXRvciIsICJjb25maWdCb3QiLCAibGluZVRvIiwgInRyYW5zZm9ybWVyIiwgImZvcm1MaWdodFRhcmdldCJdOwoKLy8gVGhpcyBsb29wIGNvbnRhaW5zIHRoZSBsb2dpYyBmb3IgcHJlc2VydmluZyB0aGUgbGlua1RhZ3MKZm9yIChsZXQgbmV3Qm90IG9mIG5ld0JvdHMpIHsKICAgIGZvciAobGV0IHRhZyBvZiBsaW5rVGFncykgewogICAgICAgIGxldCB2YWx1ZSA9IG5ld0JvdC50YWdzW3RhZ107CgogICAgICAgIGlmICh0YWcgPT0gImNyZWF0b3IiKSB7CiAgICAgICAgICAgIHZhbHVlID0gbmV3Qm90LnRhZ3Mub2xkQ3JlYXRvcjsKICAgICAgICAgICAgbmV3Qm90LnRhZ3Mub2xkQ3JlYXRvciA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICB1cGRhdGVCb3RMaW5rcyhuZXdCb3QsIGlkTWFwKTsKCiAgICAgICAgaWYgKHZhbHVlKSB7CiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgewogICAgICAgICAgICAgICAgbGV0IG5ld1ZhbHVlID0gdmFsdWUubWFwKGlkID0+IHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWRNYXAuZ2V0KGlkKSB8fCBpZDsKICAgICAgICAgICAgICAgIH0pCgogICAgICAgICAgICAgICAgbmV3Qm90LnJhd1t0YWddID0gbmV3VmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBjb25zdCBuZXdJRCA9IGlkTWFwLmdldCh2YWx1ZSk7CgogICAgICAgICAgICAgICAgaWYgKG5ld0lEKSB7CiAgICAgICAgICAgICAgICAgICAgbmV3Qm90LnJhd1t0YWddID0gbmV3SUQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCi8vIFRvYXN0cyBmb3IgaGF0Y2hlcywgYnV0IG9ubHkgb24gYnVpbGRlcgppZiAob3JpZ2luICYmIHZlcnNpb24gJiYgY29uZmlnQm90LnRhZ3MuYWJTaWxlbnRNb2RlID09IG51bGwgJiYgIWNvbmZpZ0JvdC50YWdzLnBoICYmIGJ1aWxkZXJWZXJzaW9uID09ICJidWlsZGVyIikgewogICAgb3MudG9hc3QoImhhdGNoZWQgIiArIG9yaWdpbiArICIgdiIgKyB2ZXJzaW9uKTsKfQoKaWYgKG9yaWdpbikgewogICAgLy8gQ3JlYXRlIGFiRWdnIGJvdCB0aGF0IHRyYWNrcyBjYW4gYmUgdXNlZCB0byB0cmFjayB3aGF0IGVnZ3MgaGF2ZSBiZWVuIGhhdGNoZWQuCiAgICBjcmVhdGUoewogICAgICAgIHNwYWNlOiAic2hhcmVkIiwKICAgICAgICBhYjogdHJ1ZSwKICAgICAgICBhYkVnZzogdHJ1ZSwKICAgICAgICBhYklnbm9yZTogdHJ1ZSwKICAgICAgICBvcmlnaW5fYWI6IG9yaWdpbiwKICAgICAgICBvcmlnaW5fdmVyc2lvbjogdmVyc2lvbiwKICAgICAgICBvcmlnaW5fcmVjb3JkOiByZWNvcmQsCiAgICAgICAgb3JpZ2luX3N0dWRpbzogc3R1ZGlvLAogICAgICAgIGZvcm06ICJlZ2ciLAogICAgICAgIGNvbG9yOiBsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQmFzZUNvbG9yLAogICAgICAgIGxhYmVsQ29sb3I6IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJCYXNlTGFiZWxDb2xvciwKICAgICAgICBsYWJlbDogb3JpZ2luICsgIiB2IiArIHZlcnNpb24sCiAgICB9KTsKfQoKY29uZmlnQm90LnRhZ3MubGFzdEVnZ0hhdGNoZWQgPSBvcmlnaW47Cgp3aGlzcGVyKG5ld0JvdHMsICdvblByZUhhdGNoJywgeyBhYjogb3JpZ2luLCB2ZXJzaW9uLCBpbnN0OiBhYi50YWdzLmFiSW5zdCwgYm90SWRzOiBuZXdCb3RJZHMsIHNvdXJjZUV2ZW50IH0pOwoKaWYgKGluaXRpYWxCb290KSB7CiAgICBsaW5rcy5yZW1lbWJlci50YWdzLmJhc2VBQiA9IG9yaWdpbjsKfQoKLy8gb25FZ2dIYXRjaCBmb3IgYWxsIGp1c3QgaGF0Y2hlZCBib3RzCndoaXNwZXIobmV3Qm90cywgIm9uRWdnSGF0Y2giLCB7IGFiOiBvcmlnaW4sIHZlcnNpb24sIGluc3Q6IGFiLnRhZ3MuYWJJbnN0LCBib3RJZHM6IG5ld0JvdElkcywgZWdnUGFyYW1ldGVycywgc291cmNlRXZlbnQgfSk7CgovLyBvbkFiQWRkZWQgZm9yIGFsbCBib3RzIGluIHRoZSBleHBlcmllbmNlCnN1cGVyU2hvdXQoIm9uQUJBZGRlZCIsIHsgYWI6IG9yaWdpbiwgdmVyc2lvbiwgaW5zdDogYWIudGFncy5hYkluc3QsIGJvdElkczogbmV3Qm90SWRzLCBzb3VyY2VFdmVudCB9KTsKc3VwZXJTaG91dCgib25BYkFkZGVkIiwgeyBhYjogb3JpZ2luLCB2ZXJzaW9uLCBpbnN0OiBhYi50YWdzLmFiSW5zdCwgYm90SWRzOiBuZXdCb3RJZHMsIHNvdXJjZUV2ZW50IH0pOyAvLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4KCnJldHVybiBuZXdCb3RzOycA9JDTyQT6xAEIcmVtZW1iZXICBAD0kNPJBPbsASjwn5SXZTUzODBhNmItOGI0ZC00YThiLThiMDQtNThlMWViMDNlNWU3JwD0kNPJBPrEAQhhYklnbm9yZQIEAPSQ08kEne0BBHRydWUnAPSQ08kE+sQBB2FiU2hlbGwCBAD0kNPJBKLtAQR0cnVlJwD0kNPJBPrEAQlhYlZlcnNpb24CBAD0kNPJBKftAQQxMC41JwD0kNPJBPrEAQtwZXJzb25hbGl0eQIEAPSQ08kErO0BKPCflJdiNzZkZmJjNC04NTRiLTRmNmQtYTkxZi1hOTQ4Njk0Nzc0ZGInAQRib3RzJDUyOGRjMGY5LTQzZWMtNDNmMy1hNDcwLWUyZGQ2YTBkYTk1ZgEnAPSQ08kE0+0BBnN5c3RlbQIEAPSQ08kE1O0BEGFiLnNoZWxsLnZlcnNpb24nAPSQ08kE0+0BBGZvcm0CBAD0kNPJBOXtAQdub3RoaW5nJwD0kNPJBNPtAQhhYklnbm9yZQIEAPSQ08kE7e0BBHRydWUnAPSQ08kE0+0BB2FiU2hlbGwCBAD0kNPJBPLtAQR0cnVlJwD0kNPJBNPtARNhYlNoZWxsTWFqb3JWZXJzaW9uAgQA9JDTyQT37QEBMScA9JDTyQTT7QENb25Ta2lsbFVwZGF0ZQIEAPSQ08kE+e0BlwFAY29uc3QgdmVyc2lvblN0cmluZyA9IHRhZ3MuYWJTaGVsbE1ham9yVmVyc2lvbiArICIuIiArIHRhZ3MuYWJTaGVsbE1pbm9yVmVyc2lvbjsNCg0KY29uc29sZS5sb2coIltBQlNoZWxsXSBMb2FkZWQgQUIgc2hlbGwgdmVyc2lvbiAiICsgdmVyc2lvblN0cmluZyk7JwD0kNPJBNPtAQlhYlZlcnNpb24CBAD0kNPJBJHvAQQxMC41JwD0kNPJBNPtARNhYlNoZWxsTWlub3JWZXJzaW9uAgQA9JDTyQSW7wECMTMnAQRib3RzJDc2YWYwNDkxLTM5MTktNDk4NC1hYTgyLTIyYzc0MmY0MjYzZgEnAPSQ08kEme8BBnN5c3RlbQIEAPSQ08kEmu8BDmFiLnNoZWxsLnN0b3JlJwD0kNPJBJnvAQRmb3JtAgQA9JDTyQSp7wEHbm90aGluZycA9JDTyQSZ7wELZGVzY3JpcHRpb24CBAD0kNPJBLHvAT9UaGlzIHNraWxsIGlzIG1lYW50IHRvIGJlIGEgY29uZmlndXJhYmxlIG1lYW5zIHRvIHB1Ymxpc2ggZGF0YS4nAPSQ08kEme8BD2FiUHVibGlzaFJlY29yZAIEAPSQ08kE8e8BwAZAYXdhaXQgb3MucmVxdWVzdEF1dGhCb3QoKTsKCmxldCBwdWJsaWNGYWNpbmcgPSB0aGF0LnB1YmxpY0ZhY2luZzsKbGV0IHJlY29yZERhdGEgPSB0aGF0LmRhdGE7CmxldCByZWNvcmROYW1lID0gdGhhdC5yZWNvcmROYW1lOwpsZXQgZW5kcG9pbnQgPSB0aGF0LmVuZHBvaW50ID8gdGhhdC5lbmRwb2ludCA6IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJFbmRwb2ludDsKbGV0IHVzZXJSZWNvcmQgPSBjb25maWdCb3QudGFncy5zZWxlY3RlZF9zdHVkaW9JRCA/PyBhdXRoQm90LmlkOwoKaWYgKCFyZWNvcmREYXRhKQp7CiAgICByZXR1cm4gIm5vIGRhdGEgc3VwcGxpZWQiOwp9CgppZiAocHVibGljRmFjaW5nKQp7CiAgICByZWNvcmREYXRhID0gYXdhaXQgb3MucmVjb3JkRGF0YSh1c2VyUmVjb3JkLCByZWNvcmROYW1lLCByZWNvcmREYXRhLCB7ZW5kcG9pbnQ6IGVuZHBvaW50LCBtYXJrZXJzOiBbInB1YmxpY1JlYWQiXX0pOwp9CmVsc2UKeyAgICAKICAgIHJlY29yZERhdGEgPSBhd2FpdCBvcy5yZWNvcmREYXRhKHVzZXJSZWNvcmQsIHJlY29yZE5hbWUsIHJlY29yZERhdGEsIHtlbmRwb2ludDogZW5kcG9pbnQsIG1hcmtlcnM6IFtyZWNvcmROYW1lXX0pOwp9CgppZiAocmVjb3JkRGF0YS5zdWNjZXNzKQp7CiAgICBhYi5sb2cobGlua3MucGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eSArICI6IGRhdGEgcmVjb3JkZWQgdG8gIiArIHVzZXJSZWNvcmQpOwp9CmVsc2UKewogICAgYWIubG9nKGxpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCdWlsZGVySWRlbnRpdHkgKyAiOiBkYXRhIGZhaWxlZCB0byByZWNvcmQiKTsKfQoKcmV0dXJuIHJlY29yZERhdGE7JwD0kNPJBJnvAQ1hYlB1Ymxpc2hGaWxlAgQA9JDTyQSy9gGsB0Bhd2FpdCBvcy5yZXF1ZXN0QXV0aEJvdCgpOwoKbGV0IGZpbGUgPSB0aGF0LmZpbGU7CmxldCBmaWxlTmFtZSA9IHRoYXQuZmlsZU5hbWU7CmxldCBtaW1lVHlwZSA9IHRoYXQubWltZVR5cGU7CmxldCB1c2VyUmVjb3JkID0gY29uZmlnQm90LnRhZ3Muc2VsZWN0ZWRfc3R1ZGlvSUQgPz8gYXV0aEJvdC5pZDsKCmlmICghZmlsZSkKewogICAgcmV0dXJuICJubyBmaWxlIHN1cHBsaWVkIjsKfQoKbGV0IGZpbGVVcGxvYWQgPSBhd2FpdCBvcy5yZWNvcmRGaWxlKHVzZXJSZWNvcmQsIGZpbGUsIHtkZXNjcmlwdGlvbjogZmlsZU5hbWUsIG1pbWVUeXBlOiBtaW1lVHlwZX0pOwogICAgCmlmICghZmlsZVVwbG9hZC5zdWNjZXNzKSAKewogICAgaWYgKGZpbGVVcGxvYWQuZXJyb3JDb2RlID09ICJmaWxlX2FscmVhZHlfZXhpc3RzIikKICAgIHsKICAgICAgICBhYi5sb2cobGlua3MucGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eSArICI6IGZpbGUgYWxyZWFkeSBleGlzdHMgaW4gIiArIHVzZXJSZWNvcmQpOwoKICAgICAgICByZXR1cm4gZmlsZVVwbG9hZDsKICAgIH0KCiAgICBhd2FpdCBvcy5ncmFudEluc3RBZG1pblBlcm1pc3Npb24odXNlclJlY29yZCk7CgogICAgZmlsZVVwbG9hZCA9IGF3YWl0IG9zLnJlY29yZEZpbGUodXNlclJlY29yZCwgZmlsZSwge2Rlc2NyaXB0aW9uOiBmaWxlTmFtZSwgbWltZVR5cGU6IG1pbWVUeXBlfSk7Cn0KCmlmIChmaWxlVXBsb2FkLnN1Y2Nlc3MpCnsKICAgIGFiLmxvZyhsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgIjogZmlsZSByZWNvcmRlZCB0byAiICsgdXNlclJlY29yZCk7Cn0KZWxzZQp7CiAgICBhYi5sb2cobGlua3MucGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eSArICI6IGZpbGUgZmFpbGVkIHRvIHJlY29yZCIpOwp9CgpyZXR1cm4gZmlsZVVwbG9hZDsnAPSQ08kEme8BEGFiQ29yZU1lbnVBY3Rpb24CBAD0kNPJBN/9AU1AYXdhaXQgb3MucmVxdWVzdEF1dGhCb3QoKTsKCi8vc2V0IHVwIHRoZSBwdWJsaXNoIG1lbnUKdGhpc0JvdC5vblN0b3JlTWVudSgpOycA9JDTyQSZ7wELb25TdG9yZU1lbnUCBAD0kNPJBK3+AcuTAUBjb25zdCB0YXJnZXRCb3RzID0gWy4uLm5ldyBTZXQobGlua3MucmVtZW1iZXIubGlua3MuYWJNdWx0aXBsZUJvdEZvY3VzKV07CmNvbnN0IHBvc3NpYmxlUHVibGlzaEJvdCA9IHRhcmdldEJvdHM/Lmxlbmd0aCA+IDAgPyB0YXJnZXRCb3RzIDogbGlua3MucmVtZW1iZXIubGlua3MuYWJCb3RGb2N1cyA/IFtsaW5rcy5yZW1lbWJlci5saW5rcy5hYkJvdEZvY3VzXSA6IFtdOwpjb25zdCBiYXNlQUIgPSAhbGlua3MucmVtZW1iZXIubGlua3MuYWJCb3RGb2N1cyA/IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYmFzZUFCOiBsaW5rcy5yZW1lbWJlci5saW5rcy5hYkJvdEZvY3VzLmlkOwpjb25zdCBiYXNlQm90cyA9IGdldEJvdHMoYnlNb2Qoe2FiSURPcmlnaW46IGJhc2VBQiwgc3BhY2U6ICJzaGFyZWQiLCBhYklnbm9yZTogbnVsbH0pKTsKY29uc3Qgbm9uQUJCb3RzID0gZ2V0Qm90cyhieU1vZCh7YWJJRE9yaWdpbjogbnVsbCwgc3BhY2U6ICJzaGFyZWQiLCBhYklnbm9yZTogbnVsbH0pKTsKCnNob3V0KCJhYk1lbnVSZWZyZXNoIik7Cgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9ICJhYk1lbnUiOwoKbGlua3MubWVudS5tYXNrcy5vbkdyaWRDbGljayA9ICJAIHNob3V0KCdhYk1lbnVSZWZyZXNoJyk7IGxpbmtzLm1hbmlmZXN0YXRpb24uYWJDbGljaygpOyI7Cgpjb25zdCBkZWZhdWx0cyA9IHsKICAgIGFiTWVudTogdHJ1ZSwKICAgIGFiTWVudVJlZnJlc2g6ICJAIGRlc3Ryb3kodGhpc0JvdCk7IiwKICAgIGNvbG9yOiBsaW5rcy5yZW1lbWJlci50YWdzLmFiQmFzZVN0cm9rZUNvbG9yLAogICAgbWFuYWdlcjogIvCflJciICsgdGhpc0JvdC5pZCwKICAgIG1hbmlmZXN0YXRpb246IHRhZ3MubWFuaWZlc3RhdGlvbiwKICAgIHJlbWVtYmVyOiB0YWdzLnJlbWVtYmVyLAogICAgbWVudUl0ZW1TdHlsZTogYPCfp6wgewogICAgICAgICJib3JkZXItcmFkaXVzIjogIjBweCIsIAogICAgICAgICJtYXJnaW4tdG9wIjogIjBweCIsCiAgICAgICAgImJvcmRlci13aWR0aCI6ICIycHgiLCAKICAgICAgICAiYm9yZGVyLWNvbG9yIjogIiMwMDAiLCAKICAgICAgICAiYm9yZGVyLWxlZnQtc3R5bGUiOiAic29saWQiLAogICAgICAgICJib3JkZXItcmlnaHQtc3R5bGUiOiAic29saWQiLAogICAgICAgICJib3gtc2hhZG93IjogIjNweCA0cHggIzAwMCIsCiAgICAgICAgIm1pbi1oZWlnaHQiOiAiNDRweCIKICAgIH1gCn0KCi8vIENyZWF0ZSBkb3dubG9hZCBidXR0b24KbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24oewogICAgLi4uZGVmYXVsdHMsCiAgICBhYk1lbnVTb3J0T3JkZXI6IDksCiAgICBsYWJlbDogImRvd25sb2FkIiwKICAgIG1lbnVJdGVtU3R5bGU6IGDwn6esIHsKICAgICAgICAiYm9yZGVyLXJhZGl1cyI6ICI4cHgiLCAKICAgICAgICAibWFyZ2luLXRvcCI6ICI4cHgiLCAgICAgICAgIAogICAgICAgICJib3JkZXItd2lkdGgiOiAiMnB4IiwgCiAgICAgICAgImJvcmRlci1jb2xvciI6ICIjMDAwIiwgCiAgICAgICAgImJvcmRlci1zdHlsZSI6ICJzb2xpZCIsCiAgICAgICAgImJveC1zaGFkb3ciOiAiM3B4IDRweCAjMDAwIiwKICAgICAgICAibWluLWhlaWdodCI6ICI0NHB4IgogICAgfWAsCiAgICBmb3JtQWRkcmVzczogImdldF9hcHAiLAogICAgcG9zc2libGVCb3Q6IGdldExpbmsocG9zc2libGVQdWJsaXNoQm90KSwKICAgIG9uQ2xpY2s6IGBAIGxpbmtzLm1hbmFnZXIuYWJEb3dubG9hZCh7YmFzZUFCOiBsaW5rcy5yZW1lbWJlci50YWdzLmJhc2VBQiwgcG9zc2libGVCb3RzOiBsaW5rcy5wb3NzaWJsZUJvdH0pO2AKfSk7CgppZiAoIWF1dGhCb3QpIAp7CiAgICAvLyBDcmVhdGUgbG9naW4gbWVzc2FnZQogICAgbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24oewogICAgICAgIC4uLmRlZmF1bHRzLAogICAgICAgIGFiTWVudVNvcnRPcmRlcjogOSwKICAgICAgICBsYWJlbDogInBsZWFzZSBzaWduIGluIHRvIGFjY2VzcyBzaGFyZSBmZWF0dXJlcyIsCiAgICAgICAgZm9ybUFkZHJlc3M6ICJsb2NrIiwKICAgICAgICBvbkNsaWNrOiBgQCBvcy5yZXF1ZXN0QXV0aEJvdCgpYAogICAgfSk7CgogICAgcmV0dXJuOwp9CmVsc2UgaWYgKGF1dGhCb3QudGFncy5zdWJzY3JpcHRpb25UaWVyID09ICJGcmVlUGxheSIpIAp7CiAgICAvLyBDcmVhdGUgdXBncmFkZSBzdWJzY3JpcHRpb24gYnV0dG9uCiAgICBsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbih7CiAgICAgICAgLi4uZGVmYXVsdHMsCiAgICAgICAgbGFiZWw6ICJwbGVhc2UgdXBncmFkZSB5b3VyIHN1YnNjcmlwdGlvbiB0byBhY2Nlc3Mgc2hhcmUgZmVhdHVyZXMiLAogICAgICAgIGZvcm1BZGRyZXNzOiAibG9jayIKICAgIH0pOwoKICAgIHJldHVybjsKfQoKCmxldCB1c2VyU3R1ZGlvcyA9IGNvbmZpZ0JvdC50YWdzLnVzZXJfc3R1ZGlvczsKCmlmICghdXNlclN0dWRpb3MpIAp7CiAgICB1c2VyU3R1ZGlvcyA9IGF3YWl0IG9zLmxpc3RVc2VyU3R1ZGlvcygpOwp9CgppZiAodXNlclN0dWRpb3Muc3VjY2VzcykgCnsKICAgIGNvbnN0IGFjdGl2ZVN0dWRpbyA9IHVzZXJTdHVkaW9zLnN0dWRpb3MuZmluZEluZGV4KHN0dWRpbyA9PiBzdHVkaW8uc3R1ZGlvSWQgPT0gY29uZmlnQm90LnRhZ3Muc2VsZWN0ZWRfc3R1ZGlvSUQpOwoKICAgIGxldCBiYXNlU3R1ZGlvID0gYXV0aEJvdC5pZDsKCiAgICBpZiAoYmFzZVN0dWRpbyA9PSBhdXRoQm90LmlkKSAKICAgIHsKICAgICAgICBiYXNlU3R1ZGlvID0gInBsYXllciI7CiAgICB9CgogICAgaWYgKGFjdGl2ZVN0dWRpbyA9PSAtMSAmJiBiYXNlU3R1ZGlvICE9ICJwbGF5ZXIiKSAKICAgIHsKICAgICAgICBjb25maWdCb3QudGFncy5zZWxlY3RlZF9zdHVkaW9JRCA9IGJhc2VTdHVkaW87CiAgICB9CgogICAgaWYgKGNvbmZpZ0JvdC50YWdzLnN0dWRpbyAmJiAhYWN0aXZlU3R1ZGlvKSAKICAgIHsKICAgICAgICBjb25zdCBzdHVkaW9NYXRjaCA9IHVzZXJTdHVkaW9zLnN0dWRpb3MuZmluZEluZGV4KHN0dWRpbyA9PiBzdHVkaW8uc3R1ZGlvSWQgPT0gY29uZmlnQm90LnRhZ3Muc3R1ZGlvKQoKICAgICAgICBpZiAoc3R1ZGlvTWF0Y2ggIT0gLTEpIHsKICAgICAgICAgICAgYmFzZVN0dWRpbyA9IGJhc2VTdHVkaW87CiAgICAgICAgfQogICAgfQoKICAgIGNvbnN0IHN0dWRpb0xhYmVsID0gYWN0aXZlU3R1ZGlvID09IC0xID8gYmFzZVN0dWRpbyA6IHVzZXJTdHVkaW9zLnN0dWRpb3NbYWN0aXZlU3R1ZGlvXS5kaXNwbGF5TmFtZTsKCiAgICAvLyBDcmVhdGUgc3R1ZGlvIHNlbGVjdCBidXR0b24KICAgIGNvbnN0IHN0dWRpb0Rpc3BsYXlCdXR0b24gPSBsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbih7CiAgICAgICAgLi4uZGVmYXVsdHMsCiAgICAgICAgbGFiZWw6ICJzdHVkaW89IiArIHN0dWRpb0xhYmVsLAogICAgICAgIGFiTWVudVNvcnRPcmRlcjogMS41LAogICAgICAgIHN0dWRpb0luZm9ybWF0aW9uOiB1c2VyU3R1ZGlvcywKICAgICAgICBmb3JtQWRkcmVzczogImludmVudG9yeV8yIiwKICAgICAgICBvbkNsaWNrOiBgQCBsaW5rcy5tYW5hZ2VyLnN0dWRpb1NlbGVjdCh0YWdzLnN0dWRpb0luZm9ybWF0aW9uKTtgCiAgICB9KTsKCiAgICBtYXNrcy5zdHVkaW9TZWxlY3RCdXR0b24gPSBnZXRMaW5rKHN0dWRpb0Rpc3BsYXlCdXR0b24pOwp9Cgpjb25zdCB0b3RhbEJvdENvdW50ID0gcG9zc2libGVQdWJsaXNoQm90Lmxlbmd0aCA+IDAgPyBwb3NzaWJsZVB1Ymxpc2hCb3QubGVuZ3RoIDogYmFzZUJvdHMubGVuZ3RoICsgbm9uQUJCb3RzLmxlbmd0aDsKCi8vIENyZWF0ZSBwdWJsaXNoIGxhYmVsIGJ1dHRvbgpjb25zdCBsYWJlbEJvdCA9IGF3YWl0IGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKHsKICAgIC4uLmRlZmF1bHRzLAogICAgbGFiZWw6IGBwdWJsaXNoIHBhdHRlcm4gJHtiYXNlQm90cy5sZW5ndGggPiAwID8gIiIgOiAiYXMgIn0ke2Jhc2VBQn0gKCR7dG90YWxCb3RDb3VudH0gYm90JHtiYXNlQm90cy5sZW5ndGggKyBub25BQkJvdHMubGVuZ3RoID09IDEgPyAiIiA6ICJzIn0pYCwKICAgIHRvdGFsQm90czogYmFzZUJvdHMubGVuZ3RoICsgbm9uQUJCb3RzLmxlbmd0aCwKICAgIGFiTWVudVNvcnRPcmRlcjogMSwKICAgIGxhYmVsQWxpZ25tZW50OiAiY2VudGVyIiwKICAgIGZvcm1BZGRyZXNzOiBudWxsLAogICAgbWVudUl0ZW1TdHlsZTogYPCfp6wgewogICAgICAgICJib3JkZXItcmFkaXVzIjogIjhweCA4cHggMHB4IDBweCIsIAogICAgICAgICJtYXJnaW4tdG9wIjogIjhweCIsICAgICAgICAgCiAgICAgICAgImJvcmRlci13aWR0aCI6ICIycHgiLCAKICAgICAgICAiYm9yZGVyLWNvbG9yIjogIiMwMDAiLCAKICAgICAgICAiYm9yZGVyLXRvcC1zdHlsZSI6ICJzb2xpZCIsCiAgICAgICAgImJvcmRlci1sZWZ0LXN0eWxlIjogInNvbGlkIiwKICAgICAgICAiYm9yZGVyLXJpZ2h0LXN0eWxlIjogInNvbGlkIiwKICAgICAgICAiYm94LXNoYWRvdyI6ICIzcHggNHB4ICMwMDAiLAogICAgICAgICJtaW4taGVpZ2h0IjogIjQ0cHgiCiAgICB9YCwKICAgIHNoaWZ0U3RhdGU6IGZhbHNlLAogICAgb25DbGljazogYEAgY29uc3QgbWVudUJvdHMgPSBnZXRCb3RzKCdhYk1lbnVTb3J0T3JkZXInKTsKCiAgICAgICAgaWYgKHRhZ3Muc2hpZnRTdGF0ZSkKICAgICAgICB7CiAgICAgICAgICAgIHdoaXNwZXIobWVudUJvdHMsICJvbktleVVwIiwge2tleXM6IFsiU2hpZnQiXX0pOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICB3aGlzcGVyKG1lbnVCb3RzLCAib25LZXlEb3duIiwge2tleXM6IFsiU2hpZnQiXX0pOwogICAgICAgIH0KICAgICAgICAKICAgICAgICB0YWdzLnNoaWZ0U3RhdGUgPSAhdGFncy5zaGlmdFN0YXRlO2AsCiAgICBzY2FsZVk6ICJhdXRvIiwKICAgIGFiU2VsZWN0VGl0bGVVcGRhdGU6IGBAIGxldCB0b3RhbEJvdHMgPSBjb25maWdCb3QudGFncy5hYkV4Y2x1ZGVVbmNsYWltZWQgPyB0aGF0LmFiQm90cyA6IHRoYXQuYWJCb3RzICsgdGhhdC5ub25BQkJvdHM7CgogICAgY29uc3QgdG90YWxCb3RWYXIgPSB0b3RhbEJvdHMgPT0gMSA/ICIgYm90IiA6ICIgYm90cyI7CiAgICBjb25zdCBib3RWYXIgPSB0aGF0Lm5vbkFCQm90cz8ubGVuZ3RoICA9PSAxID8gIiBib3QpIiA6ICIgYm90cykiOwoKICAgIGlmICh0aGF0LmFiID09ICJuZXcgcGF0dGVybiIpCiAgICB7CiAgICAgICAgbGlua3MucmVtZW1iZXIubWFza3MuYmFzZUFCID0gbnVsbDsKCiAgICAgICAgaWYgKGdldEJvdCgiYWJJRE9yaWdpbiIsIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYmFzZUFCKSkKICAgICAgICB7CiAgICAgICAgICAgIGNvbnN0IGFiQm90cyA9IGdldEJvdHMoYnlNb2Qoe2FiSURPcmlnaW46IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYmFzZUFCLCBzcGFjZTogInNoYXJlZCIsIGFiSWdub3JlOiBudWxsfSkpLmxlbmd0aDsKCiAgICAgICAgICAgIHRhZ3MubGFiZWwgPSAicHVibGlzaCAiICsgbGlua3MucmVtZW1iZXIudGFncy5iYXNlQUIgKyAiICgiICsgYWJCb3RzICsgIiBib3RzKSI7CiAgICAgICAgICAgIHRhZ3MudG90YWxCb3RzID0gYWJCb3RzOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICB0YWdzLmxhYmVsID0gInB1Ymxpc2ggcGF0dGVybiBhcyAiICsgbGlua3MucmVtZW1iZXIudGFncy5iYXNlQUIgKyAiICgiICsgdG90YWxCb3RzICsgdG90YWxCb3RWYXIgKyAiKSI7CiAgICAgICAgICAgIHRhZ3MudG90YWxCb3RzID0gdG90YWxCb3RzOwogICAgICAgIH0gICAKICAgIH0KICAgIGVsc2UKICAgIHsgICAKICAgICAgICB0YWdzLmxhYmVsID0gInB1Ymxpc2ggIiArIHRoYXQuYWIgKyAiICgiICsgdG90YWxCb3RzICsgdG90YWxCb3RWYXIgKyAiKSI7CiAgICAgICAgdGFncy50b3RhbEJvdHMgPSB0b3RhbEJvdHM7CiAgICB9YAp9KTsKCi8vIENyZWF0ZSBlbmNyeXB0IGJ1dHRvbgpsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbih7CiAgICAuLi5kZWZhdWx0cywKICAgIGFiTWVudTogbnVsbCwKICAgIGFiTWVudVNvcnRPcmRlcjogMiwKICAgIGRpbWVuc2lvbjogImFiTWVudSIsCiAgICBsYWJlbDogImVuY3J5cHQiLAogICAgZm9ybUFkZHJlc3M6ICJjaGVja19ib3hfb3V0bGluZV9ibGFuayIsCiAgICBlbmNyeXB0U3RhdGU6IGZhbHNlLAogICAgb25LZXlEb3duOiBgQCBpZiAodGhhdC5rZXlzWzBdID09ICJTaGlmdCIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRhZ3NbdGFncy5kaW1lbnNpb25dID0gdHJ1ZTsKICAgICAgICAgICAgfWAsCiAgICBvbktleVVwOiBgQCBpZiAodGhhdC5rZXlzWzBdID09ICJTaGlmdCIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRhZ3NbdGFncy5kaW1lbnNpb25dID0gZmFsc2U7CiAgICAgICAgICAgIH1gLAogICAgb25DbGljazogYEAgaWYodGFncy5lbmNyeXB0U3RhdGUpCiAgICAgICAgewogICAgICAgICAgICB0YWdzLmVuY3J5cHRTdGF0ZSA9IGZhbHNlOwogICAgICAgICAgICB0YWdzLmZvcm1BZGRyZXNzID0gJ2NoZWNrX2JveF9vdXRsaW5lX2JsYW5rJzsKICAgICAgICAgICAgY29uZmlnQm90LnRhZ3MuZW5jcnlwdGlvbiA9IG51bGw7CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIHRhZ3MuZW5jcnlwdFN0YXRlID0gdHJ1ZTsKICAgICAgICAgICAgdGFncy5mb3JtQWRkcmVzcyA9ICdjaGVja19ib3gnOwogICAgICAgICAgICBjb25maWdCb3QudGFncy5lbmNyeXB0aW9uID0gdHJ1ZTsKICAgICAgICB9YCwKfSk7CgpsZXQgYWJCdXR0b247CgppZiAocG9zc2libGVQdWJsaXNoQm90Py5sZW5ndGggPCAxKQp7CiAgICAvLyBDcmVhdGUgaW5jbHVkZUJvdHMgYnV0dG9uCiAgICBhYkJ1dHRvbiA9IGF3YWl0IGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKHsKICAgICAgICAuLi5kZWZhdWx0cywKICAgICAgICBhYk1lbnU6IG51bGwsCiAgICAgICAgZGltZW5zaW9uOiAnYWJNZW51JywKICAgICAgICBhYk1lbnVTb3J0T3JkZXI6IDEuNTIsCiAgICAgICAgYWJTZWxlY3Rpb25CdXR0b246IHRydWUsCiAgICAgICAgbGFiZWw6IGJhc2VCb3RzLmxlbmd0aCA+IDAgJiYgYmFzZUFCICE9IHVuZGVmaW5lZCA/IGBzZWxlY3RlZCBwYXR0ZXJuOiAke2Jhc2VBQn0gKCR7YmFzZUJvdHMubGVuZ3RofSBib3Qke2Jhc2VCb3RzLmxlbmd0aCA9PSAxID8gIiIgOiAicyJ9KWAgOiBgbmV3IHBhdHRlcm4gKCR7bm9uQUJCb3RzLmxlbmd0aH0gYm90JHtub25BQkJvdHMubGVuZ3RoID09IDEgPyAiIiA6ICJzIn0pYCwKICAgICAgICBmb3JtQWRkcmVzczogJ2VnZycsCiAgICAgICAgb25LZXlEb3duOiBgQCBpZiAodGhhdC5rZXlzWzBdID09ICJTaGlmdCIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRhZ3NbdGFncy5kaW1lbnNpb25dID0gdHJ1ZTsKICAgICAgICAgICAgfWAsCiAgICAgICAgb25LZXlVcDogYEAgaWYgKHRoYXQua2V5c1swXSA9PSAiU2hpZnQiKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0YWdzW3RhZ3MuZGltZW5zaW9uXSA9IGZhbHNlOwogICAgICAgICAgICB9YCwKICAgICAgICBvbkNsaWNrOiBgQCBsaW5rcy5tYW5hZ2VyLmFiUHVibGlzaFNlbGVjdCgpO2AsCiAgICAgICAgYWJTZWxlY3RUaXRsZVVwZGF0ZTogYEAgY29uc3QgYm90VmFyTm9uID0gdGhhdC5ub25BQkJvdHMgID09IDEgPyAiIGJvdCkiIDogIiBib3RzKSI7CiAgICAgICAgY29uc3QgYm90VmFyQUIgPSB0aGF0LmFiQm90cyAgPT0gMSA/ICIgYm90KSIgOiAiIGJvdHMpIjsKCiAgICAgICAgaWYgKHRoYXQuYWIgPT0gIm5ldyBwYXR0ZXJuIikKICAgICAgICB7CiAgICAgICAgICAgIHRhZ3MubGFiZWwgPSB0aGF0LmFiICsgIiAoIiArIHRoYXQubm9uQUJCb3RzICsgYm90VmFyTm9uOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICB0YWdzLmxhYmVsID0gInNlbGVjdGVkIHBhdHRlcm46ICIgKyB0aGF0LmFiICsgIiAoIiArIHRoYXQuYWJCb3RzICsgYm90VmFyQUI7CiAgICAgICAgfWAKICAgIH0pOwp9CgppZiAobm9uQUJCb3RzLmxlbmd0aCA+IDAgJiYgcG9zc2libGVQdWJsaXNoQm90Py5sZW5ndGggPCAxKQp7CiAgICAvL2ljbHVkZSBuZXcgYm90cwogICAgbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24oewogICAgICAgIC4uLmRlZmF1bHRzLAogICAgICAgIGFiTWVudTogbnVsbCwKICAgICAgICBhYk1lbnVTb3J0T3JkZXI6IDEuNTMsCiAgICAgICAgYWJCdXR0b246IGdldExpbmsoYWJCdXR0b24pLAogICAgICAgIGxhYmVsQm90OiBnZXRMaW5rKGxhYmVsQm90KSwKICAgICAgICBkaW1lbnNpb246ICJhYk1lbnUiLAogICAgICAgIGxhYmVsOiBgaW5jbHVkZSBuZXcgKCR7bm9uQUJCb3RzLmxlbmd0aH0gYm90JHtub25BQkJvdHMubGVuZ3RoID09IDEgPyAiIiA6ICJzIn0pYCwKICAgICAgICBmb3JtQWRkcmVzczogImNoZWNrX2JveCIsCiAgICAgICAgdW5jbGFpbWVkU3RhdGU6IGZhbHNlLAogICAgICAgIG9uS2V5RG93bjogYEAgaWYgKHRoYXQua2V5c1swXSA9PSAiU2hpZnQiKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0YWdzW3RhZ3MuZGltZW5zaW9uXSA9IHRydWU7CgogICAgICAgICAgICAgICAgY29uc3QgbGFiZWxDaGVjayA9IGxpbmtzLmFiQnV0dG9uLnRhZ3MubGFiZWw7CgogICAgICAgICAgICAgICAgaWYgKGxhYmVsQ2hlY2suaW5jbHVkZXMoJ25ldyBwYXR0ZXJuJykpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbWFza3NbdGFncy5kaW1lbnNpb25dID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbWFza3NbdGFncy5kaW1lbnNpb25dID0gbnVsbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfWAsCiAgICAgICAgb25LZXlVcDogYEAgaWYgKHRoYXQua2V5c1swXSA9PSAiU2hpZnQiKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0YWdzW3RhZ3MuZGltZW5zaW9uXSA9IGZhbHNlOwogICAgICAgICAgICB9YCwKICAgICAgICBvbkNsaWNrOiBgQCBjb25zdCBhYkJvdHMgPSBnZXRCb3RzKGJ5TW9kKHthYklET3JpZ2luOiBsaW5rcy5yZW1lbWJlci50YWdzLmJhc2VBQiwgc3BhY2U6ICJzaGFyZWQiLCBhYklnbm9yZTogbnVsbH0pKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKHRhZ3MudW5jbGFpbWVkU3RhdGUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbnN0IG5vbkFCQm90cyA9IGdldEJvdHMoYnlNb2Qoe2FiSURPcmlnaW46IG51bGwsIHNwYWNlOiAic2hhcmVkIiwgYWJJZ25vcmU6IG51bGx9KSk7CgogICAgICAgICAgICAgICAgdGFncy51bmNsYWltZWRTdGF0ZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgdGFncy5mb3JtQWRkcmVzcyA9ICdjaGVja19ib3gnOwogICAgICAgICAgICAgICAgY29uZmlnQm90LnRhZ3MuYWJFeGNsdWRlVW5jbGFpbWVkID0gbnVsbDsKCiAgICAgICAgICAgICAgICBsaW5rcy5sYWJlbEJvdC5hYlNlbGVjdFRpdGxlVXBkYXRlKHthYjogbGlua3MucmVtZW1iZXIudGFncy5iYXNlQUIsIGFiQm90czogYWJCb3RzLmxlbmd0aCwgbm9uQUJCb3RzOiBub25BQkJvdHMubGVuZ3RofSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0YWdzLnVuY2xhaW1lZFN0YXRlID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHRhZ3MuZm9ybUFkZHJlc3MgPSAnY2hlY2tfYm94X291dGxpbmVfYmxhbmsnOwoKICAgICAgICAgICAgICAgIGNvbmZpZ0JvdC50YWdzLmFiRXhjbHVkZVVuY2xhaW1lZCA9IHRydWU7CgogICAgICAgICAgICAgICAgbGlua3MubGFiZWxCb3QuYWJTZWxlY3RUaXRsZVVwZGF0ZSh7YWI6IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYmFzZUFCLCBhYkJvdHM6IGFiQm90cy5sZW5ndGgsIG5vbkFCQm90czogMH0pOwogICAgICAgICAgICB9YCwKICAgICAgICBhYlNlbGVjdFRpdGxlVXBkYXRlOiBgQCBjb25zdCBib3RWYXIgPSB0aGF0Lm5vbkFCQm90cyA9PSAxID8gIiBib3QpIiA6ICIgYm90cykiOwogICAgICAgIAogICAgICAgICAgICB0YWdzLmxhYmVsID0gImluY2x1ZGUgbmV3ICgiICsgdGhhdC5ub25BQkJvdHMgKyBib3RWYXI7CgogICAgICAgICAgICBjb25zdCBsYWJlbENoZWNrID0gdGhhdC5hYjsKCiAgICAgICAgICAgIGlmKCFsYWJlbENoZWNrLmluY2x1ZGVzKCduZXcgcGF0dGVybicpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBtYXNrc1t0YWdzLmRpbWVuc2lvbl0gPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbWFza3NbdGFncy5kaW1lbnNpb25dID0gZmFsc2U7CiAgICAgICAgICAgIH1gCiAgICB9KTsKfQoKLy8gQ3JlYXRlIHB1YmxpYyBidXR0b24KaWYgKGF1dGhCb3QudGFncy5wcml2YWN5RmVhdHVyZXMuYWxsb3dQdWJsaWNEYXRhKSAKewogICAgY29uZmlnQm90LnRhZ3MucHVibGljRmFjaW5nID0gZmFsc2U7CgogICAgbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24oewogICAgICAgIC4uLmRlZmF1bHRzLAogICAgICAgIGFiTWVudVNvcnRPcmRlcjogMiwKICAgICAgICBsYWJlbDogImlzUHVibGljIiwKICAgICAgICBmb3JtQWRkcmVzczogImNoZWNrX2JveF9vdXRsaW5lX2JsYW5rIiwKICAgICAgICBwdWJsaWNTdGF0ZTogZmFsc2UsCiAgICAgICAgb25DbGljazogYEAgaWYodGFncy5wdWJsaWNTdGF0ZSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGFncy5wdWJsaWNTdGF0ZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgdGFncy5mb3JtQWRkcmVzcyA9ICdjaGVja19ib3hfb3V0bGluZV9ibGFuayc7CiAgICAgICAgICAgICAgICBjb25maWdCb3QudGFncy5wdWJsaWNGYWNpbmcgPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGFncy5wdWJsaWNTdGF0ZSA9IHRydWU7CiAgICAgICAgICAgICAgICB0YWdzLmZvcm1BZGRyZXNzID0gJ2NoZWNrX2JveCc7CiAgICAgICAgICAgICAgICBjb25maWdCb3QudGFncy5wdWJsaWNGYWNpbmcgPSB0cnVlOwogICAgICAgICAgICB9YAogICAgfSk7Cn0KCi8vIENyZWF0ZSB2ZXJzaW9uIHNlbGVjdCBidXR0b24KbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24oewogICAgLi4uZGVmYXVsdHMsCiAgICBhYk1lbnU6IG51bGwsCiAgICBkaW1lbnNpb246ICdhYk1lbnUnLAogICAgYWJNZW51U29ydE9yZGVyOiAxLjUxLAogICAgbGFiZWw6ICd2ZXJzaW9uRmxhZz1jdXJyZW50JywKICAgIGZvcm1BZGRyZXNzOiAnYWx0X3JvdXRlJywKICAgIHNob3dWZXJzaW9uU2VsZWN0b3I6IGBAIHRhZ3NbdGFncy5kaW1lbnNpb25dID0gbnVsbDtgLAogICAgaGlkZVZlcnNpb25TZWxlY3RvcjogYEAgdGFnc1t0YWdzLmRpbWVuc2lvbl0gPSB0cnVlO2AsCiAgICBvbktleURvd246IGBAIGlmICh0aGF0LmtleXNbMF0gPT0gIlNoaWZ0IikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGFnc1t0YWdzLmRpbWVuc2lvbl0gPSB0cnVlOwogICAgICAgICAgICB9YCwKICAgIG9uS2V5VXA6IGBAIGlmICh0aGF0LmtleXNbMF0gPT0gIlNoaWZ0IikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGFnc1t0YWdzLmRpbWVuc2lvbl0gPSBmYWxzZTsKICAgICAgICAgICAgfWAsCiAgICBvbkNsaWNrOiBgQCBzaG91dCgnc2hvd1ZlcnNpb25TZWxlY3RvcicpO2AsCiAgICB2ZXJzaW9uT3B0aW9uQ2xpY2s6IGBACiAgICAgICAgICAgIHRhZ3MubGFiZWwgPSAndmVyc2lvbkZsYWc9JyArIHRoYXQ7CiAgICAgICAgICAgIHRhZ3NbdGFncy5kaW1lbnNpb25dID0gdHJ1ZTsKICAgICAgICBgLAp9KTsKCi8vIEN1cnJlbnQgVmVyc2lvbgpsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbih7CiAgICAuLi5kZWZhdWx0cywKICAgIGFiTWVudTogbnVsbCwKICAgIGxhYmVsOiAnY3VycmVudCcsCiAgICBkaW1lbnNpb246ICdhYk1lbnUnLAogICAgYWJNZW51U29ydE9yZGVyOiAxLjUxLAogICAgZm9ybUFkZHJlc3M6ICdyYWRpb19idXR0b25fY2hlY2tlZCcsCiAgICBzaG93VmVyc2lvblNlbGVjdG9yOiBgQCB0YWdzW3RhZ3MuZGltZW5zaW9uXSA9IHRydWU7YCwKICAgIGhpZGVWZXJzaW9uU2VsZWN0b3I6IGBAIHRhZ3NbdGFncy5kaW1lbnNpb25dID0gbnVsbDtgLAogICAgb25LZXlVcDogYEAgaWYgKHRoYXQua2V5c1swXSA9PSAiU2hpZnQiKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0YWdzW3RhZ3MuZGltZW5zaW9uXSA9IGZhbHNlOwogICAgICAgICAgICB9YCwKICAgIG9uQ2xpY2s6IGBACiAgICAgICAgICAgIHRhZ3MuZm9ybUFkZHJlc3MgPSAncmFkaW9fYnV0dG9uX2NoZWNrZWQnOwogICAgICAgICAgICBjb25maWdCb3QudGFncy52ZXJzaW9uRGVmaW5lZCA9IG51bGw7CiAgICAgICAgICAgIHNob3V0KCd2ZXJzaW9uT3B0aW9uQ2xpY2snLCB0YWdzLmxhYmVsKTsKICAgICAgICAgICAgdGFnc1t0YWdzLmRpbWVuc2lvbl0gPSBudWxsOwogICAgICAgIGAsCiAgICB2ZXJzaW9uT3B0aW9uQ2xpY2s6IGBAIGlmICh0aGF0ID09IHRhZ3MubGFiZWwpIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIHRhZ3MuZm9ybUFkZHJlc3MgPSAncmFkaW9fYnV0dG9uX3VuY2hlY2tlZCc7CiAgICAgICAgICAgIHRhZ3NbdGFncy5kaW1lbnNpb25dID0gbnVsbDsKICAgICAgICBgCn0pOwoKLy8gRmVlZGJhY2sgVmVyc2lvbgpsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbih7CiAgICAuLi5kZWZhdWx0cywKICAgIGFiTWVudTogbnVsbCwKICAgIGxhYmVsOiAnZmVlZGJhY2snLAogICAgZGltZW5zaW9uOiAnYWJNZW51JywKICAgIGFiTWVudVNvcnRPcmRlcjogMS41MTEsCiAgICBmb3JtQWRkcmVzczogJ3JhZGlvX2J1dHRvbl91bmNoZWNrZWQnLAogICAgc2hvd1ZlcnNpb25TZWxlY3RvcjogYEAgdGFnc1t0YWdzLmRpbWVuc2lvbl0gPSB0cnVlO2AsCiAgICBoaWRlVmVyc2lvblNlbGVjdG9yOiBgQCB0YWdzW3RhZ3MuZGltZW5zaW9uXSA9IG51bGw7YCwKICAgIG9uS2V5VXA6IGBAIGlmICh0aGF0LmtleXNbMF0gPT0gIlNoaWZ0IikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGFnc1t0YWdzLmRpbWVuc2lvbl0gPSBmYWxzZTsKICAgICAgICAgICAgfWAsCiAgICBvbkNsaWNrOiBgQAogICAgICAgICAgICB0YWdzLmZvcm1BZGRyZXNzID0gJ3JhZGlvX2J1dHRvbl9jaGVja2VkJzsKICAgICAgICAgICAgY29uZmlnQm90LnRhZ3MudmVyc2lvbkRlZmluZWQgPSAnZmVlZGJhY2snOwogICAgICAgICAgICBzaG91dCgndmVyc2lvbk9wdGlvbkNsaWNrJywgdGFncy5sYWJlbCk7CiAgICAgICAgICAgIHRhZ3NbdGFncy5kaW1lbnNpb25dID0gbnVsbDsKICAgICAgICBgLAogICAgdmVyc2lvbk9wdGlvbkNsaWNrOiBgQCBpZiAodGhhdCA9PSB0YWdzLmxhYmVsKSB7IHJldHVybjsgfQogICAgICAgICAgICB0YWdzLmZvcm1BZGRyZXNzID0gJ3JhZGlvX2J1dHRvbl91bmNoZWNrZWQnOwogICAgICAgICAgICB0YWdzW3RhZ3MuZGltZW5zaW9uXSA9IG51bGw7CiAgICAgICAgYAp9KTsKCi8vIFN0YWJsZSBWZXJzaW9uCmxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKHsKICAgIC4uLmRlZmF1bHRzLAogICAgYWJNZW51OiBudWxsLAogICAgbGFiZWw6ICdzdGFibGUnLAogICAgZGltZW5zaW9uOiAnYWJNZW51JywKICAgIGFiTWVudVNvcnRPcmRlcjogMS41MTIsCiAgICBmb3JtQWRkcmVzczogJ3JhZGlvX2J1dHRvbl91bmNoZWNrZWQnLAogICAgc2hvd1ZlcnNpb25TZWxlY3RvcjogYEAgdGFnc1t0YWdzLmRpbWVuc2lvbl0gPSB0cnVlO2AsCiAgICBoaWRlVmVyc2lvblNlbGVjdG9yOiBgQCB0YWdzW3RhZ3MuZGltZW5zaW9uXSA9IG51bGw7YCwKICAgIG9uS2V5VXA6IGBAIGlmICh0aGF0LmtleXNbMF0gPT0gIlNoaWZ0IikKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGFnc1t0YWdzLmRpbWVuc2lvbl0gPSBmYWxzZTsKICAgICAgICAgICAgfWAsCiAgICBvbkNsaWNrOiBgQAogICAgICAgICAgICB0YWdzLmZvcm1BZGRyZXNzID0gJ3JhZGlvX2J1dHRvbl9jaGVja2VkJzsKICAgICAgICAgICAgY29uZmlnQm90LnRhZ3MudmVyc2lvbkRlZmluZWQgPSAnc3RhYmxlJzsKICAgICAgICAgICAgc2hvdXQoJ3ZlcnNpb25PcHRpb25DbGljaycsIHRhZ3MubGFiZWwpOwogICAgICAgICAgICB0YWdzW3RhZ3MuZGltZW5zaW9uXSA9IG51bGw7CiAgICAgICAgYCwKICAgIHZlcnNpb25PcHRpb25DbGljazogYEAgaWYgKHRoYXQgPT0gdGFncy5sYWJlbCkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGFncy5mb3JtQWRkcmVzcyA9ICdyYWRpb19idXR0b25fdW5jaGVja2VkJzsKICAgICAgICAgICAgdGFnc1t0YWdzLmRpbWVuc2lvbl0gPSBudWxsOwogICAgICAgIGAKfSk7CgovLyBDcmVhdGUgcHVibGlzaCBidXR0b24KbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24oewogICAgLi4uZGVmYXVsdHMsCiAgICBhYk1lbnVTb3J0T3JkZXI6IDQsCiAgICBmb3JtQWRkcmVzczogImVnZyIsCiAgICBtZW51SXRlbVN0eWxlOiBg8J+nrCB7CiAgICAgICAgImJvcmRlci1yYWRpdXMiOiAiMHB4IDBweCA4cHggOHB4IiwgCiAgICAgICAgIm1hcmdpbi10b3AiOiAiMHB4IiwgICAgICAgIAogICAgICAgICJib3JkZXItd2lkdGgiOiAiMnB4IiwgCiAgICAgICAgImJvcmRlci1jb2xvciI6ICIjMDAwIiwgCiAgICAgICAgImJvcmRlci1sZWZ0LXN0eWxlIjogInNvbGlkIiwKICAgICAgICAiYm9yZGVyLXJpZ2h0LXN0eWxlIjogInNvbGlkIiwKICAgICAgICAiYm9yZGVyLWJvdHRvbS1zdHlsZSI6ICJzb2xpZCIsCiAgICAgICAgImJveC1zaGFkb3ciOiAiM3B4IDRweCAjMDAwIiwKICAgICAgICAibWluLWhlaWdodCI6ICI0NHB4IgogICAgfWAsCiAgICBmb3JtOiAiaW5wdXQiLAogICAgbGFiZWxCb3Q6IGdldExpbmsobGFiZWxCb3QpLAogICAgb25JbnB1dFR5cGluZzogYEAgbGlua3MubGFiZWxCb3QudGFncy5sYWJlbCA9ICdwdWJsaXNoIHBhdHRlcm4gYXMgJyArIHRoYXQudGV4dCArICcgKCcgKyBsaW5rcy5sYWJlbEJvdC50YWdzLnRvdGFsQm90cyArICcgYm90JyArIChsaW5rcy5sYWJlbEJvdC50YWdzLnRvdGFsQm90cyA9PSAxID8gJyknIDogJ3MpJyk7YCwKICAgIG1lbnVJdGVtU2hvd1N1Ym1pdFdoZW5FbXB0eTogdHJ1ZSwKICAgIHRhcmdldEJvdDogZ2V0TGluayhwb3NzaWJsZVB1Ymxpc2hCb3QpLAogICAgbWVudUl0ZW1UZXh0OiBiYXNlQUIsCiAgICBvblN1Ym1pdDogYEAKICAgICAgICAgICAgaWYgKHRoYXQudGV4dCA9PSBudWxsICYmIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYmFzZUFCICYmICFsaW5rcy5yZW1lbWJlci5saW5rcy5hYkJvdEZvY3VzKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0aGF0LnRleHQgPSBsaW5rcy5yZW1lbWJlci50YWdzLmJhc2VBQjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3QgdGFyZ2V0U3R1ZGlvID0gY29uZmlnQm90LnRhZ3Muc2VsZWN0ZWRfc3R1ZGlvSUQgPz8gYXV0aEJvdC5pZDsKICAgICAgICAgICAgY29uc3QgY29uZmlybVB1c2ggPSBhd2FpdCBvcy5zaG93Q29uZmlybSh7CiAgICAgICAgICAgICAgICB0aXRsZTogImNvbmZpcm0gcHVibGlzaCIsCiAgICAgICAgICAgICAgICBjb250ZW50OiAicHVibGlzaCAiICsgdGhhdC50ZXh0ICsgIiB0byAiICsgdGFyZ2V0U3R1ZGlvICsgIj8iLAogICAgICAgICAgICAgICAgY29uZmlybVRleHQ6ICJwdWJsaXNoIiwKICAgICAgICAgICAgICAgIGNhbmNlbFRleHQ6ICJjYW5jZWwiCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaWYgKCFjb25maXJtUHVzaCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25maWdCb3QudGFncy5tYW51YWxQdWJsaXNoID0gdHJ1ZTsKCiAgICAgICAgICAgIGlmICh0aGF0LnRleHQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGxpbmtzLm1hbmFnZXIuYWJQdWJsaXNoQUIoe2FiOiB0aGF0LnRleHQsIG1hbnVhbFB1Ymxpc2g6IHRydWUsIGJvdDogbGlua3MudGFyZ2V0Qm90LCBiYXNlQUI6IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYmFzZUFCfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBvcy50b2FzdCgiYWIgbm90IHNwZWNpZmllZCIpOwogICAgICAgICAgICB9CiAgICAgICAgYCwKICAgIGFiU2VsZWN0VGl0bGVVcGRhdGU6IGBAIAogICAgaWYgKHRoYXQuYWIgPT0gIm5ldyBwYXR0ZXJuIikKICAgIHsKICAgICAgICBsaW5rcy5yZW1lbWJlci5tYXNrcy5iYXNlQUIgPSBudWxsOwoKICAgICAgICB0YWdzLm1lbnVJdGVtVGV4dCA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYmFzZUFCOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIHRhZ3MubWVudUl0ZW1UZXh0ID0gdGhhdC5hYjsKICAgIH1gCn0pOwoKaWYgKGxpbmtzLnJlbWVtYmVyLmxpbmtzLmFiQm90Rm9jdXMpIAp7CiAgICAvLyBDcmVhdGUgY29weSB0byBjbGlwYm9hcmQgYnV0dG9uCiAgICBsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbih7CiAgICAgICAgLi4uZGVmYXVsdHMsCiAgICAgICAgYWJNZW51U29ydE9yZGVyOiA4LAogICAgICAgIG1lbnVJdGVtU3R5bGU6IGDwn6esIHsKICAgICAgICAgICAgImJvcmRlci1yYWRpdXMiOiAiOHB4IiwgCiAgICAgICAgICAgICJtYXJnaW4tdG9wIjogIjhweCIsCiAgICAgICAgICAgICJib3JkZXItd2lkdGgiOiAiMnB4IiwgCiAgICAgICAgICAgICJib3JkZXItY29sb3IiOiAiIzAwMCIsIAogICAgICAgICAgICAiYm9yZGVyLXN0eWxlIjogInNvbGlkIiwKICAgICAgICAgICAgImJveC1zaGFkb3ciOiAiM3B4IDRweCAjMDAwIiwKICAgICAgICAgICAgIm1pbi1oZWlnaHQiOiAiNDRweCIKICAgICAgICB9YCwKICAgICAgICBsYWJlbDogImNvcHkgdG8gY2xpcGJvYXJkIiwKICAgICAgICBmb3JtQWRkcmVzczogImZpbGVfY29weSIsCiAgICAgICAgdGFyZ2V0Qm90OiBsaW5rcy5yZW1lbWJlci50YWdzLmFiQm90Rm9jdXMsCiAgICAgICAgb25DbGljazogYEAgbGV0IHNlbGVjdGVkQm90ID0gbGlua3MudGFyZ2V0Qm90OwogICAgICAgICAgICBsZXQgcHJlcHBlZEJvdCA9IEpTT04uc3RyaW5naWZ5KHNlbGVjdGVkQm90KTsKICAgICAgICAgICAgbGV0IHN0YXRlID0ge30KCiAgICAgICAgICAgIHN0YXRlW2FiSW5zdE1lbW9yeS50YWdzLmFiRm9jdXNEYXRhXSA9IHNlbGVjdGVkQm90OwoKICAgICAgICAgICAgbGV0IG5ld0ZpbGUgPSB7fQogICAgICAgICAgICBuZXdGaWxlLnZlcnNpb24gPSAxOwogICAgICAgICAgICBuZXdGaWxlLnN0YXRlID0gc3RhdGU7CgogICAgICAgICAgICB2YXIgZm9ybWF0dGVkRmlsZSA9IEpTT04uc3RyaW5naWZ5KG5ld0ZpbGUpOwogICAgICAgICAgICBvcy5zZXRDbGlwYm9hcmQoZm9ybWF0dGVkRmlsZSk7CgogICAgICAgICAgICBvcy50b2FzdCgiYm90IGNvcGllZCB0byBjbGlwYm9hcmQiKTsKCiAgICAgICAgICAgIHNob3V0KCJhYk1lbnVSZWZyZXNoIik7CiAgICAgICAgICAgIGxpbmtzLm1hbmlmZXN0YXRpb24uYWJDbGljaygpOwogICAgICAgIGAsCiAgICB9KTsKfQplbHNlIAp7CiAgICAvLyBDcmVhdGUgc2NhbiBidXR0b24KICAgIGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKHsKICAgICAgICAuLi5kZWZhdWx0cywKICAgICAgICBhYk1lbnVTb3J0T3JkZXI6IDEwLAogICAgICAgIG1lbnVJdGVtU3R5bGU6IGDwn6esIHsgICAgICAgICAgICAKICAgICAgICAgICAgImJvcmRlci1yYWRpdXMiOiAiOHB4IiwgCiAgICAgICAgICAgICJtYXJnaW4tdG9wIjogIjhweCIsCiAgICAgICAgICAgICJib3JkZXItd2lkdGgiOiAiMnB4IiwgCiAgICAgICAgICAgICJib3JkZXItY29sb3IiOiAiIzAwMCIsIAogICAgICAgICAgICAiYm9yZGVyLXN0eWxlIjogInNvbGlkIiwKICAgICAgICAgICAgImJveC1zaGFkb3ciOiAiM3B4IDRweCAjMDAwIiwKICAgICAgICAgICAgIm1pbi1oZWlnaHQiOiAiNDRweCIKICAgICAgICB9YCwKICAgICAgICBsYWJlbDogInNjYW4gdG8gcHVibGlzaCIsCiAgICAgICAgZm9ybUFkZHJlc3M6ICJxcl9jb2RlX3NjYW5uZXIiLAogICAgICAgIG9uQ2xpY2s6IGBAIGNvbmZpZ0JvdC50YWdzLnB1Ymxpc2hTY2FuID0gdHJ1ZTsgb3Mub3BlblFSQ29kZVNjYW5uZXIoKTtgLAogICAgfSk7Cn0KCmxldCBob3N0QnV0dG9uID0gewogICAgYWJNZW51OiB0cnVlLAogICAgYWJNZW51U29ydE9yZGVyOiA1MCwKICAgIGFiTWVudVJlZnJlc2g6ICJAIGRlc3Ryb3kodGhpc0JvdCk7IiwKICAgIGZvcm1BZGRyZXNzOiAiZ3JvdXBfYWRkIiwKICAgIGNvbG9yOiBsaW5rcy5yZW1lbWJlci50YWdzLmFiQmFzZVN0cm9rZUNvbG9yLAogICAgbGVhcm46IHRhZ3MubGVhcm4sCiAgICBvbkNsaWNrOiBgQCBsaW5rcy5sZWFybi5hYkNyZWF0ZUhvc3QodGhpc0JvdCk7CiAgICBpZiAoIWxpbmtzLnJlbWVtYmVyLnRhZ3MuaG9zdElEKQogICAgewogICAgICAgIHRhZ3MubGFiZWwgPSAnZ2VuZXJhdGluZyBjb2RlIG5vdyc7CiAgICB9YCwKfTsKCmlmIChsaW5rcy5yZW1lbWJlci50YWdzLmhvc3RJRCkgCnsKICAgIGhvc3RCdXR0b24ubGFiZWwgPSAiam9pbiBjb2RlOiAiICsgbGlua3MucmVtZW1iZXIudGFncy5ob3N0SUQuc3Vic3RyaW5nKDAsIDMpICsgIi0iICsgbGlua3MucmVtZW1iZXIudGFncy5ob3N0SUQuc3Vic3RyaW5nKDMpOwp9CmVsc2UgCnsKICAgIGhvc3RCdXR0b24ubGFiZWwgPSAiZ2VuZXJhdGUgam9pbiBjb2RlIjsKfQoKaWYgKGNvbmZpZ0JvdC50YWdzLnN0YXRpY0luc3QgPT0gdW5kZWZpbmVkKQp7CiAgICBsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbihob3N0QnV0dG9uKTsvL2dlbmVyYXRlIGEgaG9zdCBidXR0b24KfScA9JDTyQSZ7wEOYWJDb3JlTWVudUljb24CBAD0kNPJBOuRAwlpb3Nfc2hhcmUnAPSQ08kEme8BD2FiQ29yZU1lbnVMYWJlbAIEAPSQ08kE9ZEDBXNoYXJlJwD0kNPJBJnvARNhYkNvcmVNZW51U29ydE9yZGVyAgQA9JDTyQT7kQMBMycA9JDTyQSZ7wEIcmVtZW1iZXICBAD0kNPJBP2RAyjwn5SXZTUzODBhNmItOGI0ZC00YThiLThiMDQtNThlMWViMDNlNWU3JwD0kNPJBJnvAQthYlB1Ymxpc2hBQgIEAPSQ08kEpJIDmTRALy9zaG91dCgiYWJQdWJsaXNoQUIiLCB7YWI6ICIiLCBrZXk6ICIiLCB0YXJnZXQ6ICIifSk7CmlmICh0aGF0LmFiLmluZGV4T2YoIiAiKSAhPSAtMSB8fCB0aGF0LmFiLmluZGV4T2YoJyInKSAhPSAtMSkgewogICAgb3MudG9hc3QoInBhdHRlcm4gbmFtZXMgbWF5IG5vdCBjb250YWluIHNwYWNlcyBvciBxdW90YWlvbiBtYXJrcywgcGxlYXNlIHRyeSBhZ2Fpbi4iKTsKCiAgICByZXR1cm47Cn0KCmFiLmxvZyhsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgIjogcHVibGlzaGluZyAiICsgdGhhdC5hYik7CgpsZXQgcHJvZ3Jlc3NCdXR0b247CgpzaG91dCgiYWJNZW51UmVmcmVzaCIpOwoKLy9jbGVhciBhYiBidWlsZGVyCmlmIChsaW5rcy5tYW5pZmVzdGF0aW9uKSB7CiAgICBpZiAobGlua3MubWFuaWZlc3RhdGlvbi5saW5rcy5hYkJvdCkgewogICAgICAgIGRlc3Ryb3kobGlua3MubWFuaWZlc3RhdGlvbi5saW5rcy5hYkJvdCk7CiAgICB9Cn0KCi8vcHJvZ3Jlc3MgYmFyIGZvciBtYW51YWwgcHVibGlzaGluZyBjb25maXJtYXRpb24KaWYgKGNvbmZpZ0JvdC50YWdzLm1hbnVhbFB1Ymxpc2gpIHsKICAgIHByb2dyZXNzQnV0dG9uID0gYXdhaXQgbGlua3MuaW5wdXQuYWJQcm9ncmVzc0JhcihgdXBsb2FkaW5nICR7dGhhdC5hYn1gKTsKfQoKLy9hYiB2YXJpYWJsZXMKbGV0IGFiSUQgPSB0aGF0LmFiOwpsZXQga2V5ID0gdGhhdC5rZXk7CmxldCB0YXJnZXQgPSB0aGF0LnRhcmdldCA/IHRoYXQudGFyZ2V0IDogdGhhdC5ib3Q7CmxldCByZXR1cm5UeXBlID0gdGhhdC5yZXR1cm5UeXBlOwpsZXQgcHVibGljRmFjaW5nID0gdGhhdC5wdWJsaWNGYWNpbmcgPz8gY29uZmlnQm90LnRhZ3MucHVibGljRmFjaW5nOwpsZXQgc3RhdGUgPSB7fTsKbGV0IGZvcm1hdHRlZEZpbGUgPSB7fTsKCmNvbmZpZ0JvdC50YWdzLnB1YmxpY0ZhY2luZyA9IG51bGw7CgovL3RoaXMgbG9naWMgZm9ybWF0cyB0aGUgc3BlY2lmaWVkIGJvdHMgYW5kIHBhY2thZ2VzIHRoZW0gZm9yIHB1Ymxpc2hpbmcKaWYgKCFBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgdGFyZ2V0ICE9IG51bGwgJiYgdGFyZ2V0ICE9IHVuZGVmaW5lZCkgewoKfQplbHNlIGlmICghdGFyZ2V0IHx8IHRhcmdldC5sZW5ndGggPCAxKSB7CiAgICBjb25zdCBiYXNlQUIgPSB0aGF0LmJhc2VBQiA/PyBsaW5rcy5yZW1lbWJlci50YWdzLmJhc2VBQjsKCiAgICBpZiAoY29uZmlnQm90LnRhZ3MuYWJFeGNsdWRlVW5jbGFpbWVkICYmIGNvbmZpZ0JvdC50YWdzLnNlbGVjdGVkQUIpIHsKICAgICAgICB0YXJnZXQgPSBnZXRCb3RzKGJ5TW9kKHsgc3BhY2U6ICJzaGFyZWQiLCBhYklnbm9yZTogbnVsbCwgYWJJRE9yaWdpbjogYWJJRCB9KSk7CgogICAgICAgIGNvbmZpZ0JvdC50YWdzLmFiRXhjbHVkZVVuY2xhaW1lZCA9IG51bGw7CiAgICB9CiAgICBlbHNlIGlmIChjb25maWdCb3QudGFncy5zZWxlY3RlZEFCICYmIGdldEJvdCgiYWJJRE9yaWdpbiIsIGJhc2VBQikpIHsKICAgICAgICBjb25zdCBlZ2dCb3RzID0gZ2V0Qm90cyhieU1vZCh7IHNwYWNlOiAic2hhcmVkIiwgYWJJZ25vcmU6IG51bGwsIGFiSURPcmlnaW46IGNvbmZpZ0JvdC50YWdzLnNlbGVjdGVkQUIgfSkpOwogICAgICAgIGNvbnN0IG5ld0JvdHMgPSBnZXRCb3RzKGJ5TW9kKHsgc3BhY2U6ICJzaGFyZWQiLCBhYklnbm9yZTogbnVsbCwgYWJJRE9yaWdpbjogbnVsbCB9KSk7CgogICAgICAgIHRhcmdldCA9IFsuLi5lZ2dCb3RzLCAuLi5uZXdCb3RzXTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIHRhcmdldCA9IGdldEJvdHMoYnlNb2QoeyBzcGFjZTogInNoYXJlZCIsIGFiSWdub3JlOiBudWxsIH0pKTsKICAgIH0KCiAgICBzZXRUYWcodGFyZ2V0LCAiYWJJRE9yaWdpbiIsIGFiSUQpOwoKICAgIGNvbmZpZ0JvdC50YWdzLnNlbGVjdGVkQUIgPSBudWxsOwoKICAgIGlmICh0YXJnZXQubGVuZ3RoIDwgMSkgewogICAgICAgIG9zLnRvYXN0KCJObyBib3RzIGZvdW5kIHRvIHB1Ymxpc2giKTsKCiAgICAgICAgc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCiAgICAgICAgbGlua3MubWFuaWZlc3RhdGlvbi5hYkNsaWNrKCk7CgogICAgICAgIHJldHVybjsKICAgIH0KfQoKLy90aGlzIGxvZ2ljIGhhbmRsZXMgZ2VuZXJhdGluZyBhIGtleSBmb3IgZW5jcnlwdGlvbiAob3B0aW9uYWwpCmlmIChjb25maWdCb3QudGFncy5lbmNyeXB0aW9uKSB7CiAgICBsZXQga2V5Q2hlY2s7CgogICAgY29uZmlnQm90LnRhZ3MuZW5jcnlwdGlvbiA9IG51bGw7CgogICAga2V5ID0gYXdhaXQgb3Muc2hvd0lucHV0KCIiLCB7CiAgICAgICAgdHlwZTogJ3NlY3JldCcsCiAgICAgICAgdGl0bGU6ICdlbnRlciBhIHNlY3JldCBrZXknCiAgICB9KTsKCiAgICBpZiAoa2V5KSB7CiAgICAgICAga2V5Q2hlY2sgPSBhd2FpdCBvcy5zaG93SW5wdXQoIiIsIHsKICAgICAgICAgICAgdHlwZTogJ3NlY3JldCcsCiAgICAgICAgICAgIHRpdGxlOiAnY29uZmlybSBzZWNyZXQga2V5JwogICAgICAgIH0pOwogICAgfQoKICAgIGlmIChrZXkgIT0ga2V5Q2hlY2spIHsKICAgICAgICBpZiAoIWtleUNoZWNrKSB7CiAgICAgICAgICAgIG9zLnRvYXN0KCJubyBrZXkgZW50ZXJlZCIpOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgb3MudG9hc3QoImtleXMgZG8gbm90IG1hdGNoIik7CiAgICAgICAgfQoKICAgICAgICBzaG91dCgiYWJNZW51UmVmcmVzaCIpOwoKICAgICAgICBsaW5rcy5tYW5pZmVzdGF0aW9uLmFiQ2xpY2soKTsKCiAgICAgICAgcmV0dXJuOwogICAgfQp9CgovL2Zvcm1hdHRpbmcgYm90cyBmb3IgZmlsZSBzdG9yYWdlCmlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGV0IGN1cnJlbnRCb3RJRCA9IHRhcmdldFtpXS5pZDsKICAgICAgICBsZXQgY3VycmVudEJvdCA9IHRhcmdldFtpXTsKCiAgICAgICAgc3RhdGVbY3VycmVudEJvdElEXSA9IGN1cnJlbnRCb3Q7CiAgICB9Cn0KZWxzZSB7CiAgICBzdGF0ZVt0YXJnZXQuaWRdID0gdGFyZ2V0Owp9CgovL2NoZWNrcyBmb3IgcHJldmlvdXMgZWdncyBhbmQgcmV0dXJucyBkYXRhIGZvciBwcmV2aW91c2x5IHB1Ymxpc2hlZCBhYidzCmxldCBlZ2dDaGVjayA9IGF3YWl0IHRoaXNCb3QuYWJQcmV2aW91c0VnZ0NoZWNrKHsgYWJJRDogYWJJRCB9KTsKCi8vYWRkIHhwIGJvdCBoZXJlCmNvbnN0IHhwVmVyc2lvbkJvdCA9IHt9OwoKeHBWZXJzaW9uQm90LnNwYWNlID0gInNoYXJlZCI7CnhwVmVyc2lvbkJvdC5pZCA9ICJhYlhQQm90IjsKeHBWZXJzaW9uQm90LnRhZ3MgPSB7fTsKeHBWZXJzaW9uQm90LnRhZ3MuZm9ybSA9ICJub3RoaW5nIjsKeHBWZXJzaW9uQm90LnRhZ3Muc3lzdGVtID0gImFiLnBhdHRlcm4uYWJYUEJvdCI7CnhwVmVyc2lvbkJvdC50YWdzLmF1dGhvcklEID0gYXV0aEJvdC5pZDsKeHBWZXJzaW9uQm90LnRhZ3MudmVyc2lvbiA9IGVnZ0NoZWNrLmVnZ0RhdGEubWF4VmVyc2lvbjsKeHBWZXJzaW9uQm90LnRhZ3MueHAgPSBsaW5rcy5sZWFybi50YWdzLmFiWFA7CnhwVmVyc2lvbkJvdC50YWdzLnNpZ25hdHVyZSA9IGVnZ0NoZWNrLnNpZ25hdHVyZTsKeHBWZXJzaW9uQm90LnRhZ3MuYWJJZ25vcmUgPSB0cnVlOwoKc3RhdGUuYWJYUEJvdCA9IHhwVmVyc2lvbkJvdDsKCi8vYWRkaXRpb25hbCBmaWxlIGRhdGEKZm9ybWF0dGVkRmlsZS52ZXJzaW9uID0gMTsKZm9ybWF0dGVkRmlsZS5zaWduYXR1cmUgPSBlZ2dDaGVjay5zaWduYXR1cmU7CmZvcm1hdHRlZEZpbGUuc3RhdGUgPSBzdGF0ZTsKCi8vYWN0dWFsIGVuY3J5cHRpb24gaWYgY2hvc2VuCmlmIChrZXkpIHsKICAgIGZvcm1hdHRlZEZpbGUgPSBKU09OLnN0cmluZ2lmeShmb3JtYXR0ZWRGaWxlKTsKCiAgICBmb3JtYXR0ZWRGaWxlID0gY3J5cHRvLmVuY3J5cHQoa2V5LCBmb3JtYXR0ZWRGaWxlKTsKfQoKLy9wdWJsaXNoIHRoZSBmaWxlCmxldCBwdWJsaXNoRmlsZSA9IGF3YWl0IHRoaXNCb3QuYWJQdWJsaXNoRmlsZSh7IGZpbGU6IGZvcm1hdHRlZEZpbGUsIGZpbGVOYW1lOiBhYklEIH0pOwoKLy9nYXRoZXIgYWRkaW9uYWwgZWdnIGRhdGEKY29uc3QgYWlQZXJtaXRDaGVjayA9IGF3YWl0IG9zLmdldERhdGEoYXV0aEJvdC5pZCwgImFpX3Blcm1pdCIpOwpjb25zdCBhaVBlcm1pdElEID0gYWlQZXJtaXRDaGVjay5zdWNjZXNzID8gYWlQZXJtaXRDaGVjay5kYXRhLnBlcm1pdElEIDogZmFsc2U7CgplZ2dDaGVjay5lZ2dEYXRhLmFpUGVybWl0ID0gYWlQZXJtaXRJRDsKZWdnQ2hlY2suZWdnRGF0YS5lZ2dWZXJzaW9uSGlzdG9yeS5wdXNoKHB1Ymxpc2hGaWxlLnVybCk7CmVnZ0NoZWNrLmVnZ0RhdGEubWF4VmVyc2lvbiA9IGVnZ0NoZWNrLmVnZ0RhdGEuZWdnVmVyc2lvbkhpc3RvcnkubGVuZ3RoOwplZ2dDaGVjay5lZ2dEYXRhLnRhcmdldFZlcnNpb24gPSBlZ2dDaGVjay5lZ2dEYXRhLmVnZ1ZlcnNpb25IaXN0b3J5Lmxlbmd0aDsKCi8vcHVibGlzaCBlZ2cvYWIgcmVjb3JkCmxldCBwdWJsaXNoUmVjb3JkID0gYXdhaXQgdGhpc0JvdC5hYlB1Ymxpc2hSZWNvcmQoeyBkYXRhOiBlZ2dDaGVjay5lZ2dEYXRhLCByZWNvcmROYW1lOiBhYklELCBwdWJsaWNGYWNpbmc6IHB1YmxpY0ZhY2luZyB9KTsKbGV0IHNpdGVPcmlnaW4gPSBuZXcgVVJMKGNvbmZpZ0JvdC50YWdzLnVybCkub3JpZ2luOwoKLy9wdWJsaXNoaW5nIHNob3V0CnN1cGVyU2hvdXQoIm9uQUJQdWJsaXNoZWQiLCB7IHN1Y2Nlc3M6IHB1Ymxpc2hGaWxlLnN1Y2Nlc3MsIGFiOiBhYklELCBmaWxlQWRkcmVzczogcHVibGlzaEZpbGUudXJsIH0pOwpzdXBlclNob3V0KCJvbkFiUHVibGlzaGVkIiwgeyBzdWNjZXNzOiBwdWJsaXNoRmlsZS5zdWNjZXNzLCBhYjogYWJJRCwgZmlsZUFkZHJlc3M6IHB1Ymxpc2hGaWxlLnVybCB9KTsgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHkuCgpjb25zdCBzdHVkaW9MaW5rID0gY29uZmlnQm90LnRhZ3Muc2VsZWN0ZWRfc3R1ZGlvSUQgPz8gYXV0aEJvdC5pZDsKCi8vc2VuZCBkYXRhIGFuZCBmb3JtYXQgdXJsIGlmIGRhdGEgc3VjY2Vzc2Z1bGx5IHNlbnQKaWYgKHB1Ymxpc2hSZWNvcmQuc3VjY2VzcykgewogICAgY29uc3QgYmlvcyA9IHB1YmxpY0ZhY2luZyA/ICJmcmVlIiA6ICJsb2NhbCI7CiAgICBjb25zdCBpbnN0VHlwZSA9IHB1YmxpY0ZhY2luZyA/ICJmcmVlIiA6ICJsb2NhbCI7CgogICAgc2V0VGFnTWFzayhsaW5rcy5sZWFybiwgImFiWFAiLCAiMCIsICJsb2NhbCIpOwoKICAgIGlmIChjb25maWdCb3QudGFncy5tYW51YWxQdWJsaXNoKSB7CiAgICAgICAgY29uc3QgdXJsID0gc2l0ZU9yaWdpbiArICIvP3BhdHRlcm49IiArIGFiSUQgKyAiJnN0dWRpbz0iICsgc3R1ZGlvTGluayArICImYmlvcz0iICsgYmlvczsKICAgICAgICBvcy5zZXRDbGlwYm9hcmQodXJsKTsKCiAgICAgICAgaWYgKGtleSkgewogICAgICAgICAgICBvcy50b2FzdChgJHtpbnN0VHlwZX0gaW5zdCB1cmwgd2l0aCBlbmNyeXB0ZWQgZGF0YSBjb3BpZWQgdG8gY2xpcGJvYXJkYCwgNSk7CiAgICAgICAgICAgIGFiLmxvZyhgJHtsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5fTogJHtpbnN0VHlwZX0gaW5zdCB1cmwgd2l0aCBlbmNyeXB0ZWQgZGF0YSBjb3BpZWQgdG8gY2xpcGJvYXJkOiAke3VybH1gKTsKICAgICAgICAgICAgY29uc29sZS5sb2coYCR7bGlua3MucGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eX06ICR7aW5zdFR5cGV9IGluc3QgdXJsIHdpdGggZW5jcnlwdGVkIGRhdGEgY29waWVkIHRvIGNsaXBib2FyZDogJHt1cmx9YCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgb3MudG9hc3QoYCR7aW5zdFR5cGV9IGluc3QgdXJsIGNvcGllZCB0byBjbGlwYm9hcmRgLCA1KTsKICAgICAgICAgICAgYWIubG9nKGAke2xpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCdWlsZGVySWRlbnRpdHl9OiAke2luc3RUeXBlfSBpbnN0IHVybCBjb3BpZWQgdG8gY2xpcGJvYXJkOiAke3VybH1gKTsKICAgICAgICAgICAgY29uc29sZS5sb2coYCR7bGlua3MucGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eX06ICR7aW5zdFR5cGV9IGluc3QgdXJsIGNvcGllZCB0byBjbGlwYm9hcmQ6ICR7dXJsfWApOwogICAgICAgIH0KICAgIH0KCiAgICB0cnkgewogICAgICAgIGF3YWl0IGFuYWx5dGljcy5yZWNvcmRFdmVudCgnYWJfZWdnX3B1Ymxpc2gnLCB7IGFiOiBhYklELCB2ZXJzaW9uOiBlZ2dDaGVjay5lZ2dEYXRhLmVnZ1ZlcnNpb25IaXN0b3J5Lmxlbmd0aCB9KTsKICAgIH0KICAgIGNhdGNoIChlKSB7CiAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICB9Cn0KZWxzZSB7CiAgICBpZiAoIWNvbmZpZ0JvdC50YWdzLmFiU2lsZW50TW9kZSkgewogICAgICAgIG9zLnRvYXN0KCJwdWJsaXNoaW5nIGZhaWxlZCwgcGxlYXNlIHRyeSBhZ2FpbiIpOwogICAgfQoKICAgIGFiLmxvZyhsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgIjogcHVibGlzaGluZyBmYWlsZWQiKTsKCiAgICBjb25zb2xlLmxvZyhwdWJsaXNoUmVjb3JkKTsKfQoKLy9jbGVhciBwcm9ncmVzcyBiYXIKaWYgKHByb2dyZXNzQnV0dG9uKSB7CiAgICBkZXN0cm95KHByb2dyZXNzQnV0dG9uKTsKfQoKY29uZmlnQm90LnRhZ3MubWFudWFsUHVibGlzaCA9IG51bGw7CgpyZXR1cm4gcHVibGlzaFJlY29yZDsnAPSQ08kEme8BCGFiSWdub3JlAgQA9JDTyQS+xgMEdHJ1ZScA9JDTyQSZ7wEKYWJEb3dubG9hZAIEAPSQ08kEw8YD0AZALy9kb3dubG9hZCBib3RzIChlaXRoZXIgc2VsZWN0ZWQgb3IgYWxsIGV4cGVyaWVuY2UpCmxldCBkb3dubG9hZEJvdHM7Cgpjb25zb2xlLmxvZygiZG93bmxvYWQiLCB0aGF0KTsKCmlmIChBcnJheS5pc0FycmF5KHRoYXQucG9zc2libGVCb3RzKSkKewogICAgaWYgKHRoYXQucG9zc2libGVCb3RzLmxlbmd0aCA+IDApCiAgICB7CiAgICAgICAgZG93bmxvYWRCb3RzID0gdGhhdC5wb3NzaWJsZUJvdHM7CgogICAgICAgIGFiLmxvZyhsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgIjogZG93bmxvYWRpbmcgYm90cyIpOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGRvd25sb2FkQm90cyA9IGdldEJvdHMoYnlNb2QoeyJhYklnbm9yZSI6IG51bGwsICJzcGFjZSI6ICJzaGFyZWQifSkpOwoKICAgICAgICBhYi5sb2cobGlua3MucGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eSArICI6IGRvd25sb2FkaW5nIGluc3QiKTsKICAgIH0gICAgCn0KZWxzZQp7CgoKICAgIGRvd25sb2FkQm90cyA9IFt0aGF0LnBvc3NpYmxlQm90c107CgogICAgYWIubG9nKGxpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCdWlsZGVySWRlbnRpdHkgKyAiOiBkb3dubG9hZGluZyBib3QiKTsKfQoKaWYgKCFBcnJheS5pc0FycmF5KGRvd25sb2FkQm90cykpCnsKICAgIGRvd25sb2FkQm90cyA9IFtkb3dubG9hZEJvdHNdOwp9CgpsZXQgY3VycmVudEluc3QgPSBvcy5nZXRDdXJyZW50SW5zdCgpOwoKb3MuZG93bmxvYWRCb3RzKGRvd25sb2FkQm90cywgY3VycmVudEluc3QpOwoKc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCmxpbmtzLm1hbmlmZXN0YXRpb24uYWJDbGljaygpOycA9JDTyQSZ7wENbWFuaWZlc3RhdGlvbgIEAPSQ08kElM0DKPCflJdkY2E1ZDk4Ny1jNGQ4LTQ2ZTQtYjYwYy1kYWE3YjJmNGRkYWQnAPSQ08kEme8BBG1lbnUCBAD0kNPJBLvNAyjwn5SXYjMwYzZjNWQtYTRmNy00MjY2LWJhMzgtMzkzZGM5NWUxZWNiJwD0kNPJBJnvARJhYlByZXZpb3VzRWdnQ2hlY2sCBAD0kNPJBOLNA7EPQC8vdGhpcyBmdW5jdGlvbiBjaGVja3MgZm9yIHByZXZpb3VzIGVnZ3MgYXQgYSBzcGVjaWZpZWQgYWIsIHJldHVybmluZyBhbnkgZGF0YSB0aGF0IGl0IGZpbmRzCmNvbnN0IGFiSUQgPSB0aGF0LmFiSUQ7Cgphd2FpdCBvcy5yZXF1ZXN0QXV0aEJvdCgpOwoKbGV0IGVnZ0hpc3Rvcnk7CmxldCBlZ2dJRDsKbGV0IHRhcmdldFZlcnNpb25OdW07CmxldCBsYXN0SGFzaDsKbGV0IG1heFZlcnNpb25OdW07CmxldCBzdGFibGVWZXJzaW9uOwpsZXQgZmVlZGJhY2tWZXJzaW9uOwpsZXQgcHJldmlvdXNYUDsKbGV0IHVzZXJSZWNvcmQgPSBjb25maWdCb3QudGFncy5zZWxlY3RlZF9zdHVkaW9JRCA/IGNvbmZpZ0JvdC50YWdzLnNlbGVjdGVkX3N0dWRpb0lEIDogY29uZmlnQm90LnRhZ3Muc3R1ZGlvID8gY29uZmlnQm90LnRhZ3Muc3R1ZGlvIDogYXV0aEJvdC5pZDsKbGV0IHJlY29yZExvb2t1cCA9IGF3YWl0IG9zLmdldERhdGEodXNlclJlY29yZCwgYWJJRCkuY2F0Y2goZSA9PiB7fSk7CgppZiAocmVjb3JkTG9va3VwLnN1Y2Nlc3MpIAp7CiAgICBlZ2dIaXN0b3J5ID0gcmVjb3JkTG9va3VwLmRhdGEuZWdnVmVyc2lvbkhpc3Rvcnk7CiAgICBlZ2dJRCA9IHJlY29yZExvb2t1cC5kYXRhLmVnZ0lEOwogICAgcHJldmlvdXNYUCA9IHJlY29yZExvb2t1cC5kYXRhLnhwID8/IDA7CiAgICB0YXJnZXRWZXJzaW9uTnVtID0gZWdnSGlzdG9yeS5sZW5ndGggKyAxOwogICAgbGFzdEhhc2ggPSBlZ2dIaXN0b3J5W3RhcmdldFZlcnNpb25OdW0gLSAxXTsKICAgIHN0YWJsZVZlcnNpb24gPSByZWNvcmRMb29rdXAuZGF0YS5zdGFibGVWZXJzaW9uOwogICAgZmVlZGJhY2tWZXJzaW9uID0gcmVjb3JkTG9va3VwLmRhdGEuZmVlZGJhY2tWZXJzaW9uOwogICAgbWF4VmVyc2lvbk51bSA9IGVnZ0hpc3RvcnkubGVuZ3RoICsgMTsKfSAKZWxzZSAKewogICAgZWdnSGlzdG9yeSA9IFtdOwogICAgZWdnSUQgPSB1dWlkKCk7CiAgICB0YXJnZXRWZXJzaW9uTnVtID0gMTsKICAgIGxhc3RIYXNoID0gIm5vbmUiOwogICAgbWF4VmVyc2lvbk51bSA9IDE7CiAgICBwcmV2aW91c1hQID0gMDsKfQoKaWYgKGNvbmZpZ0JvdC50YWdzLnZlcnNpb25EZWZpbmVkID09ICJmZWVkYmFjayIpIAp7CiAgICBmZWVkYmFja1ZlcnNpb24gPSBlZ2dIaXN0b3J5Lmxlbmd0aCArIDE7Cn0KZWxzZSBpZiAoY29uZmlnQm90LnRhZ3MudmVyc2lvbkRlZmluZWQgPT0gInN0YWJsZSIpCnsKICAgIHN0YWJsZVZlcnNpb24gPSBlZ2dIaXN0b3J5Lmxlbmd0aCArIDE7Cn0KCmNvbmZpZ0JvdC50YWdzLnZlcnNpb25EZWZpbmVkID0gbnVsbDsKCmxldCBlZ2cgPSB7fTsKCmVnZy5lZ2dWZXJzaW9uSGlzdG9yeSA9IGVnZ0hpc3Rvcnk7CmVnZy5lZ2dGb3JtYXRWZXJzaW9uID0gZWdnSUQ7CmVnZy50YXJnZXRWZXJzaW9uID0gdGFyZ2V0VmVyc2lvbk51bTsKZWdnLm1heFZlcnNpb24gPSBtYXhWZXJzaW9uTnVtOwplZ2cubGFiZWwgPSAidiIrdGFyZ2V0VmVyc2lvbk51bTsKZWdnLnN0YWJsZVZlcnNpb24gPSBzdGFibGVWZXJzaW9uOwplZ2cuZmVlZGJhY2tWZXJzaW9uID0gZmVlZGJhY2tWZXJzaW9uOwplZ2cuYWJJRCA9IGFiSUQ7CmVnZy54cCA9IGxpbmtzLmxlYXJuLnRhZ3MuYWJYUDsKCmxldCBzaWduYXR1cmUgPSB7fTsKbGV0IGRhdGUgPSBuZXcgRGF0ZSgpOwpsZXQgdGltZSA9IGRhdGUuZ2V0VGltZSgpOwoKc2lnbmF0dXJlLnByZXZpb3VzSGFzaCA9IGxhc3RIYXNoOwpzaWduYXR1cmUuYWJWZXJzaW9uID0gbGlua3MucmVtZW1iZXIudGFncy5hYkNvcmVWZXJzaW9uOwpzaWduYXR1cmUuZWdnVmVyc2lvbiA9IHRhZ3MuZWdnVVVJRDsKc2lnbmF0dXJlLmVnZ1ZlcnNpb25OdW0gPSB0YWdzLm92b1ZlcnNpb247CnNpZ25hdHVyZS50aW1lU3RhbXAgPSB0aW1lOwpzaWduYXR1cmUuY2FzdWFsT1NWZXJzaW9uID0gW29zLnZlcnNpb24oKV07CgpyZXR1cm4ge3NpZ25hdHVyZTogc2lnbmF0dXJlLCBlZ2dEYXRhOiBlZ2d9OycA9JDTyQSZ7wEPYWJCb3RNZW51QWN0aW9uAgQA9JDTyQSU3QNNQGF3YWl0IG9zLnJlcXVlc3RBdXRoQm90KCk7CgovL3NldCB1cCB0aGUgcHVibGlzaCBtZW51CnRoaXNCb3Qub25TdG9yZU1lbnUoKTsnAPSQ08kEme8BDmFiQm90TWVudUxhYmVsAgQA9JDTyQTi3QMFc2hhcmUnAPSQ08kEme8BDWFiQm90TWVudUljb24CBAD0kNPJBOjdAwlpb3Nfc2hhcmUnAPSQ08kEme8BEmFiQm90TWVudVNvcnRPcmRlcgIEAPSQ08kE8t0DAzMuNScA9JDTyQSZ7wEFbGVhcm4CBAD0kNPJBPbdAyjwn5SXNjY1N2I4NjUtZTk4My00NDAxLTlmYzktZjU0MThkMThhN2Y3JwD0kNPJBJnvAQthYlFSUHVibGlzaAIEAPSQ08kEnd4DxgFAY29uZmlnQm90LnRhZ3MucHVibGlzaFNjYW4gPSBudWxsOwoKbGV0IHNjYW5uZWRVUkw7Cgp0cnkgCnsKICAgIHNjYW5uZWRVUkwgPSBuZXcgVVJMKHRoYXQpOwp9CmNhdGNoIChlKSAKewogICAgc2hvdXQoImFiUHVibGlzaEFCIiwge2FiOiB0aGF0fSk7CgogICAgdGhpc0JvdC5hYlB1Ymxpc2hBQih7YWI6IHRoYXR9KTsKCiAgICByZXR1cm47Cn0nAPSQ08kEme8BBnNlYXJjaAIEAPSQ08kE5N8DKPCflJdkODM3MTQ0NC05MTU4LTQ0MzYtOGZjNy04NGNjOTFiN2Y1MjUnAPSQ08kEme8BB2FiU2hlbGwCBAD0kNPJBIvgAwR0cnVlJwD0kNPJBJnvAQxzdHVkaW9TZWxlY3QCBAD0kNPJBJDgA4sLQC8vc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCmNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gImFiU3R1ZGlvTWVudSI7CgpsaW5rcy5tZW51Lm1hc2tzLm9uR3JpZENsaWNrID0gIkAgc2hvdXQoJ2FiTWVudVJlZnJlc2gnKTsgbGlua3MubWFuaWZlc3RhdGlvbi5hYkNsaWNrKCk7IjsKCmNvbnN0IHN0dWRpb3MgPSB0aGF0LnN0dWRpb3M7CmNvbnN0IHRhcmdldFN0dWRpbyA9IGNvbmZpZ0JvdC50YWdzLnNlbGVjdGVkX3N0dWRpb0lEID8gY29uZmlnQm90LnRhZ3Muc2VsZWN0ZWRfc3R1ZGlvSUQgOiBjb25maWdCb3QudGFncy5zdHVkaW8gPyBjb25maWdCb3QudGFncy5zdHVkaW8gOiBhdXRoQm90LmlkOwpjb25zdCBtZW51QnV0dG9uID0ge307CgptZW51QnV0dG9uLmFiU3R1ZGlvTWVudSA9IHRydWU7Cm1lbnVCdXR0b24uYWJNZW51U29ydE9yZGVyID0gMDsKbWVudUJ1dHRvbi5hYk1lbnVSZWZyZXNoID0gIkAgZGVzdHJveSh0aGlzQm90KTsiOwptZW51QnV0dG9uLmFiU3R1ZGlvTWVudVJlZnJlc2ggPSAiQCBkZXN0cm95KHRoaXNCb3QpOyI7Cm1lbnVCdXR0b24ubGFiZWwgPSAicGxheWVyIHN0dWRpbyI7Cm1lbnVCdXR0b24uZm9ybUFkZHJlc3MgPSB0YXJnZXRTdHVkaW8gPT0gYXV0aEJvdC5pZCA/ICJyYWRpb19idXR0b25fY2hlY2tlZCIgOiAicmFkaW9fYnV0dG9uX3VuY2hlY2tlZCI7Cm1lbnVCdXR0b24uY29sb3IgPSBsaW5rcy5yZW1lbWJlci50YWdzLmFiQmFzZVN0cm9rZUNvbG9yOwptZW51QnV0dG9uLm1hbmFnZXIgPSAi8J+UlyIgKyB0aGlzQm90LmlkOwptZW51QnV0dG9uLnN0dWRpb0lEID0gYXV0aEJvdC5pZDsKbWVudUJ1dHRvbi5vbkNsaWNrID0gYEAgY29uZmlnQm90LnRhZ3Muc2VsZWN0ZWRfc3R1ZGlvSUQgPSB0YWdzLnN0dWRpb0lEOwoKbGlua3MubWFuYWdlci5saW5rcy5zdHVkaW9TZWxlY3RCdXR0b24udGFncy5sYWJlbCA9IHRhZ3MubGFiZWw7CgpzaG91dCgiYWJTdHVkaW9NZW51UmVmcmVzaCIpOwoKY29uZmlnQm90Lm1hc2tzLm1lbnVQb3J0YWwgPSAiYWJNZW51IjtgOwoKbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24obWVudUJ1dHRvbik7Cgpmb3IgKGxldCBpID0gMDsgaSA8IHN0dWRpb3MubGVuZ3RoOyBpKyspCnsKICAgIGxldCBhY3RpdmVTdHVkaW8gPSBzdHVkaW9zW2ldOwoKICAgIG1lbnVCdXR0b24uZm9ybUFkZHJlc3MgPSB0YXJnZXRTdHVkaW8gPT0gYWN0aXZlU3R1ZGlvLnN0dWRpb0lkID8gInJhZGlvX2J1dHRvbl9jaGVja2VkIiA6ICJyYWRpb19idXR0b25fdW5jaGVja2VkIjsKICAgIG1lbnVCdXR0b24ubGFiZWwgPSBhY3RpdmVTdHVkaW8uZGlzcGxheU5hbWU7CiAgICBtZW51QnV0dG9uLnN0dWRpb0lEID0gYWN0aXZlU3R1ZGlvLnN0dWRpb0lkOwoKICAgIGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKG1lbnVCdXR0b24pOwp9JwD0kNPJBJnvAQ5hYlB1Ymxpc2hBc2tJRAIEAPSQ08kEmusD9ARAbGV0IHByb2dyZXNzQnV0dG9uID0gYXdhaXQgbGlua3MuaW5wdXQuYWJQcm9ncmVzc0JhcihgcHVibGlzaGluZyAke3RoYXQuYXNrSUR9YCk7Cgphd2FpdCBvcy5yZXF1ZXN0QXV0aEJvdCgpOwoKY29uc3QgcGF0dGVybklEID0gdGhhdC5wYXR0ZXJuSUQ7CmNvbnN0IHN0dWRpb0lEID0gdGhhdC5zdHVkaW9JRCA/IHRoYXQuc3R1ZGlvSUQgOiBjb25maWdCb3QudGFncy5zZWxlY3RlZF9zdHVkaW9JRCA/IGNvbmZpZ0JvdC50YWdzLnNlbGVjdGVkX3N0dWRpb0lEIDogYXV0aEJvdC5pZDsKY29uc3QgYXNrSUQgPSAiYXNrXyIgKyB0aGF0LmFza0lELnJlcGxhY2VBbGwoIi0iLCAiIik7CmNvbnN0IGVuZHBvaW50ID0gbGlua3MucmVtZW1iZXIudGFncy5hYkVuZHBvaW50Owpjb25zdCBwdWJsaXNoQXNrID0gYXdhaXQgb3MucmVjb3JkRGF0YShsaW5rcy5yZW1lbWJlci50YWdzLmFiUmVjb3JkS2V5LCBhc2tJRCwge3BhdHRlcm5JRDogcGF0dGVybklELCBzdHVkaW9JRDogc3R1ZGlvSUR9LCB7ZW5kcG9pbnQ6IGVuZHBvaW50LCB1cGRhdGVQb2xpY3k6IFthdXRoQm90LmlkXX0pOwoKaWYgKHByb2dyZXNzQnV0dG9uKQp7CiAgICBkZXN0cm95KHByb2dyZXNzQnV0dG9uKTsKfQoKcmV0dXJuIHB1Ymxpc2hBc2s7JwD0kNPJBJnvAQVpbnB1dAIEAPSQ08kEj/ADKPCflJdmODYwMjg3OC1jMmVmLTQ4YmQtODVhMC04ZDYzNTFlYjQxMjAnAPSQ08kEme8BC2FiRW1iZWRMaW5rAgQA9JDTyQS28AOkA0Bjb25zdCBhYiA9IHRoYXQgPyB0cnVlIDogZmFsc2U7CmNvbnN0IGVtYmVkTGluayA9IGFiID8gImFiPSIgKyB0aGF0IDogImluc3Q9IiArIGNvbmZpZ0JvdC50YWdzLmluc3Q7CmNvbnN0IHNpdGVPcmlnaW4gPSBuZXcgVVJMKGNvbmZpZ0JvdC50YWdzLnVybCkub3JpZ2luOwpjb25zdCBlbWJlZFRleHQgPSBgPCFET0NUWVBFIGh0bWw+CsKgwqDCoMKgPGh0bWw+CsKgwqDCoMKgwqDCoMKgwqA8aGVhZD48L2hlYWQ+CsKgwqDCoMKgwqDCoMKgwqA8Ym9keT4KwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgPGlmcmFtZSBzcmM9IiR7c2l0ZU9yaWdpbiArICIvPyIgKyBlbWJlZExpbmt9IiB3aWR0aD0iMTAwJSIgaGVpZ2h0PSI0MDAiIC8+CsKgwqDCoMKgwqDCoMKgwqA8L2JvZHk+CsKgwqDCoMKgPC9odG1sPmA7CgpyZXR1cm4gZW1iZWRUZXh0OycA9JDTyQSZ7wEPYWJQYXR0ZXJuVXBkYXRlAgQA9JDTyQSv8wOFBUAvL3Nob3V0KCJhYlBhdHRlcm5VcGRhdGUiLCB7YWJJRDogYWJJRCwgc3R1ZGlvOnN0dWRpbz8sIGJvdHM6IGJvdHM/fSk7CmF3YWl0IG9zLnJlcXVlc3RBdXRoQm90KCk7CgppZiAoIWF1dGhCb3QpCnsKICAgIHJldHVybjsKfQoKY29uc3QgYWJJRCA9IHRoYXQuYWJJRDsKY29uc3Qgc3R1ZGlvID0gdGhhdC5zdHVkaW8gPyB0aGF0LnN0dWRpbyA6IGNvbmZpZ0JvdC50YWdzLnN0dWRpbyA/IGNvbmZpZ0JvdC50YWdzLnN0dWRpbyA6IGF1dGhCb3QuaWQ7CmNvbnN0IGFiTWFuaWZlc3QgPSBnZXRCb3QoYnlNb2Qoe2FiRWdnOiB0cnVlLCBvcmlnaW5fYWI6IGFiSUR9KSk7CgppZiAoIWFiTWFuaWZlc3QpCnsKICAgIHNob3V0KCJvbkxvb2t1cEFCRWdncyIsIHthYklEOiBhYklELCByZWNvcmRLZXk6IHN0dWRpbywgYXV0b0hhdGNoOiB0cnVlLCBzb3VyY2VFdmVudDogJ3BhdHRlcm51cGRhdGUnfSk7CgogICAgcmV0dXJuOwp9Cgpjb25maWdCb3QudGFncy5zZWxlY3RlZF9zdHVkaW9JRCA9IHN0dWRpbzsKCmNvbnN0IGFiQm90cyA9IHRoYXQuYm90cyA/PyBnZXRCb3RzKCJhYklET3JpZ2luIiwgYWJJRCk7Cgphd2FpdCB0aGlzQm90LmFiUHVibGlzaEFCKHthYjogYWJJRCwgdGFyZ2V0OiBhYkJvdHMsIHB1YmxpY0ZhY2luZzogdHJ1ZX0pOycA9JDTyQSZ7wEXYWJNdWx0aXBsZUJvdE1lbnVBY3Rpb24CBAD0kNPJBLX4A01AYXdhaXQgb3MucmVxdWVzdEF1dGhCb3QoKTsKCi8vc2V0IHVwIHRoZSBwdWJsaXNoIG1lbnUKdGhpc0JvdC5vblN0b3JlTWVudSgpOycA9JDTyQSZ7wEaYWJNdWx0aXBsZUJvdE1lbnVTb3J0T3JkZXICBAD0kNPJBIP5AwEyJwD0kNPJBJnvARVhYk11bHRpcGxlQm90TWVudUljb24CBAD0kNPJBIX5Awlpb3Nfc2hhcmUnAPSQ08kEme8BFmFiTXVsdGlwbGVCb3RNZW51TGFiZWwCBAD0kNPJBI/5AwVzaGFyZScA9JDTyQSZ7wEPYWJQdWJsaXNoU2VsZWN0AgQA9JDTyQSV+QOJE0AvL3Nob3V0KCJhYk1lbnVSZWZyZXNoIik7Cgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9ICJhYlBhdHRlcm5NZW51IjsKCmxpbmtzLm1lbnUubWFza3Mub25HcmlkQ2xpY2sgPSAiQCBzaG91dCgnYWJNZW51UmVmcmVzaCcpOyBsaW5rcy5tYW5pZmVzdGF0aW9uLmFiQ2xpY2soKTsiOwoKY29uc3QgYWxsQm90cyA9IGdldEJvdHMoImFiSURPcmlnaW4iKTsKY29uc3QgYWxsUGF0dGVybnMgPSBbIm5ldyBwYXR0ZXJuIl07Cgpib3RMb29wOgpmb3IgKGxldCBpID0gMDsgaSA8IGFsbEJvdHMubGVuZ3RoOyBpKyspCnsKICAgIGNvbnN0IGFjdGl2ZUJvdCA9IGFsbEJvdHNbaV07CgogICAgaWYgKGFjdGl2ZUJvdC50YWdzLmFiSWdub3JlKQogICAgewogICAgICAgIGNvbnRpbnVlIGJvdExvb3A7CiAgICB9CgogICAgY29uc3QgcG9zc2libGVQYXR0ZXJuID0gYWN0aXZlQm90LnRhZ3MuYWJJRE9yaWdpbjsKCiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFsbFBhdHRlcm5zLmxlbmd0aDsgaisrKQogICAgewogICAgICAgIGNvbnN0IGFjdGl2ZVBhdHRlcm4gPSBhbGxQYXR0ZXJuc1tqXTsKCiAgICAgICAgaWYgKGFjdGl2ZVBhdHRlcm4gPT0gcG9zc2libGVQYXR0ZXJuICkKICAgICAgICB7CiAgICAgICAgICAgIGNvbnRpbnVlIGJvdExvb3A7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGogPT0gYWxsUGF0dGVybnMubGVuZ3RoIC0gMSkKICAgICAgICB7CiAgICAgICAgICAgIGFsbFBhdHRlcm5zLnB1c2gocG9zc2libGVQYXR0ZXJuKTsKICAgICAgICB9CiAgICB9Cn0KCmNvbnN0IHRhcmdldEFCID0gbGlua3MucmVtZW1iZXIudGFncy5iYXNlQUI7CmNvbnN0IG1lbnVCdXR0b24gPSB7fTsKCm1lbnVCdXR0b24uYWJQYXR0ZXJuTWVudSA9IHRydWU7Cm1lbnVCdXR0b24uYWJQYXR0ZXJuTWVudVNvcnRPcmRlciA9IDA7Cm1lbnVCdXR0b24uYWJNZW51UmVmcmVzaCA9ICJAIGRlc3Ryb3kodGhpc0JvdCk7IjsKbWVudUJ1dHRvbi5hYlBhdHRlcm5NZW51UmVmcmVzaCA9ICJAIGRlc3Ryb3kodGhpc0JvdCk7IjsKbWVudUJ1dHRvbi5jb2xvciA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJCYXNlU3Ryb2tlQ29sb3I7Cm1lbnVCdXR0b24ubWFuYWdlciA9ICLwn5SXIiArIHRoaXNCb3QuaWQ7Cm1lbnVCdXR0b24ucmVtZW1iZXIgPSB0YWdzLnJlbWVtYmVyOwptZW51QnV0dG9uLm9uQ2xpY2sgPSBgQGNvbnN0IHRvdGFsUGF0dGVybkJvdHMgPSBnZXRCb3RzKGJ5TW9kKHthYklET3JpZ2luOiB0YWdzLmxhYmVsLCBzcGFjZTogInNoYXJlZCIsIGFiSWdub3JlOiBudWxsfSkpOwpjb25zdCBub25QYXR0ZXJuQm90cyA9IGdldEJvdHMoYnlNb2Qoe2FiSURPcmlnaW46IG51bGwsIHNwYWNlOiAic2hhcmVkIiwgYWJJZ25vcmU6IG51bGx9KSk7CgpzaG91dCgiYWJTZWxlY3RUaXRsZVVwZGF0ZSIsIHthYjogdGFncy5sYWJlbCwgYWJCb3RzOiB0b3RhbFBhdHRlcm5Cb3RzLmxlbmd0aCwgbm9uQUJCb3RzOiBub25QYXR0ZXJuQm90cy5sZW5ndGh9KTsKCmxpbmtzLnJlbWVtYmVyLm1hc2tzLmJhc2VBQiA9IHRhZ3MubGFiZWwgPT0gIm5ldyBwYXR0ZXJuIiA/IG51bGwgOiB0YWdzLmxhYmVsOwoKY29uZmlnQm90LnRhZ3Muc2VsZWN0ZWRBQiA9IHRhZ3MubGFiZWwgPT0gIm5ldyBwYXR0ZXJuIiA/IG51bGwgOiB0YWdzLmxhYmVsOwoKc2hvdXQoImFiUGF0dGVybk1lbnVSZWZyZXNoIik7Cgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9ICJhYk1lbnUiO2A7CgphbGxQYXR0ZXJucy5zb3J0KCk7Cgpmb3IgKGxldCBpID0gMDsgaSA8IGFsbFBhdHRlcm5zLmxlbmd0aDsgaSsrKQp7CiAgICBsZXQgYWN0aXZlUGF0dGVybk5hbWUgPSBhbGxQYXR0ZXJuc1tpXTsKCiAgICBtZW51QnV0dG9uLmZvcm1BZGRyZXNzID0gdGFyZ2V0QUIgPT0gYWN0aXZlUGF0dGVybk5hbWUgPyAicmFkaW9fYnV0dG9uX2NoZWNrZWQiIDogInJhZGlvX2J1dHRvbl91bmNoZWNrZWQiOwogICAgbWVudUJ1dHRvbi5sYWJlbCA9IGFjdGl2ZVBhdHRlcm5OYW1lOwoKICAgIGlmIChhY3RpdmVQYXR0ZXJuTmFtZSA9PSAibmV3IHBhdHRlcm4iKQogICAgewogICAgICAgIG1lbnVCdXR0b24uYWJQYXR0ZXJuTWVudVNvcnRPcmRlciA9IC0xOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIG1lbnVCdXR0b24uYWJQYXR0ZXJuTWVudVNvcnRPcmRlciA9IGk7CiAgICB9CgogICAgbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24obWVudUJ1dHRvbik7Cn0KCmlmICghZ2V0Qm90KGJ5TW9kKHthYlBhdHRlcm5NZW51OiB0cnVlLCBmb3JtQWRkcmVzczogInJhZGlvX2J1dHRvbl9jaGVja2VkIn0pKSkKewogICAgY29uc3QgbmV3Qm90ID0gZ2V0Qm90KGJ5TW9kKHthYlBhdHRlcm5NZW51OiB0cnVlLCBsYWJlbDogIm5ldyBwYXR0ZXJuIn0pKTsKICAgIAogICAgbmV3Qm90LnRhZ3MuZm9ybUFkZHJlc3MgPSAicmFkaW9fYnV0dG9uX2NoZWNrZWQiOwp9JwD0kNPJBJnvAQlhYlZlcnNpb24CBAD0kNPJBJ2MBAQxMC41JwD0kNPJBJnvAQtwZXJzb25hbGl0eQIEAPSQ08kEoowEKPCflJdiNzZkZmJjNC04NTRiLTRmNmQtYTkxZi1hOTQ4Njk0Nzc0ZGInAQRib3RzJDc4ZTQxNTAzLWM5MzMtNGY4YS04MTdhLWJhOTdiZjhkNWQyNwEnAPSQ08kEyYwEBnN5c3RlbQIEAPSQ08kEyowEEWFiLnNoZWxsLmFydGlmYWN0JwD0kNPJBMmMBAhhYklnbm9yZQIEAPSQ08kE3IwEBHRydWUnAPSQ08kEyYwECWFiVmVyc2lvbgIEAPSQ08kE4YwEBDEwLjUnAPSQ08kEyYwEBWRlYnVnAgQA9JDTyQTmjAQEdHJ1ZScA9JDTyQTJjAQIcmVtZW1iZXICBAD0kNPJBOuMBCjwn5SXZTUzODBhNmItOGI0ZC00YThiLThiMDQtNThlMWViMDNlNWU3JwD0kNPJBMmMBBNhYkNyZWF0ZUFydGlmYWN0Qm90AgQA9JDTyQSSjQTLCEBjb25zdCB7IAogICAgYWJBcnRpZmFjdE5hbWUsCiAgICBkaW1lbnNpb24gPSBsaW5rcy5sZWFybi50YWdzLmFiSW5zdCA/PyAnaG9tZScsCiAgICBwb3NpdGlvbiA9IG5ldyBWZWN0b3IzKDAsIDAsIDApLAogICAgY3VzdG9tVGFncyA9IHt9Cn0gPSB0aGF0ID8/IHt9OwoKYXNzZXJ0KGFiQXJ0aWZhY3ROYW1lLCBgWyR7dGFncy5zeXN0ZW19LiR7dGFnTmFtZX1dIGFiQXJ0aWZhY3ROYW1lIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyLmApOwoKY29uc3QgYWJBcnRpZmFjdEJhc2VDb2xvciA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJBcnRpZmFjdEJhc2VDb2xvciA/PyB0YWdzLmFiQXJ0aWZhY3RCYXNlQ29sb3JEZWZhdWx0Owpjb25zdCBhYkFydGlmYWN0TGFiZWxDb2xvciA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJBcnRpZmFjdExhYmVsQ29sb3IgPz8gdGFncy5hYkFydGlmYWN0TGFiZWxDb2xvckRlZmF1bHQ7Cgpjb25zdCBhYkFydGlmYWN0Qm90ID0gY3JlYXRlKHsKICAgIHNwYWNlOiAnc2hhcmVkJywKICAgIGFiQXJ0aWZhY3ROYW1lLAogICAgYWJBcnRpZmFjdEJvdDogdHJ1ZSwKICAgIFtkaW1lbnNpb25dOiB0cnVlLAogICAgW2Ake2RpbWVuc2lvbn1YYF06IHBvc2l0aW9uLngsCiAgICBbYCR7ZGltZW5zaW9ufVlgXTogcG9zaXRpb24ueSwKICAgIFtgJHtkaW1lbnNpb259WmBdOiBwb3NpdGlvbi56LAogICAgY29sb3I6IGFiQXJ0aWZhY3RCYXNlQ29sb3IsCiAgICBjdXJzb3I6ICdwb2ludGVyJywKICAgIGxhYmVsQ29sb3I6IGFiQXJ0aWZhY3RMYWJlbENvbG9yLAogICAgc3Ryb2tlQ29sb3I6IGFiQXJ0aWZhY3RMYWJlbENvbG9yLAogICAgbGFiZWw6IGBhcnRpZmFjdDogJHthYkFydGlmYWN0TmFtZX1gLAogICAgb25BQkFydGlmYWN0UmVjb25zdGl0dXRlOiBgQAogICAgICAgIC8vIEhpZGUgYXJ0aWZhY3QgYm90IG9uY2UgaXQgaGFzIGJlZW4gcmVjb25zdGl0dXRlZC4KICAgICAgICBzZXRUYWdNYXNrKHRoaXNCb3QsICdmb3JtJywgJ25vdGhpbmcnLCAnc2hhcmVkJyk7CiAgICAgICAgc2V0VGFnTWFzayh0aGlzQm90LCAnbGFiZWwnLCAnICcsICdzaGFyZWQnKTsKICAgIGAKfSk7CgpyZXR1cm4gYWJBcnRpZmFjdEJvdDsnAPSQ08kEyYwEFmFiQXJ0aWZhY3RSZWNvbnN0aXR1dGUCBAD0kNPJBN6VBKkIQGludGVyZmFjZSBBQkFydGlmYWN0UmVjb25zaXR1dGVBcmcgewogICAgYWJBcnRpZmFjdEJ1bmRsZTogQUJBcnRpZmFjdEJ1bmRsZTsKICAgIHRvYXN0PzogYm9vbGVhbjsKfQoKaWYgKCFjb25maWdCb3QudGFncy5yZWNvbnN0aXR1dGlvbikgewogICAgY29uc29sZS53YXJuKGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gcmVjb25zdGl0dXRpb24gaXMgZGlzYWJsZWRgKTsKICAgIHJldHVybjsKfQoKYXNzZXJ0KHR5cGVvZiB0aGF0ID09PSAnb2JqZWN0JywgYFske3RhZ3Muc3lzdGVtfS4ke3RhZ05hbWV9XSBhcmcgb2JqZWN0IG11c3QgYmUgcHJvdmlkZWQuYCk7CgppZiAodGFncy5kZWJ1ZykgewogICAgY29uc29sZS5sb2coYFske3RhZ3Muc3lzdGVtfS4ke3RhZ05hbWV9XSB0aGF0OmAsIHRoYXQpOwp9Cgpjb25zdCB7IAogICAgYWJBcnRpZmFjdEJ1bmRsZQp9ID0gdGhhdCBhcyBBQkFydGlmYWN0UmVjb25zaXR1dGVBcmc7Cgphc3NlcnQoYWJBcnRpZmFjdEJ1bmRsZSAmJiBhYkFydGlmYWN0QnVuZGxlLmRhdGEgJiYgYWJBcnRpZmFjdEJ1bmRsZS5kZXBlbmRlbmNpZXMsIGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gYWJBcnRpZmFjdEJ1bmRsZSBpcyBhIHJlcXVpcmVkIHRvIGJlIGEgQUJBcnRpZmFjdEJ1bmRsZS5gKTsKCmNvbnN0IGZvcm1hdFZlcnNpb24gPSBhYkFydGlmYWN0QnVuZGxlLmZvcm1hdFZlcnNpb247CgppZiAoZm9ybWF0VmVyc2lvbiA9PSBudWxsKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoYGZvcm1hdFZlcnNpb24gJHtmb3JtYXRWZXJzaW9ufSBpcyBub3QgdmFsaWQuYCk7Cn0KCmNvbnN0IGZ1bmNUYWdOYW1lID0gYGFiQXJ0aWZhY3RSZWNvbnN0aXR1dGVfdiR7Zm9ybWF0VmVyc2lvbn1gOwoKaWYgKHR5cGVvZiB0aGlzQm90W2Z1bmNUYWdOYW1lXSAhPT0gJ2Z1bmN0aW9uJykgewogICAgdGhyb3cgbmV3IEVycm9yKGAke2Z1bmNUYWdOYW1lfSBpcyBub3QgYSBmdW5jdGlvbi5gKQp9CgovLyBDYWxsIHRoZSB2ZXJzaW9uZWQgcmVjb25zdGl0dXRlIGZ1bmN0aW9uLgpyZXR1cm4gYXdhaXQgdGhpc0JvdFtmdW5jVGFnTmFtZV0odGhhdCk7JwD0kNPJBMmMBBdhYkFydGlmYWN0Rm9ybWF0VmVyc2lvbgIEAPSQ08kEiJ4EATEnAPSQ08kEyYwEBnNlYXJjaAIEAPSQ08kEip4EKPCflJdkODM3MTQ0NC05MTU4LTQ0MzYtOGZjNy04NGNjOTFiN2Y1MjUnAPSQ08kEyYwEB2FiU2hlbGwCBAD0kNPJBLGeBAR0cnVlJwD0kNPJBMmMBAV1dGlscwIEAPSQ08kEtp4EKPCflJc5M2Q5NjVlMC1kMjBlLTRiNDUtOGNhMC02NDkyNzNiNzEzOGMnAPSQ08kEyYwEGWFiQXJ0aWZhY3RSZWNvbnN0aXR1dGVfdjECBAD0kNPJBN2eBOcZQGFzc2VydCh0eXBlb2YgdGhhdCA9PT0gJ29iamVjdCcsIGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gYXJnIG9iamVjdCBtdXN0IGJlIHByb3ZpZGVkLmApOwoKaWYgKCFjb25maWdCb3QudGFncy5yZWNvbnN0aXR1dGlvbikgewogICAgY29uc29sZS53YXJuKGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gcmVjb25zdGl0dXRpb24gaXMgZGlzYWJsZWRgKTsKICAgIHJldHVybjsKfQoKY29uc3QgeyAKICAgIGFiQXJ0aWZhY3RCdW5kbGUsCiAgICB0b2FzdCA9IHRydWUsCn0gPSB0aGF0IGFzIEFCQXJ0aWZhY3RSZWNvbnNpdHV0ZUFyZzsKCmFzc2VydChhYkFydGlmYWN0QnVuZGxlICYmIGFiQXJ0aWZhY3RCdW5kbGUuZGF0YSAmJiBhYkFydGlmYWN0QnVuZGxlLmRlcGVuZGVuY2llcywgYFske3RhZ3Muc3lzdGVtfS4ke3RhZ05hbWV9XSBhYkFydGlmYWN0QnVuZGxlIGlzIGEgcmVxdWlyZWQgdG8gYmUgYSBBQkFydGlmYWN0QnVuZGxlLmApOwoKLy8gR2VuZXJhdGUgYXJ0aWZhY3QgaW5zdGFuY2UgaWQgZm9yIHRoaXMgYXJ0aWZhY3QgdGhhdCBpcyBiZWluZyByZWNvbnN0aXR1dGVkLgpjb25zdCBhYkFydGlmYWN0SW5zdGFuY2VJRCA9IHV1aWQoKTsKY29uc3QgYWJBcnRpZmFjdEJ1bmRsZVN0cmluZyA9ICfwn6esJyArIEpTT04uc3RyaW5naWZ5KGFiQXJ0aWZhY3RCdW5kbGUpOwoKY29uc3Qgc2hhcmRCb3RzID0gW107Cgpmb3IgKGNvbnN0IGRlcGVuZGVuY3kgb2YgYWJBcnRpZmFjdEJ1bmRsZS5kZXBlbmRlbmNpZXMpIHsKICAgIGNvbnN0IGxvb2t1cEVnZ1Jlc3VsdCA9IGF3YWl0IGxpbmtzLnNlYXJjaC5vbkxvb2t1cEFCRWdncyh7CiAgICAgICAgYWJJRDogZGVwZW5kZW5jeS5hYklELAogICAgICAgIHJlY29yZEtleTogZGVwZW5kZW5jeS5yZWNvcmRLZXksCiAgICAgICAgYWJWZXJzaW9uOiBkZXBlbmRlbmN5LmFiVmVyc2lvbiwKICAgICAgICBhdXRvSGF0Y2g6IHRydWUsCiAgICAgICAgc291cmNlRXZlbnQ6ICdyZWNvbnN0aXR1dGUnLAogICAgICAgIG9uUHJlcHJvY2Vzc0JvdERhdGE6ICh7IGJvdERhdGEgfSkgPT4gewogICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBib3REYXRhKSB7CiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYm90RGF0YVtrZXldOwoKICAgICAgICAgICAgICAgIC8vIElmIHRoZSBzaGFyZCBib3QgaGFzIGl0c2VsZiBtYXJrZWQgYXMgcmVjb25zdGl0dXRlZCBhbHJlYWR5IChwb3NzaWJseSBkdWUgdG8gYW4gb3ZlcnNpZ2h0KSwgdGhlbiByZW1vdmUgaXQhCiAgICAgICAgICAgICAgICBpZiAoZGF0YS50YWdzLmFiQXJ0aWZhY3RTaGFyZFJlY29uc3RpdHV0ZWQpIHsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgZGF0YS50YWdzLmFiQXJ0aWZhY3RTaGFyZFJlY29uc3RpdHV0ZWQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KQoKICAgIGlmICh0YWdzLmRlYnVnKSB7CiAgICAgICAgY29uc29sZS5sb2coYFske3RhZ3Muc3lzdGVtfS4ke3RhZ05hbWV9XSAke2FiQXJ0aWZhY3RCdW5kbGUubmFtZX0gJHtkZXBlbmRlbmN5LmFiSUR9IGxvb2t1cEVnZ1Jlc3VsdDpgLCBsb29rdXBFZ2dSZXN1bHQpOwogICAgfQoKICAgIGlmIChsb29rdXBFZ2dSZXN1bHQuc3VjY2VzcykgewogICAgICAgIGlmICh0YWdzLmRlYnVnKSB7CiAgICAgICAgICAgIGxpbmtzLnV0aWxzLmFiTG9nKGAke2FiQXJ0aWZhY3RCdW5kbGUubmFtZX0gKGluc3RhbmNlIGlkOiAke2FiQXJ0aWZhY3RJbnN0YW5jZUlEfSkgbG9hZGVkIGRlcGVuZGVuY3kgYWJJRDogJHtkZXBlbmRlbmN5LmFiSUR9LCBhYlZlcnNpb246ICR7ZGVwZW5kZW5jeS5hYlZlcnNpb24gPz8gJ2xhdGVzdCd9YCk7CiAgICAgICAgfQoKICAgICAgICBmb3IgKGNvbnN0IHNoYXJkQm90IG9mIGxvb2t1cEVnZ1Jlc3VsdC5oYXRjaGVkQm90cykgewogICAgICAgICAgICBzaGFyZEJvdC50YWdzLmFiQXJ0aWZhY3RTaGFyZFJlY29uc3RpdHV0aW5nID0gbnVsbDsKICAgICAgICAgICAgc2V0VGFnTWFzayhzaGFyZEJvdCwgJ2FiQXJ0aWZhY3RTaGFyZFJlY29uc3RpdHV0ZWQnLCB0cnVlLCAnc2hhcmVkJyk7IC8vIFRoaXMgYm90IGhhcyBiZWVuIHJlY29uc3RpdHV0ZWQgaW4gdGhpcyBpbnN0LgogICAgICAgICAgICBzaGFyZEJvdC50YWdzLmFiQXJ0aWZhY3RCdW5kbGUgPSBhYkFydGlmYWN0QnVuZGxlU3RyaW5nOyAvLyBBc3NpZ24gdGhlIGFydGlmYWN0IGJ1bmRsZSBiYWNrIHRvIHRoZSBoYXRjaGVkIHNoYXJkIGJvdC4KICAgICAgICAgICAgc2hhcmRCb3QudGFncy5hYkFydGlmYWN0SW5zdGFuY2VJRCA9IGFiQXJ0aWZhY3RJbnN0YW5jZUlEOyAvLyBVVUlEIG9mIHRoZSBhcnRpZmFjdCBpbnN0YW5jZSB0aGF0IHRoaXMgYm90IGJlbG9uZ3MgdG8uCiAgICAgICAgICAgIHNoYXJkQm90LnRhZ3MuYWJBcnRpZmFjdFNoYXJkSW5zdGFuY2VJRCA9IHV1aWQoKTsgLy8gVVVJRCBhc3NpZ25lZCB0byB0aGUgYm90IGJ5IHRoZSBhcnRpZmFjdCB3aGVuIGxvYWRlZC4KICAgICAgICAgICAgc2hhcmRCb3QudGFncy5hYklnbm9yZSA9IHRydWU7IC8vIERvbid0IHB1Ymxpc2ggcmVjb25zdGl0dXRlZCBhcnRpZmFjdHMuCgogICAgICAgICAgICBzaGFyZEJvdHMucHVzaChzaGFyZEJvdCk7CiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICBsaW5rcy51dGlscy5hYkxvZyh7IG1lc3NhZ2U6IGAke2FiQXJ0aWZhY3RCdW5kbGUubmFtZX0gZmFpbGVkIHRvIGxvYWQgZGVwZW5kZW5jeSBhYklEOiAke2RlcGVuZGVuY3kuYWJJRH0sIGFiVmVyc2lvbjogJHtkZXBlbmRlbmN5LmFiVmVyc2lvbiA/PyAnbGF0ZXN0J31gLCBsb2dUeXBlOiAnZXJyb3InfSk7CiAgICB9Cn0KCi8vIFRlbGwgYWxsIGhhdGNoZWQgc2hhcmQgYm90cyB0byByZWNvbnN0aXR1dGUuIAovLyBUaGV5IGFsbCBoYXZlIGNvcGllcyBvZiB0aGUgYWJBcnRpZmFjdEJ1bmRsZSBhbmQgY2FuIHJlY29uc3RpdHV0ZSB0aGVtc2VsdmVzIGZyb20gdGhhdC4Kd2hpc3BlcihzaGFyZEJvdHMsICdvbkFCQXJ0aWZhY3RSZWNvbnN0aXR1dGUnKTsKCmlmICh0b2FzdCkgewogICAgbGlua3MudXRpbHMuYWJMb2dBbmRUb2FzdChgQXJ0aWZhY3QgJyR7YWJBcnRpZmFjdEJ1bmRsZS5uYW1lfScgKGluc3RhbmNlIGlkOiAke2FiQXJ0aWZhY3RJbnN0YW5jZUlEfSkgaGFzIGJlZW4gcmVjb25zdGl0dXRlZC5gKQp9IGVsc2UgewogICAgbGlua3MudXRpbHMuYWJMb2coYEFydGlmYWN0ICcke2FiQXJ0aWZhY3RCdW5kbGUubmFtZX0nIChpbnN0YW5jZSBpZDogJHthYkFydGlmYWN0SW5zdGFuY2VJRH0pIGhhcyBiZWVuIHJlY29uc3RpdHV0ZWQuYCk7Cn0KJwD0kNPJBMmMBA5vbkFueUJvdHNBZGRlZAIEAPSQ08kEw7gEZkBjb25zdCB7IGJvdHMgfSA9IHRoYXQ7Cgpmb3IgKGNvbnN0IGJvdCBvZiBib3RzKSB7CiAgICBpZiAoYm90LnRhZ3MuYWJBcnRpZmFjdE5hbWUpIHsKICAgICAgICAKICAgIH0KfScA9JDTyQTJjAQJb25BQkFkZGVkAgQA9JDTyQSquQTaEUBpbXBvcnQgeyBCb3QgfSBmcm9tICdjYXN1YWxvcyc7CgppZiAoIWNvbmZpZ0JvdC50YWdzLnJlY29uc3RpdHV0aW9uKSB7CiAgICBjb25zb2xlLndhcm4oYFske3RhZ3Muc3lzdGVtfS4ke3RhZ05hbWV9XSByZWNvbnN0aXR1dGlvbiBpcyBkaXNhYmxlZGApOwogICAgcmV0dXJuOwp9Cgpjb25zdCB7IGFiLCB2ZXJzaW9uLCBpbnN0LCBib3RJZHMsIHNvdXJjZUV2ZW50IH0gPSB0aGF0OwoKaWYgKHRhZ3MuZGVidWcpIHsKICAgIGNvbnNvbGUubG9nKGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gdGhhdDpgLCB0aGF0KTsKfQoKaWYgKGluc3QgIT09IG9zLmdldEN1cnJlbnRJbnN0KCkpIHsKICAgIC8vIElnbm9yZSBvbkFCQWRkZWQgc2hvdXRzIGZyb20gb3RoZXIgaW5zdHMuCiAgICByZXR1cm47Cn0KCmlmIChzb3VyY2VFdmVudCA9PT0gJ3JlY29uc3RpdHV0ZScpIHsKICAgIC8vIFdlIGRvIG5vdCB3YW50IHRvIHJlY29uc3RpdHV0ZSBib3RzIHRoYXQgYXJlIGNvbWluZyBmcm9tIGEgcmVjb25zdGl0dXRpb24gcHJvY2Vzcy4KICAgIHJldHVybjsKfQoKLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBhZGRlZCBib3RzIGFyZSBhcnRpZmFjdCBzaGFyZHMgdGhhdCBuZWVkcyB0byBiZSByZWNvbnN0aXR1dGVkLgpjb25zdCB1bmNvbnN0aXR1dGVkU2hhcmRCb3RNYXA6IFJlY29yZDxzdHJpbmcsIEJvdFtdPiA9IHt9OyAvLyBUcmFjayBzaGFyZCBib3RzIGJ5IGFiQXJ0aWZhY3ROYW1lLgoKZm9yIChjb25zdCBib3RJZCBvZiBib3RJZHMpIHsKICAgIGNvbnN0IGJvdCA9IGdldEJvdCgnaWQnLCBib3RJZCk7CgogICAgaWYgKGJvdCAmJiBib3QudGFncy5hYkFydGlmYWN0TmFtZSAmJiAhYm90LnRhZ3MuYWJBcnRpZmFjdFNoYXJkUmVjb25zdGl0dXRlZCAmJiAhYm90LnRhZ3MuYWJBcnRpZmFjdFNoYXJkUmVjb25zdGl0dXRpbmcpIHsKICAgICAgICBsZXQgc2hhcmRCb3RzID0gdW5jb25zdGl0dXRlZFNoYXJkQm90TWFwW2JvdC50YWdzLmFiQXJ0aWZhY3ROYW1lXTsKCiAgICAgICAgaWYgKCFzaGFyZEJvdHMpIHsKICAgICAgICAgICAgc2hhcmRCb3RzID0gW107CiAgICAgICAgICAgIHVuY29uc3RpdHV0ZWRTaGFyZEJvdE1hcFtib3QudGFncy5hYkFydGlmYWN0TmFtZV0gPSBzaGFyZEJvdHM7CiAgICAgICAgfQoKICAgICAgICBzaGFyZEJvdHMucHVzaChib3QpOwogICAgfQp9Cgpjb25zb2xlLmxvZyhgWyR7dGFncy5zeXN0ZW19LiR7dGFnTmFtZX1dIHVuY29uc3RpdHV0ZWRTaGFyZEJvdE1hcDpgLCB1bmNvbnN0aXR1dGVkU2hhcmRCb3RNYXApOwoKY29uc3QgYWJBcnRpZmFjdE5hbWVzID0gT2JqZWN0LmtleXModW5jb25zdGl0dXRlZFNoYXJkQm90TWFwKTsKCmlmIChhYkFydGlmYWN0TmFtZXMubGVuZ3RoID09PSAwKSB7CiAgICAvLyBObyBzaGFyZHMgZGV0ZWN0ZWQuCiAgICByZXR1cm47Cn0KCmZvciAoY29uc3QgYWJBcnRpZmFjdE5hbWUgb2YgYWJBcnRpZmFjdE5hbWVzKSB7CiAgICBjb25zdCBzaGFyZEJvdHMgPSB1bmNvbnN0aXR1dGVkU2hhcmRCb3RNYXBbYWJBcnRpZmFjdE5hbWVdOwoKICAgIC8vIEdyYWIgdGhlIGFydGlmYWN0IGJ1bmRsZSBmcm9tIG9uZSBvZiB0aGUgc2hhcmRzIGF2YWlsYWJsZSBmb3IgdGhpcyBhcnRpZmFjdC4KICAgIGNvbnN0IGFiQXJ0aWZhY3RCdW5kbGU6IEFCQXJ0aWZhY3RCdW5kbGUgPSBzaGFyZEJvdHNbMF0udGFncy5hYkFydGlmYWN0QnVuZGxlIAogICAgCiAgICBpZiAodGFncy5kZWJ1ZykgewogICAgICAgIGNvbnNvbGUubG9nKGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gYXJ0aWZhY3QgYnVuZGxlIGZvciAnJHthYkFydGlmYWN0TmFtZX0nOmAsIGFiQXJ0aWZhY3RCdW5kbGUpOwogICAgfQoKICAgIC8vIERlc3Ryb3kgYWxsIHNoYXJkcyB0aGF0IHdlcmUganVzdCBhZGRlZCBmb3IgdGhpcyBhcnRpZmFjdC4gV2UgYXJlIGFib3V0IHRvIHJlY29uc3RpdHV0ZSwKICAgIC8vIGFuZCBubyBsb25nZXIgbmVlZCB0aGVzZSBvbGQgc2hhcmRzLgogICAgaWYgKHRhZ3MuZGVidWcpIHsKICAgICAgICBjb25zb2xlLmxvZyhgWyR7dGFncy5zeXN0ZW19LiR7dGFnTmFtZX1dIGRlc3Ryb3lpbmcgJHtzaGFyZEJvdHMubGVuZ3RofSBvbGQgc2hhcmQgYm90cyBmcm9tICR7YWJBcnRpZmFjdE5hbWV9LmApOwogICAgfQogICAgZGVzdHJveShzaGFyZEJvdHMpOwoKICAgIC8vIFJlY29uc3RpdHV0ZSB1c2luZyB0aGUgYWJBcnRpZmFjdEJ1bmRsZS4KICAgIHRoaXNCb3QuYWJBcnRpZmFjdFJlY29uc3RpdHV0ZSh7IGFiQXJ0aWZhY3RCdW5kbGUgfSk7Cn0nAPSQ08kEyYwED29uQW55Qm90Q2xpY2tlZAIEAPSQ08kEhcsEeEBjb25zdCB7IGJvdCB9ID0gdGhhdDsKCmlmIChib3QgJiYgYm90LnRhZ3MuYWJBcnRpZmFjdEJvdCkgewogICAgdGhpc0JvdC5hYkFydGlmYWN0Qm90TWVudU9wZW4oeyBhYkFydGlmYWN0Qm90OiBib3QgfSkKfScA9JDTyQTJjAQWYWJVcGRhdGVBcnRpZmFjdFNoYXJkcwIEAPSQ08kE/ssE0gVAY29uc3QgeyAKICAgIGFiQXJ0aWZhY3ROYW1lLAogICAgYWJBcnRpZmFjdEZvcm1hdFZlcnNpb24gPSB0YWdzLmFiQXJ0aWZhY3RGb3JtYXRWZXJzaW9uIC8vIERlZmF1bHQgdG8gdGhlIGN1cnJlbnQgZm9ybWF0IHZlcnNpb24uCn0gPSB0aGF0ID8/IHt9Cgphc3NlcnQoYWJBcnRpZmFjdE5hbWUsIGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gYWJBcnRpZmFjdE5hbWUgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXIuYCk7Cgpjb25zb2xlLmxvZyhgWyR7dGFncy5zeXN0ZW19LiR7dGFnTmFtZX1dYCwgeyBhYkFydGlmYWN0TmFtZSwgYWJBcnRpZmFjdEZvcm1hdFZlcnNpb24gfSk7CgppZiAoYWJBcnRpZmFjdEZvcm1hdFZlcnNpb24gPT0gbnVsbCkgewogICAgdGhyb3cgbmV3IEVycm9yKGBhYkFydGlmYWN0Rm9ybWF0VmVyc2lvbiAke2FiQXJ0aWZhY3RGb3JtYXRWZXJzaW9ufSBpcyBub3QgdmFsaWQuYCk7Cn0KCmNvbnN0IGZ1bmNUYWdOYW1lID0gYGFiVXBkYXRlQXJ0aWZhY3RTaGFyZHNfdiR7YWJBcnRpZmFjdEZvcm1hdFZlcnNpb259YDsKCmlmICh0eXBlb2YgdGhpc0JvdFtmdW5jVGFnTmFtZV0gIT09ICdmdW5jdGlvbicpIHsKICAgIHRocm93IG5ldyBFcnJvcihgJHtmdW5jVGFnTmFtZX0gaXMgbm90IGEgZnVuY3Rpb24uYCkKfQoKLy8gQ2FsbCB0aGUgdmVyc2lvbmVkIGNyZWF0ZSBmdW5jdGlvbi4KcmV0dXJuIHRoaXNCb3RbZnVuY1RhZ05hbWVdKHRoYXQpOycA9JDTyQTJjAQZYWJVcGRhdGVBcnRpZmFjdFNoYXJkc192MQIEAPSQ08kE0dEE7C1AY29uc3QgeyAKICAgIGFiQXJ0aWZhY3ROYW1lLAp9ID0gdGhhdCA/PyB7fQoKaW50ZXJmYWNlIEFCQXJ0aWZhY3REZXBlbmRlbmN5IHsKICAgIGFiSUQ6IHN0cmluZzsKICAgIHJlY29yZEtleTogc3RyaW5nOwogICAgYWJWZXJzaW9uPzogbnVtYmVyOwp9CgppbnRlcmZhY2UgQUJBcnRpZmFjdEJ1bmRsZSB7CiAgICBuYW1lOiBzdHJpbmc7CiAgICBmb3JtYXRWZXJzaW9uOiBudW1iZXI7CiAgICBkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+OwogICAgZGVwZW5kZW5jaWVzOiBBcnJheTxBQkFydGlmYWN0RGVwZW5kZW5jeT47Cn0KCmludGVyZmFjZSBBQkFydGlmYWN0U2hhcmQgewogICAgZGF0YTogUmVjb3JkPHN0cmluZywgYW55PjsKICAgIGRlcGVuZGVuY2llczogQXJyYXk8QUJBcnRpZmFjdERlcGVuZGVuY3k+Owp9Cgphc3NlcnQoYWJBcnRpZmFjdE5hbWUsIGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gYWJBcnRpZmFjdE5hbWUgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXIuYCk7Cgpjb25zdCBBUlRJRkFDVF9TSEFSRF9MSVNURU5FUl9UQUcgPSAnb25BQkFydGlmYWN0Q29sbGVjdFNoYXJkcyc7CgpmdW5jdGlvbiBpc09iamVjdChvYmo6IGFueSk6IGJvb2xlYW4gewogICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KG9iaik7Cn0KCmZ1bmN0aW9uIGlzQXJyYXkob2JqOiBhbnkpOiBib29sZWFuIHsKICAgIHJldHVybiBBcnJheS5pc0FycmF5KG9iaik7Cn0KCmZ1bmN0aW9uIGlzU3RyaW5nKG9iajogYW55KTogYm9vbGVhbiB7CiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ3N0cmluZyc7Cn0KCmNvbnN0IHNoYXJkQm90cyA9IGdldEJvdHMoKGIpID0+IHsKICAgIHJldHVybiBiLnRhZ3MuYWJBcnRpZmFjdE5hbWUgPT09IGFiQXJ0aWZhY3ROYW1lCn0pOwoKaWYgKHNoYXJkQm90cy5sZW5ndGggPT09IDApIHsKICAgIGxpbmtzLnV0aWxzLmFiTG9nQW5kVG9hc3QoeyBtZXNzYWdlOiBgVGhlcmUgYXJlIG5vIHNoYXJkcyBmb3IgYXJ0aWZhY3QgbmFtZSAnJHthYkFydGlmYWN0TmFtZX0nLmAsIGxvZ1R5cGU6ICd3YXJuJyB9KTsKICAgIHJldHVybjsKfQoKLyoqIEFuIGFydGlmYWN0IGJ1bmRsZSBpcyB0aGUgY29tYmluYXRpb24gb2Ygc2hhcmQgZGF0YSBhbmQgc2hhcmQgZGVwZW5kZW5jaWVzLiAqLwpjb25zdCBhYkFydGlmYWN0QnVuZGxlOiBBQkFydGlmYWN0QnVuZGxlID0gewogICAgbmFtZTogYWJBcnRpZmFjdE5hbWUsCiAgICBmb3JtYXRWZXJzaW9uOiAxLAogICAgZGF0YToge30sCiAgICBkZXBlbmRlbmNpZXM6IFtdLAp9CgovKiogS2VlcCB0cmFjayBvZiBkZXBlbmRlbmN5IGhhc2hlcy4gVGhpcyBwcmV2ZW50cyBkdXBsaWNhdGVzIGluIHRoZSBhcnRpZmFjdCBkZXBlbmRlbmNpZXMuICovCmNvbnN0IGRlcGVuZGVuY3lIYXNoZXMgPSBuZXcgU2V0KCk7IAoKZm9yIChjb25zdCBzaGFyZEJvdCBvZiBzaGFyZEJvdHMpIHsKICAgIGNvbnN0IGJvdFNob3J0SWQgPSBzaGFyZEJvdC5pZC5zdWJzdHJpbmcoMCwgNSk7CgogICAgbGV0IHNoYXJkOiBBQkFydGlmYWN0U2hhcmQ7CiAgICBpZiAoc2hhcmRCb3QudGFnc1tBUlRJRkFDVF9TSEFSRF9MSVNURU5FUl9UQUddKSB7CiAgICAgICAgaWYgKHNoYXJkQm90W0FSVElGQUNUX1NIQVJEX0xJU1RFTkVSX1RBR10pIHsKICAgICAgICAgICAgc2hhcmQgPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoc2hhcmRCb3RbQVJUSUZBQ1RfU0hBUkRfTElTVEVORVJfVEFHXSgpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsaW5rcy51dGlscy5hYkxvZ0FuZFRvYXN0KHsgbWVzc2FnZTogYEFydGlmYWN0ICcke2FiQXJ0aWZhY3ROYW1lfScgYm90ICcke2JvdFNob3J0SWR9JyAke0FSVElGQUNUX1NIQVJEX0xJU1RFTkVSX1RBR30gdGFnIGlzIGRlZmluZWQgYnV0IGlzIG5vdCBhIHZhbGlkIGZ1bmN0aW9uLmAsIGxvZ1R5cGU6ICdlcnJvcicgfSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgaWYgKHRhZ3MuZGVidWcpIHsKICAgICAgICBjb25zb2xlLmxvZyhgWyR7dGFncy5zeXN0ZW19LiR7dGFnTmFtZX1dIGFydGlmYWN0OiAke2FiQXJ0aWZhY3ROYW1lfSwgYm90OiAke2JvdFNob3J0SWR9LCBzaGFyZDpgLCBzaGFyZCk7CiAgICB9CgogICAgaWYgKHNoYXJkKSB7CiAgICAgICAgaWYgKCFpc09iamVjdChzaGFyZCkpIHsKICAgICAgICAgICAgbGlua3MudXRpbHMuYWJMb2dBbmRUb2FzdCh7IG1lc3NhZ2U6IGBBcnRpZmFjdCAnJHthYkFydGlmYWN0TmFtZX0nIGJvdCAnJHtib3RTaG9ydElkfScgQCR7QVJUSUZBQ1RfU0hBUkRfTElTVEVORVJfVEFHfSBzaGFyZCBtdXN0IGJlIGFuIG9iamVjdC5gLCBsb2dUeXBlOiAnZXJyb3InIH0pOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoc2hhcmQuZGF0YSkgewogICAgICAgICAgICBpZiAoIWlzT2JqZWN0KHNoYXJkLmRhdGEpKSB7CiAgICAgICAgICAgICAgICBsaW5rcy51dGlscy5hYkxvZ0FuZFRvYXN0KHsgbWVzc2FnZTogYEFydGlmYWN0ICcke2FiQXJ0aWZhY3ROYW1lfScgYm90ICcke2JvdFNob3J0SWR9JyBAJHtBUlRJRkFDVF9TSEFSRF9MSVNURU5FUl9UQUd9IHNoYXJkICdkYXRhJyBwcm9wZXJ0eSBtdXN0IGJlIGFuIG9iamVjdC5gLCBsb2dUeXBlOiAnZXJyb3InIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBTaGFsbG93IG1lcmdlIHNoYXJkJ3MgZGF0YSBwcm9wZXJ0aWVzIGludG8gY29tYmluZWQgYXJ0aWZhY3QgZGF0YS4KICAgICAgICAgICAgYWJBcnRpZmFjdEJ1bmRsZS5kYXRhID0geyAuLi5hYkFydGlmYWN0QnVuZGxlLmRhdGEsIC4uLnNoYXJkLmRhdGEgfTsKICAgICAgICB9CgogICAgICAgIGlmIChzaGFyZC5kZXBlbmRlbmNpZXMpIHsKICAgICAgICAgICAgaWYgKCFpc0FycmF5KHNoYXJkLmRlcGVuZGVuY2llcykpIHsKICAgICAgICAgICAgICAgIGxpbmtzLnV0aWxzLmFiTG9nQW5kVG9hc3QoeyBtZXNzYWdlOiBgQXJ0aWZhY3QgJyR7YWJBcnRpZmFjdE5hbWV9JyBib3QgJyR7Ym90U2hvcnRJZH0nIEAke0FSVElGQUNUX1NIQVJEX0xJU1RFTkVSX1RBR30gc2hhcmQgJ2RlcGVuZGVuY2llcycgcHJvcGVydHkgbXVzdCBiZSBhbiBhcnJheS5gLCBsb2dUeXBlOiAnZXJyb3InIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKGNvbnN0IGRlcGVuZGVuY3kgb2Ygc2hhcmQuZGVwZW5kZW5jaWVzKSB7CiAgICAgICAgICAgICAgICAvLyBWYWxpZGF0ZSBkZXBlbmRlbmN5IGZvcm1hdC4KICAgICAgICAgICAgICAgIGlmICghaXNTdHJpbmcoZGVwZW5kZW5jeS5yZWNvcmRLZXkpKSB7CiAgICAgICAgICAgICAgICAgICAgbGlua3MudXRpbHMuYWJMb2dBbmRUb2FzdCh7IG1lc3NhZ2U6IGBBcnRpZmFjdCAnJHthYkFydGlmYWN0TmFtZX0nIGJvdCAnJHtib3RTaG9ydElkfScgZGVwZW5kZW5jeSBlbnRyaWVzIG11c3QgY29udGFpbiBhICdyZWNvcmRLZXknIHN0cmluZyBwcm9wZXJ0eS5gLCBsb2dUeXBlOiAnZXJyb3InIH0pOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoIWlzU3RyaW5nKGRlcGVuZGVuY3kuYWJJRCkpIHsKICAgICAgICAgICAgICAgICAgICBsaW5rcy51dGlscy5hYkxvZ0FuZFRvYXN0KHsgbWVzc2FnZTogYEFydGlmYWN0ICcke2FiQXJ0aWZhY3ROYW1lfScgYm90ICcke2JvdFNob3J0SWR9JyBkZXBlbmRlbmN5IGVudHJpZXMgbXVzdCBjb250YWluIGEgJ2FiSUQnIHN0cmluZyBwcm9wZXJ0eS5gLCBsb2dUeXBlOiAnZXJyb3InIH0pOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhpcyBkZXBlbmRlbmN5IGlzbnQgYWxyZWFkeSBjb2xsZWN0ZWQuCiAgICAgICAgICAgICAgICBjb25zdCBoYXNoID0gY3J5cHRvLmhhc2goJ3NoYTEnLCAnaGV4JywgZGVwZW5kZW5jeSk7CgogICAgICAgICAgICAgICAgaWYgKCFkZXBlbmRlbmN5SGFzaGVzLmhhcyhoYXNoKSkgewogICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3lIYXNoZXMuYWRkKGhhc2gpOwogICAgICAgICAgICAgICAgICAgIGFiQXJ0aWZhY3RCdW5kbGUuZGVwZW5kZW5jaWVzLnB1c2goZGVwZW5kZW5jeSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCi8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGF0IGxlYXN0IG9uZSBkZXBlbmRlbmN5LgppZiAoYWJBcnRpZmFjdEJ1bmRsZS5kZXBlbmRlbmNpZXMubGVuZ3RoID09PSAwKSB7CiAgICBsaW5rcy51dGlscy5hYkxvZ0FuZFRvYXN0KHsgbWVzc2FnZTogYEFydGlmYWN0ICcke2FiQXJ0aWZhY3ROYW1lfScgbXVzdCBsaXN0IGF0IGxlYXN0IG9uZSBkZXBlbmRlbmN5IGluIG9yZGVyIHRvIHJlY29uc3RpdHV0ZSBwcm9wZXJseS5gLCBsb2dUeXBlOiAnZXJyb3InIH0pOwogICAgcmV0dXJuOwp9CgovLyBTdG9yZSBzb21lIGV4dHJhIG1ldGFkYXRhIHByb3BlcnRpZXMgd2l0aCB0aGUgYXJ0aWZhY3QuCi8vIFRoZXNlIGFyZSBub3QgY29yZSB0byB0aGUgYXJ0aWZhY3QncyBmdW5jdGlvbmFsaXR5IGJ1dCBtYXkgYmUgdXNlZnVsIGFzIGFydGlmYWN0cyBldm9sdmUuCmFiQXJ0aWZhY3RCdW5kbGUuY29udGVudFNIQTI1NiA9IGNyeXB0by5zaGEyNTYoYWJBcnRpZmFjdEJ1bmRsZSk7IC8vIENyZWF0ZSBhbmQgc3RvcmUgYSBoYXNoIG9mIGFydGlmYWN0J3MgY29udGVudC4KYWJBcnRpZmFjdEJ1bmRsZS5jYXN1YWxPU1ZlcnNpb24gPSBvcy52ZXJzaW9uKCk7CmFiQXJ0aWZhY3RCdW5kbGUuY3JlYXRlZFRpbWVzdGFtcCA9IERhdGVUaW1lLm5vdygpLnRvSVNPKCk7CmFiQXJ0aWZhY3RCdW5kbGUuYWJTaGVsbFZlcnNpb24gPSBgJHtsaW5rcy52ZXJzaW9uLnJhdy5hYlNoZWxsTWFqb3JWZXJzaW9ufS4ke2xpbmtzLnZlcnNpb24ucmF3LmFiU2hlbGxNaW5vclZlcnNpb259YDsKCmlmICh0YWdzLmRlYnVnKSB7CiAgICBjb25zb2xlLmxvZyhgWyR7dGFncy5zeXN0ZW19LiR7dGFnTmFtZX1dIGZpbmFsIG1lcmdlZCBhcnRpZmFjdCAke2FiQXJ0aWZhY3ROYW1lfTpgLCBhYkFydGlmYWN0QnVuZGxlKTsKfQoKLy8gRXZlcnkgc2hhcmQgYm90IGdldHMgYSBjb3B5IG9mIHRoZSBhcnRpZmFjdCBidW5kbGUuCi8vIFRoaXMgbWFrZXMgdGhlIGFydGlmYWN0IGhvbG9ncmFwaGljIGJ5IG5hdHVyZS4gVGhpcyBtZWFucyB0aGF0IGFueSBzaGFyZCBjYW4gYmUgdXNlZCB0byByZWNvbnN0aXR1dGUgdGhlIHdob2xlLgpmb3IgKGNvbnN0IHNoYXJkQm90IG9mIHNoYXJkQm90cykgewogICAgLy8gTWFyayBlYWNoIHNoYXJkIGJvdCBhcyBiZWluZyAncmVjb25zdGl0dXRlZCcgd2hlbiB3ZSB1cGRhdGUgdGhlIGFydGlmYWN0LgogICAgLy8gQmVjYXVzZSB0aGlzIGlzIGEgc2hhcmVkIHRhZyBtYXNrLCBpdCB3aWxsIG9ubHkgYmUgdHJ1ZSBpbiB0aGUgY3VycmVudCBpbnN0LgogICAgc2V0VGFnTWFzayhzaGFyZEJvdCwgJ2FiQXJ0aWZhY3RTaGFyZFJlY29uc3RpdHV0ZWQnLCB0cnVlLCAnc2hhcmVkJyk7CiAgICBzaGFyZEJvdC50YWdzLmFiQXJ0aWZhY3RCdW5kbGUgPSAgJ/Cfp6wnICsgSlNPTi5zdHJpbmdpZnkoYWJBcnRpZmFjdEJ1bmRsZSk7Cn0KCmlmICh0YWdzLmRlYnVnKSB7CiAgICBjb25zb2xlLmxvZyhgWyR7dGFncy5zeXN0ZW19LiR7dGFnTmFtZX1dIHVwZGF0ZWQgYXJ0aWZhY3QgJyR7YWJBcnRpZmFjdE5hbWV9Jy4gQ29waWVkIGFydGlmYWN0IGJ1bmRsZSB0byAke3NoYXJkQm90cy5sZW5ndGh9IGJvdHMuIGFiQXJ0aWZhY3RCdW5kbGU6YCwgYWJBcnRpZmFjdEJ1bmRsZSk7Cn0nAPSQ08kEyYwEBG1lbnUCBAD0kNPJBLz/BCjwn5SXYjMwYzZjNWQtYTRmNy00MjY2LWJhMzgtMzkzZGM5NWUxZWNiJwD0kNPJBMmMBAVsZWFybgIEAPSQ08kE4/8EKPCflJc2NjU3Yjg2NS1lOTgzLTQ0MDEtOWZjOS1mNTQxOGQxOGE3ZjcnAPSQ08kEyYwEC29uR3JpZENsaWNrAgQA9JDTyQSKgAVGQGlmIChsaW5rcy5hcnRpZmFjdE1lbnVCb3RzKSB7CiAgICB0aGlzQm90LmFiQXJ0aWZhY3RCb3RNZW51UmVzZXQoKTsKfScA9JDTyQTJjAQaYWJBcnRpZmFjdEJhc2VDb2xvckRlZmF1bHQCBAD0kNPJBNGABQcjQUVBMUZGJwD0kNPJBMmMBBthYkFydGlmYWN0TGFiZWxDb2xvckRlZmF1bHQCBAD0kNPJBNmABQcjMWUxYjJkJwD0kNPJBMmMBBBvbkFueUJvdHNSZW1vdmVkAgQA9JDTyQThgAWVAUBjb25zdCB7IGJvdElEcyB9ID0gdGhhdDsKCmlmIChtYXNrcy5zZWxlY3RlZEFydGlmYWN0Qm90SWQgJiYgYm90SURzLmluY2x1ZGVzKG1hc2tzLnNlbGVjdGVkQXJ0aWZhY3RCb3RJZCkpIHsKICAgIHRoaXNCb3QuYWJBcnRpZmFjdEJvdE1lbnVSZXNldCgpOwp9JwD0kNPJBMmMBAd2ZXJzaW9uAgQA9JDTyQT3gQUo8J+UlzUyOGRjMGY5LTQzZWMtNDNmMy1hNDcwLWUyZGQ2YTBkYTk1ZicA9JDTyQTJjAQYYWJHZXRBcnRpZmFjdE5hbWVzSW5JbnN0AgQA9JDTyQSeggWJAkBsZXQgYWJBcnRpZmFjdE5hbWVzID0gbmV3IFNldCgpOwoKZ2V0Qm90cygoYikgPT4gewogICAgaWYgKGIudGFncy5hYkFydGlmYWN0TmFtZSAmJiAhYWJBcnRpZmFjdE5hbWVzLmhhcyhiLnRhZ3MuYWJBcnRpZmFjdE5hbWUpKSB7CiAgICAgICAgYWJBcnRpZmFjdE5hbWVzLmFkZChiLnRhZ3MuYWJBcnRpZmFjdE5hbWUpOwogICAgfQp9KQoKYWJBcnRpZmFjdE5hbWVzID0gQXJyYXkuZnJvbShhYkFydGlmYWN0TmFtZXMpOwoKcmV0dXJuIGFiQXJ0aWZhY3ROYW1lczsnAPSQ08kEyYwEFWFiQXJ0aWZhY3RCb3RNZW51T3BlbgIEAPSQ08kEqIQFhQ1AY29uc3QgeyBhYkFydGlmYWN0Qm90IH0gPSB0aGF0ID8/IHt9OwoKYXNzZXJ0KGFiQXJ0aWZhY3RCb3QgJiYgYWJBcnRpZmFjdEJvdC5zcGFjZSAmJiBhYkFydGlmYWN0Qm90LnRhZ3MsIGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gYWJBcnRpZmFjdEJvdCBpcyBhIHJlcXVpcmVkIHRvIGJlIGEgQm90LmApOwoKc2hvdXQoImFiQXJ0aWZhY3RCb3RNZW51UmVzZXQiKTsKCmNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gImFiQXJ0aWZhY3RNZW51IjsKCmNvbnN0IGFydGlmYWN0TWVudUJvdHMgPSBbXTsKCmNvbnN0IGFiQXJ0aWZhY3RCYXNlQ29sb3IgPSBsaW5rcy5yZW1lbWJlci50YWdzLmFiQXJ0aWZhY3RCYXNlQ29sb3IgPz8gdGFncy5hYkFydGlmYWN0QmFzZUNvbG9yRGVmYXVsdDsKY29uc3QgYWJBcnRpZmFjdExhYmVsQ29sb3IgPSBsaW5rcy5yZW1lbWJlci50YWdzLmFiQXJ0aWZhY3RMYWJlbENvbG9yID8/IHRhZ3MuYWJBcnRpZmFjdExhYmVsQ29sb3JEZWZhdWx0OwoKbGV0IGluZm9MYWJlbCA9IGBhcnRpZmFjdDogJHthYkFydGlmYWN0Qm90LnRhZ3MuYWJBcnRpZmFjdE5hbWV9XG5gOwppbmZvTGFiZWwgKz0gYGhhc2g6ICR7YWJBcnRpZmFjdEJvdC50YWdzLmFiQXJ0aWZhY3RIYXNoLnN1YnN0cmluZygwLCA3KX1cbmA7CmluZm9MYWJlbCArPSBgcmVjb25zdGl0dXRlZCBpbiBpbnN0OiAke2FiQXJ0aWZhY3RCb3QudGFncy5hYkFydGlmYWN0UmVjb25zdGl0dXRlZH1cbmA7CmluZm9MYWJlbCArPSBgZm9ybWF0OiB2JHthYkFydGlmYWN0Qm90LnRhZ3MuYWJBcnRpZmFjdEZvcm1hdFZlcnNpb259XG5gOwppbmZvTGFiZWwgKz0gYGNyZWF0ZWQgdGltZTogJHthYkFydGlmYWN0Qm90LnRhZ3MuYWJBcnRpZmFjdENyZWF0ZWRUaW1lc3RhbXAudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuREFURVRJTUVfU0hPUlRfV0lUSF9TRUNPTkRTKX1cbmA7CgovLyBIZWFkZXIKY29uc3QgaW5mb0JvdCA9IGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51VGV4dCh7CiAgICBhYkFydGlmYWN0TWVudTogdHJ1ZSwKICAgIGxhYmVsOiBpbmZvTGFiZWwsCn0pCmFydGlmYWN0TWVudUJvdHMucHVzaChpbmZvQm90KTsKCi8vIERvd25sb2FkIGFydGlmYWN0IGJ1dHRvbi4KY29uc3QgZG93bmxvYWRCdXR0b24gPSBsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbih7CiAgICBhYkFydGlmYWN0TWVudTogdHJ1ZSwKICAgIGFiQXJ0aWZhY3RCb3Q6IGdldExpbmsoYWJBcnRpZmFjdEJvdCksCiAgICBmb3JtQWRkcmVzczogJ2Rvd25sb2FkJywKICAgIGxhYmVsOiBgZG93bmxvYWQgYXJ0aWZhY3RgLAogICAgY29sb3I6IGFiQXJ0aWZhY3RCYXNlQ29sb3IsCiAgICBvbkNsaWNrOiBgQAogICAgICAgIG9zLmRvd25sb2FkQm90cyhbIGxpbmtzLmFiQXJ0aWZhY3RCb3QgXSwgXGBhYkFydGlmYWN0LVwke2xpbmtzLmFiQXJ0aWZhY3RCb3QudGFncy5hYkFydGlmYWN0TmFtZX0tXCR7bGlua3MuYWJBcnRpZmFjdEJvdC50YWdzLmFiQXJ0aWZhY3RIYXNoLnN1YnN0cmluZygwLCA3KX0uYXV4XGApCiAgICBgLAp9KQphcnRpZmFjdE1lbnVCb3RzLnB1c2goZG93bmxvYWRCdXR0b24pOwoKbWFza3Muc2VsZWN0ZWRBcnRpZmFjdEJvdElkID0gYWJBcnRpZmFjdEJvdC5pZDsKbWFza3MuYXJ0aWZhY3RNZW51Qm90cyA9IGdldExpbmsoYXJ0aWZhY3RNZW51Qm90cyk7JwD0kNPJBMmMBBZhYkFydGlmYWN0Qm90TWVudVJlc2V0AgQA9JDTyQSukQWwAUBpZiAobGlua3MuYXJ0aWZhY3RNZW51Qm90cykgewogICAgZGVzdHJveShsaW5rcy5hcnRpZmFjdE1lbnVCb3RzKTsKICAgIGxpbmtzLmFydGlmYWN0TWVudUJvdHMgPSBudWxsOwp9Cgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9IG51bGw7Cm1hc2tzLnNlbGVjdGVkQXJ0aWZhY3RCb3RJZCA9IG51bGw7JwEEYm90cyQ5M2Q5NjVlMC1kMjBlLTRiNDUtOGNhMC02NDkyNzNiNzEzOGMBJwD0kNPJBN+SBQZzeXN0ZW0CBAD0kNPJBOCSBQ5hYi5zaGVsbC51dGlscycA9JDTyQTfkgUMYWJDb21waWxlQ1NTAgQA9JDTyQTvkgWCBEBsZXQgYm90cyA9IHRoYXQ7Cgpib3RzID0gQXJyYXkuaXNBcnJheShib3RzKSA/IGJvdHMgOiBbYm90c107CgpsZXQgY3NzID0gW107Cgpmb3IgKGxldCBib3Qgb2YgYm90cykgewogICAgZm9yIChsZXQga2V5IGluIGJvdC50YWdzKSB7CiAgICAgICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKCdjc3MnKSkgewogICAgICAgICAgICBpZiAodGFncy5kZWJ1ZykgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFske3RhZ3Muc3lzdGVtfS4ke3RhZ05hbWV9XSBmb3VuZCBDU1Mga2V5OiAke2tleX1gKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjc3MucHVzaChib3QudGFnc1trZXldKTsKICAgICAgICB9CiAgICB9Cn0KCmNvbnN0IGNvbXBpbGVkID0gY3NzLmpvaW4oJ1xuXG4nKTsKaWYgKHRhZ3MuZGVidWcpIHsKICAgIGNvbnNvbGUubG9nKGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gY29tcGlsZWQgQ1NTOlxuXG5gLCBjb21waWxlZCk7Cn0KCnJldHVybiBjb21waWxlZDsnAPSQ08kE35IFCGFiSWdub3JlAgQA9JDTyQTylgUEdHJ1ZScA9JDTyQTfkgUHYWJTaGVsbAIEAPSQ08kE95YFBHRydWUnAPSQ08kE35IFCWFiVmVyc2lvbgIEAPSQ08kE/JYFBDEwLjUnAPSQ08kE35IFDWFiTG9nQW5kVG9hc3QCBAD0kNPJBIGXBbMKQGxldCBtZXNzYWdlOwpsZXQgZHVyYXRpb247CmxldCBsb2dUeXBlID0gJ2xvZyc7CmxldCB0b2FzdCA9IHRydWU7CgppZiAodHlwZW9mIHRoYXQgPT09ICdzdHJpbmcnKSB7CiAgICBtZXNzYWdlID0gdGhhdDsKICAgIGR1cmF0aW9uID0gdGhpc0JvdC5lc3RpbWF0ZVJlYWRpbmdUaW1lKHsgdGV4dDogdGhhdCwgZGVsYXlUaW1lOiAxMDAwIH0pIC8gMTAwMDsKfSBlbHNlIHsKICAgIG1lc3NhZ2UgPSB0aGF0Lm1lc3NhZ2U7CiAgICBkdXJhdGlvbiA9IHRoYXQuZHVyYXRpb24gPz8gKHRoaXNCb3QuZXN0aW1hdGVSZWFkaW5nVGltZSh7IHRleHQ6IHRoYXQubWVzc2FnZSwgZGVsYXlUaW1lOiAxMDAwIH0pIC8gMTAwMCk7CiAgICBsb2dUeXBlID0gdGhhdC5sb2dUeXBlID8/IGxvZ1R5cGU7CiAgICB0b2FzdCA9IHRoYXQudG9hc3QgPz8gdG9hc3Q7Cn0KCmlmIChsb2dUeXBlID09PSAnbG9nJykgewogICAgYWIubG9nKGFiUGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eSArICc6ICcgKyBtZXNzYWdlKTsKICAgIGNvbnNvbGUubG9nKGFiUGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eSArICc6ICcgKyBtZXNzYWdlKTsKICAgIGlmICh0b2FzdCkgb3MudG9hc3QobWVzc2FnZSwgZHVyYXRpb24pOwp9IGVsc2UgaWYgKGxvZ1R5cGUgPT09ICd3YXJuaW5nJyB8fCBsb2dUeXBlID09PSAnd2FybicpIHsKICAgIGFiLmxvZyhhYlBlcnNvbmFsaXR5LnRhZ3MuYWJCdWlsZGVySWRlbnRpdHkgKyAnOiBXYXJuaW5nOiAnICsgbWVzc2FnZSk7CiAgICBjb25zb2xlLndhcm4oYWJQZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgJzogJyArIG1lc3NhZ2UpOwogICAgaWYgKHRvYXN0KSBvcy50b2FzdChgV2FybmluZzogJHttZXNzYWdlfWAsIGR1cmF0aW9uKTsKfSBlbHNlIGlmIChsb2dUeXBlID09PSAnZXJyb3InKSB7CiAgICBhYi5sb2coYWJQZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgJzogRXJyb3I6ICcgKyBtZXNzYWdlKTsKICAgIGNvbnNvbGUuZXJyb3IoYWJQZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgJzogJyArIG1lc3NhZ2UpOwogICAgaWYgKHRvYXN0KSBvcy50b2FzdChgRXJyb3I6ICR7bWVzc2FnZX1gLCBkdXJhdGlvbik7Cn0gZWxzZSB7CiAgICBhYi5sb2coYWJQZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgJzogJyArIG1lc3NhZ2UpOwogICAgY29uc29sZS5sb2coYWJQZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgJzogJyArIG1lc3NhZ2UpOwogICAgaWYgKHRvYXN0KSBvcy50b2FzdChtZXNzYWdlLCBkdXJhdGlvbik7Cn0nAPSQ08kE35IFCHJlbWVtYmVyAgQA9JDTyQS1oQUo8J+Ul2U1MzgwYTZiLThiNGQtNGE4Yi04YjA0LTU4ZTFlYjAzZTVlNycA9JDTyQTfkgUFYWJMb2cCBAD0kNPJBNyhBccBQGlmICh0eXBlb2YgdGhhdCA9PT0gJ3N0cmluZycpIHsKICAgIHRoaXNCb3QuYWJMb2dBbmRUb2FzdCh7CiAgICAgICAgbWVzc2FnZTogdGhhdCwKICAgICAgICB0b2FzdDogZmFsc2UsCiAgICB9KTsKfSBlbHNlIHsKICAgIHRoaXNCb3QuYWJMb2dBbmRUb2FzdCh7CiAgICAgICAgLi4udGhhdCwKICAgICAgICB0b2FzdDogZmFsc2UsCiAgICB9KTsKfScA9JDTyQTfkgUTZXN0aW1hdGVSZWFkaW5nVGltZQIEAPSQ08kEpKMF3ANAY29uc3QgewogICAgdGV4dCA9ICcnLAogICAgd29yZHNQZXJNaW51dGUgPSAyNTAsCiAgICBkZWxheVRpbWUgPSA1MDAsCn0gPSB0aGF0OwoKLy8gQ291bnQgd29yZHMgKHJvdWdoIGFwcHJveGltYXRpb24gYnkgc3BsaXR0aW5nIG9uIHdoaXRlc3BhY2UpCmNvbnN0IHdvcmRDb3VudCA9IHRleHQudHJpbSgpLnNwbGl0KC9ccysvKS5sZW5ndGg7CmxldCB0b3RhbFRpbWVNcyA9IDA7CgppZiAod29yZENvdW50ID4gMCkgewogICAgLy8gQ2FsY3VsYXRlIHJlYWRpbmcgdGltZSBpbiBtaWxsaXNlY29uZHMKICAgIGNvbnN0IHdvcmRzUGVyU2Vjb25kID0gd29yZHNQZXJNaW51dGUgLyA2MDsKICAgIGNvbnN0IHJlYWRpbmdUaW1lTXMgPSBNYXRoLmNlaWwoKHdvcmRDb3VudCAvIHdvcmRzUGVyU2Vjb25kKSAqIDEwMDApOwoKICAgIHRvdGFsVGltZU1zID0gcmVhZGluZ1RpbWVNcyArIGRlbGF5VGltZTsKfQoKcmV0dXJuIHRvdGFsVGltZU1zOycBBGJvdHMkZDgzNzE0NDQtOTE1OC00NDM2LThmYzctODRjYzkxYjdmNTI1AScA9JDTyQSBpwUGc3lzdGVtAgQA9JDTyQSCpwUPYWIuc2hlbGwuc2VhcmNoJwD0kNPJBIGnBQRmb3JtAgQA9JDTyQSSpwUHbm90aGluZycA9JDTyQSBpwUOYWJSZXRyaWV2ZUZpbGUCBAD0kNPJBJqnBYIBQC8vcHVsbCBkb3duIGZpbGUgZGF0YQppZiAoIXRoYXQudXJsKQp7CiAgICByZXR1cm4gIm5vIGZpbGUgdXJsIHN1cHBsaWVkIjsKfQoKbGV0IGRhdGEgPSBhd2FpdCBvcy5nZXRGaWxlKHRoYXQudXJsKTsKCnJldHVybiBkYXRhOycA9JDTyQSBpwUQYWJSZXRyaWV2ZVJlY29yZAIEAPSQ08kEnagF7ARALy9yZXRyaWV2ZSBzcGVjaWZpZWQgcmVjb3JkCmxldCByZWNvcmROYW1lID0gdGhhdC5yZWNvcmROYW1lOwoKbGV0IHJlY29yZEtleSA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJSZWNvcmRLZXk7CgppZiAodGhhdC5yZWNvcmRLZXkpCnsKICAgIHJlY29yZEtleSA9IHRoYXQucmVjb3JkS2V5Owp9CmVsc2UgaWYgKGF1dGhCb3QpCnsKICAgIGlmIChhdXRoQm90LmlkID09IGNvbmZpZ0JvdC50YWdzLnN0dWRpbykKICAgIHsKICAgICAgICByZWNvcmRLZXkgPSBhdXRoQm90LmlkOwoKICAgICAgICBhd2FpdCBvcy5ncmFudEluc3RBZG1pblBlcm1pc3Npb24ocmVjb3JkS2V5KTsKICAgIH0KfQoKbGV0IHJlY29yZEVuZHBvaW50ID0gdGhhdC5yZWNvcmRFbmRwb2ludCA/IHRoYXQucmVjb3JkRW5kcG9pbnQgOiBsaW5rcy5yZW1lbWJlci50YWdzLmFiRW5kcG9pbnQ7CgppZiAoIXJlY29yZE5hbWUpCnsKICAgIHJldHVybiAibm8gcmVjb3JkIG5hbWUgc3VwcGxpZWQiOwp9CgpsZXQgZ2V0UmVjb3JkID0gYXdhaXQgb3MuZ2V0RGF0YShyZWNvcmRLZXksIHJlY29yZE5hbWUsIHJlY29yZEVuZHBvaW50KTsKCi8vQUREIGFkZGl0aW9uYWwgZXJyb3IgaGFuZGxpbmc/CgpyZXR1cm4gZ2V0UmVjb3JkOycA9JDTyQSBpwUIcmVtZW1iZXICBAD0kNPJBIqtBSjwn5SXZTUzODBhNmItOGI0ZC00YThiLThiMDQtNThlMWViMDNlNWU3JwD0kNPJBIGnBQ1tYW5pZmVzdGF0aW9uAgQA9JDTyQSxrQUo8J+Ul2RjYTVkOTg3LWM0ZDgtNDZlNC1iNjBjLWRhYTdiMmY0ZGRhZCcA9JDTyQSBpwUOb25Mb29rdXBBQkVnZ3MCBAD0kNPJBNitBcwvQGNvbnN0IHsgCiAgICBhYklELAogICAgYWJWZXJzaW9uLAogICAgaW5pdGlhbEJvb3QsCiAgICBhdXRvSGF0Y2gsCiAgICByZXR1cm5UeXBlLAogICAgZWdnUGFyYW1ldGVycywKICAgIGtleSA9IGNvbmZpZ0JvdC50YWdzLmtleSwKICAgIHRvYXN0ID0gdHJ1ZSwKICAgIG9uUHJlcHJvY2Vzc0JvdERhdGEsCiAgICBzb3VyY2VFdmVudCwgLy8gc291cmNlRXZlbnQgaXMgYW4gZXZlbnQgbmFtZSB0aGF0IHN5bWJvbGl6ZXMgd2hhdCB0cmlnZ2VyZWQgdGhpcyBjYWxsLiAob3B0aW9uYWwpCn0gPSB0aGF0OwoKbGV0IHsKICAgIHJlY29yZEtleSA9IGNvbmZpZ0JvdC50YWdzLnN0dWRpbywKfSA9IHRoYXQ7CgphYi5sb2cobGlua3MucGVyc29uYWxpdHkudGFncy5hYkJ1aWxkZXJJZGVudGl0eSArICI6IGxvYWRpbmcgIiArIGFiSUQpOwoKLy9jbGVhciBhYi0xCmlmIChsaW5rcy5tYW5pZmVzdGF0aW9uICYmIGNvbmZpZ0JvdC50YWdzLm1lbnVQb3J0YWwgPT0gImFiTWVudSIpIHsKICAgIGxpbmtzLm1hbmlmZXN0YXRpb24uYWJDbGljaygpOwp9CgpsZXQgcHJvZ3Jlc3NCdXR0b24gPSBhd2FpdCBsaW5rcy5pbnB1dC5hYlByb2dyZXNzQmFyKGBsb2FkaW5nICR7YWJJRH1gKTsKCmNvbnN0IHBvc3NpYmxlQXV0aCA9IGF1dGhCb3QgPyBhdXRoQm90IDogdHJ1ZTsKbGV0IGdldFJlY29yZCA9IGF3YWl0IG9zLmdldERhdGEocmVjb3JkS2V5LCBhYklEKTsKCmxldCBlZ2dEYXRhOwoKLy90aGlzIGxvZ2ljIGhhbmRsZXMgdGhlIHJldHJpZXZlZCBkYXRhLCBzZWFyY2hlcyBhZ2FpbiBpZiBub25lIGNhbWUgdGhyb3VnaAppZiAoIWdldFJlY29yZC5zdWNjZXNzKSB7CiAgICBpZiAocG9zc2libGVBdXRoLmlkID09IHJlY29yZEtleSAmJgogICAgICAgIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJSZWNvcmRLZXkgJiYKICAgICAgICBnZXRSZWNvcmQuZXJyb3JDb2RlID09PSAicmVjb3JkX25vdF9mb3VuZCIKICAgICkgewogICAgICAgIGdldFJlY29yZCA9IGF3YWl0IG9zLmdldERhdGEobGlua3MucmVtZW1iZXIudGFncy5hYlJlY29yZEtleSwgYWJJRCk7CiAgICB9IGVsc2UgaWYgKGdldFJlY29yZC5lcnJvckNvZGUgPT09ICJub3RfYXV0aG9yaXplZCIpIHsKICAgICAgICBpZiAoIXJlY29yZEtleSkgewogICAgICAgICAgICBhd2FpdCBvcy5yZXF1ZXN0QXV0aEJvdCgpOwogICAgICAgICAgICByZWNvcmRLZXkgPSBhdXRoQm90LmlkOwogICAgICAgIH0KCiAgICAgICAgYXdhaXQgb3MuZ3JhbnRJbnN0QWRtaW5QZXJtaXNzaW9uKHJlY29yZEtleSk7CiAgICAgICAgZ2V0UmVjb3JkID0gYXdhaXQgb3MuZ2V0RGF0YShyZWNvcmRLZXksIGFiSUQpOwogICAgfSBlbHNlIGlmIChnZXRSZWNvcmQuZXJyb3JDb2RlID09PSAibm90X2xvZ2dlZF9pbiIpIHsKICAgICAgICBhd2FpdCBvcy5yZXF1ZXN0QXV0aEJvdCgpOwoKICAgICAgICBpZiAoIXJlY29yZEtleSkgewogICAgICAgICAgICByZWNvcmRLZXkgPSBhdXRoQm90LmlkOwogICAgICAgIH0KCiAgICAgICAgZ2V0UmVjb3JkID0gYXdhaXQgb3MuZ2V0RGF0YShyZWNvcmRLZXksIGFiSUQpOwoKICAgICAgICBpZiAoIWdldFJlY29yZC5zdWNjZXNzICYmIAogICAgICAgICAgICBnZXRSZWNvcmQuZXJyb3JDb2RlID09PSAibm90X2F1dGhvcml6ZWQiCiAgICAgICAgKSB7CiAgICAgICAgICAgIGF3YWl0IG9zLmdyYW50SW5zdEFkbWluUGVybWlzc2lvbihyZWNvcmRLZXkpOwogICAgICAgICAgICBnZXRSZWNvcmQgPSBhd2FpdCBvcy5nZXREYXRhKHJlY29yZEtleSwgYWJJRCk7CiAgICAgICAgfQogICAgfQp9CgppZiAoIWdldFJlY29yZC5zdWNjZXNzKSB7CiAgICBpZiAodG9hc3QpIHsgCiAgICAgICAgb3MudG9hc3QoYG5vIGRhdGEgZm91bmQgaW4gJHthYklEfWApOwogICAgfQoKICAgIHNob3V0KCJhYk1lbnVSZWZyZXNoIik7CgogICAgaWYgKHByb2dyZXNzQnV0dG9uKSB7CiAgICAgICAgZGVzdHJveShwcm9ncmVzc0J1dHRvbik7CiAgICB9CgogICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTsKfQplbHNlIHsKICAgIGNvbnN0IHB1YmxpY1JlYWRUZXN0ID0gZ2V0UmVjb3JkLm1hcmtlcnMuaW5kZXhPZigicHVibGljUmVhZCIpOwogICAgY29uc3QgYXV0aG9yID0gYXdhaXQgb3MucmVxdWVzdEF1dGhCb3RJbkJhY2tncm91bmQoKTsKCiAgICBpZiAocHVibGljUmVhZFRlc3QgIT0gLTEgJiYgYXV0aG9yKSB7CiAgICAgICAgaWYgKGF1dGhCb3QudGFncy5wcml2YWN5RmVhdHVyZXMuYWxsb3dQdWJsaWNEYXRhKSB7CiAgICAgICAgICAgIGNvbnN0IGVnZ0hhdGNoRXZlbnQgPSBhYklEOwoKICAgICAgICAgICAgb3MucmVjb3JkRXZlbnQobGlua3MucmVtZW1iZXIudGFncy5hYlJlY29yZEtleSwgZWdnSGF0Y2hFdmVudCk7CiAgICAgICAgfQogICAgfQoKICAgIC8vcGFja2FnZSB0aGUgcmVjb3JkIGRhdGEKICAgIGVnZ0RhdGEgPSBnZXRSZWNvcmQuZGF0YTsKCiAgICBpZiAoYWJWZXJzaW9uKSB7CiAgICAgICAgLy8gQ2hhbmdlIGluaXRpYWwgdGFyZ2V0IHZlcnNpb24gb2YgdGhlIGVnZyBpZiBhYlZlcnNpb24gaXMgcHJvdmlkZWQuCiAgICAgICAgZWdnRGF0YS50YXJnZXRWZXJzaW9uID0gYWJWZXJzaW9uOwogICAgfQp9CgphYi5sb2coYWJQZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgIjogIiArIGFiSUQgKyAiIGxvYWRlZCwgdmVyc2lvbiAiICsgZ2V0UmVjb3JkLmRhdGEudGFyZ2V0VmVyc2lvbiArICIgb2YgIiArIGdldFJlY29yZC5kYXRhLm1heFZlcnNpb24pOwoKaWYgKHJldHVyblR5cGUgIT0gbnVsbCkgewogICAgaWYgKGdldFJlY29yZC5zdWNjZXNzKSB7CiAgICAgICAgaWYgKHJldHVyblR5cGUgPT09ICJkYXRhIikgewogICAgICAgICAgICBsZXQgdmVyc2lvbiA9IGdldFJlY29yZC5kYXRhLnRhcmdldFZlcnNpb24gLSAxOwoKICAgICAgICAgICAgaWYgKGFiVmVyc2lvbikgewogICAgICAgICAgICAgICAgaWYgKCFpc05hTihhYlZlcnNpb24pKSB7CiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiA9IGFiVmVyc2lvbiAtIDE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IGVnZ0RhdGFVUkwgPSBnZXRSZWNvcmQuZGF0YS5lZ2dWZXJzaW9uSGlzdG9yeVt2ZXJzaW9uXTsKICAgICAgICAgICAgY29uc3QgcmV0dXJuRGF0YSA9IGF3YWl0IG9zLmdldEZpbGUoZWdnRGF0YVVSTCk7CgogICAgICAgICAgICBpZiAocHJvZ3Jlc3NCdXR0b24pIHsKICAgICAgICAgICAgICAgIGRlc3Ryb3kocHJvZ3Jlc3NCdXR0b24pOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcmV0dXJuRGF0YTsKICAgICAgICB9IGVsc2UgaWYgKHJldHVyblR5cGUgPT09ICJlZ2ciKSB7CiAgICAgICAgICAgIGlmIChwcm9ncmVzc0J1dHRvbikgewogICAgICAgICAgICAgICAgZGVzdHJveShwcm9ncmVzc0J1dHRvbik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFNpbXBseSByZXR1cm4gdGhlIGVnZyBkYXRhIGlmIHJlcXVlc3RlZC4KICAgICAgICAgICAgcmV0dXJuIGdldFJlY29yZC5kYXRhOwogICAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgICAgLy8gVGhpcyBpcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBvbGQgYXV4IGZpbGVzIHN0b3JlZCBiZWZvcmUgdGhlIHJlY29yZCBzeXN0ZW0gZXhpc3RlZC4KICAgICAgICBpZiAocmV0dXJuVHlwZSA9PT0gImRhdGEiKSB7CiAgICAgICAgICAgIGNvbnN0IHZlcnNpb25BcnJheSA9IEpTT04ucGFyc2UoZWdnRGF0YS5lZ2dWZXJzaW9uSGlzdG9yeSk7CiAgICAgICAgICAgIGNvbnN0IGZpbGVVVUlEID0gdmVyc2lvbkFycmF5W2VnZ0RhdGEubWF4VmVyc2lvbiAtIDFdOwogICAgICAgICAgICBjb25zdCBmaWxlbmFtZWhhc2hMVE0gPSBjcnlwdG8uc2hhMjU2KGZpbGVVVUlEKTsKICAgICAgICAgICAgY29uc3QgZmlsZXVybGhhc2hMVE0gPSAiYXV4XyIgKyBmaWxlbmFtZWhhc2hMVE0gKyAnLmF1eCc7CiAgICAgICAgICAgIGNvbnN0IHRhcmdldExUTVVSTCA9ICJodHRwczovL2J1aWxkZXItbHRtLWZpbGVzLnMzLmFtYXpvbmF3cy5jb20vIiArIGZpbGV1cmxoYXNoTFRNOwogICAgICAgICAgICBjb25zdCBvID0gewogICAgICAgICAgICAgICAgbWV0aG9kOiAiR0VUIiwKICAgICAgICAgICAgICAgIHVybDogdGFyZ2V0TFRNVVJMCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBsZXQgZmlsZUdldCA9IGF3YWl0IHdlYmhvb2sobyk7CgogICAgICAgICAgICBpZiAocHJvZ3Jlc3NCdXR0b24pIHsKICAgICAgICAgICAgICAgIGRlc3Ryb3kocHJvZ3Jlc3NCdXR0b24pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZmlsZUdldC5zdGF0dXMgIT0gMjAwKSB7CiAgICAgICAgICAgICAgICBpZiAodG9hc3QpIHsKICAgICAgICAgICAgICAgICAgICBvcy50b2FzdCgibm8gZmlsZSBmb3VuZCIpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHNob3V0KCJhYlJlZnJlc2giKTsKCiAgICAgICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgZmlsZUdldCA9IGZpbGVHZXQuZGF0YTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGZpbGVHZXQ7CiAgICAgICAgfQogICAgfQp9CgovL2FiIHNwZWNpZmljIHZhcmlhYmxlcyBmb3IgdW5kZXJzdGFuZGluZyBpZiBhIHBvc2l0aW9uIGlzIHNwZWNpZmllZApsZXQgY3VycmVudERpbTsKbGV0IHNwYWNlTW9kOwpsZXQgZGltZW5zaW9uWDsKbGV0IGRpbWVuc2lvblk7CmxldCBkaW1Nb2Q7CgovL2hhbmRsZSBkaW1lbnNpb24gaWRlbnRpZmljYXRpb24KaWYgKGxpbmtzLm1hbmlmZXN0YXRpb24pIHsKICAgIGlmIChsaW5rcy5tYW5pZmVzdGF0aW9uLmxpbmtzLmFiQm90KSB7CiAgICAgICAgY29uc3QgYWJCb3QgPSBsaW5rcy5tYW5pZmVzdGF0aW9uLmxpbmtzLmFiQm90OwoKICAgICAgICBjdXJyZW50RGltID0gYWJCb3QudGFncy5kaW1lbnNpb247CiAgICB9Cn0KZWxzZSB7CiAgICBjdXJyZW50RGltID0gb3MuZ2V0Q3VycmVudERpbWVuc2lvbigpOwp9CgovL2NoZWNrcyBmb3IgZ3JpZCBmb2N1cwppZiAoIWxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJHcmlkRm9jdXMpIHsKICAgIGRpbWVuc2lvblggPSBudWxsOwogICAgZGltZW5zaW9uWSA9IG51bGw7Cn0KZWxzZSB7CiAgICBsZXQgaGF0Y2hQb2ludCA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJHcmlkRm9jdXM7CgogICAgY3VycmVudERpbSA9IGhhdGNoUG9pbnQuZGltZW5zaW9uOwogICAgZGltZW5zaW9uWCA9IGhhdGNoUG9pbnQucG9zaXRpb24ueDsKICAgIGRpbWVuc2lvblkgPSBoYXRjaFBvaW50LnBvc2l0aW9uLnk7CiAgICBzcGFjZU1vZCA9IHsgc3BhY2U6ICJzaGFyZWQiIH07Cn0KCi8vdGhpcyBsb2dpYyBoYW5kbGVzIGxvZ2ljIGFyb3VuZCBhdXRvSGF0Y2ggdnMgbWFudWFsIGhhdGNoaW5nCmlmICghYXV0b0hhdGNoICYmIGNvbmZpZ0JvdC50YWdzLnBhdHRlcm4gPT0gbnVsbCkgewogICAgZGltTW9kID0gewogICAgICAgIFtjdXJyZW50RGltXTogdHJ1ZSwKICAgICAgICBbY3VycmVudERpbSArICJYIl06IGRpbWVuc2lvblgsCiAgICAgICAgW2N1cnJlbnREaW0gKyAiWSJdOiBkaW1lbnNpb25ZLAogICAgICAgIGRpbWVuc2lvbjogY3VycmVudERpbQogICAgfTsKfQplbHNlIHsKICAgIGRpbU1vZCA9IHsgYXV0b0hhdGNoOiB0cnVlLCBrZXkgfTsKfQoKLy9jYWxsIGZvciBvdm8gd2l0aCBpbmZvcm1hdGlvbiBwcm92aWRlZApjb25zdCBtYW5pZmVzdFJlc3VsdCA9IGF3YWl0IHRoaXNCb3QubWFuaWZlc3RPdm8oewogICAgYWJJRCwKICAgIHN0dWRpbzogcmVjb3JkS2V5LAogICAgZGltTW9kLAogICAgc3BhY2VNb2QsCiAgICBlZ2dEYXRhLAogICAgaW5pdGlhbEJvb3QsCiAgICBlZ2dQYXJhbWV0ZXJzLAogICAgb25QcmVwcm9jZXNzQm90RGF0YSwKICAgIHNvdXJjZUV2ZW50LAp9KTsKCmlmIChwcm9ncmVzc0J1dHRvbikgewogICAgZGVzdHJveShwcm9ncmVzc0J1dHRvbik7Cn0KCnJldHVybiB7CiAgICBzdWNjZXNzOiB0cnVlLAogICAgaGF0Y2hlZEJvdHM6IG1hbmlmZXN0UmVzdWx0Py5oYXRjaGVkQm90cywKfTsnAPSQ08kEgacFC21hbmlmZXN0T3ZvAgQA9JDTyQSl3QWhD0Bjb25zdCB7IAogICAgYWJJRCwKICAgIHN0dWRpbywKICAgIGluaXRpYWxCb290LAogICAgc3BhY2VNb2QsCiAgICBkaW1Nb2QsCiAgICBlZ2dEYXRhLAogICAgZWdnUGFyYW1ldGVycywKICAgIG9uUHJlcHJvY2Vzc0JvdERhdGEsCiAgICBzb3VyY2VFdmVudCwKfSA9IHRoYXQ7CgovL2VnZyB2aXN1YWxpemF0aW9uCnNob3V0KCJhYk1lbnVSZXNldCIpOwoKaWYgKGxpbmtzLm1hbmlmZXN0YXRpb24pIHsKICAgIGlmIChsaW5rcy5tYW5pZmVzdGF0aW9uLmxpbmtzLmFiQm90KSB7CiAgICAgICAgZGVzdHJveShsaW5rcy5tYW5pZmVzdGF0aW9uLmxpbmtzLmFiQm90KTsKICAgIH0KfQoKaWYgKGxpbmtzLm92b0JvdCkgewogICAgZGVzdHJveShsaW5rcy5vdm9Cb3QpOwp9CgpsZXQgZWdnTW9kID0gewogICAgc3BhY2U6ICJ0ZW1wTG9jYWwiLAogICAgaW5pdGlhbFRpbWVyOiB0cnVlLAogICAgYWJJRCwKICAgIHN0dWRpbywKICAgIGluaXRpYWxCb290LAogICAgZWdnUGFyYW1ldGVycywKICAgIHNvdXJjZUV2ZW50LAogICAgY3Vyc29yOiAncG9pbnRlcicsCiAgICBtYW5hZ2VyOiBnZXRMaW5rKHRoaXNCb3QpLAogICAgb25DbGljazogYEAKICAgICAgICBsaW5rcy5tYW5hZ2VyLmludGVyYWN0T3ZvKCk7CiAgICBgLAogICAgZm9ybTogImVnZyIsCiAgICBjb2xvcjogbGlua3MucGVyc29uYWxpdHkudGFncy5hYkJhc2VDb2xvciwKICAgIGxhYmVsQ29sb3I6IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJCYXNlTGFiZWxDb2xvciwKICAgIHByb2dyZXNzQmFyQ29sb3I6IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJCYXNlQWNjZW50Q29sb3IsCiAgICBwcm9ncmVzc0JhckJhY2tncm91bmRDb2xvcjogbGlua3MucGVyc29uYWxpdHkudGFncy5hYkJhc2VDb2xvciwKICAgIGxhYmVsU2l6ZTogMC41LAogICAgb25Qb2ludGVyRW50ZXI6IGBACiAgICAgICAgbWFza3MudGlwSWQgPSBhd2FpdCBvcy50aXAodGFncy5hYklEICsgJyB2JyArIHRhZ3MudGFyZ2V0VmVyc2lvbik7CiAgICBgLAogICAgb25Qb2ludGVyRXhpdDogYEAKICAgICAgICBpZiAobWFza3MudGlwSWQpIHsKICAgICAgICAgICAgb3MuaGlkZVRpcHMobWFza3MudGlwSWQpOwogICAgICAgIH0KICAgIGAsCiAgICBsYWJlbFBvc2l0aW9uOiAiZnJvbnQiLAogICAgb3JpZW50YXRpb25Nb2RlOiAiYmlsbGJvYXJkRnJvbnQiLAogICAgb25EZXN0cm95OiBgQAogICAgICAgIGxpbmtzLm1hbmFnZXIubWFza3Mub3ZvQm90ID0gbnVsbDsKICAgIGAsCiAgICBlZ2dUaW1lcjogYEAKICAgICAgICBpZiAodGFncy5wcm9ncmVzc0JhciA8IDEpIHsKICAgICAgICAgICAgdGFncy5wcm9ncmVzc0JhciArPSAwLjE7CgogICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHt3aGlzcGVyKHRoaXNCb3QsICJlZ2dUaW1lciIpO30sIDc1KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzQm90Lm9uQ2xpY2soKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHRhZ3MucHJvZ3Jlc3NCYXIgPSBudWxsOwogICAgICAgIH0KICAgIGAKfTsKCgpjb25zdCBvdm8gPSBhd2FpdCBjcmVhdGUoZWdnRGF0YSwgZWdnTW9kLCBkaW1Nb2QsIHNwYWNlTW9kKTsKbWFza3Mub3ZvQm90ID0gZ2V0TGluayhvdm8pOwoKaWYgKG9uUHJlcHJvY2Vzc0JvdERhdGEpIHsKICAgIG92by52YXJzLm9uUHJlcHJvY2Vzc0JvdERhdGEgPSBvblByZXByb2Nlc3NCb3REYXRhOwp9CgppZiAob3ZvLnRhZ3MuYXV0b0hhdGNoKSB7CiAgICBjb25zdCBoYXRjaGVkQm90cyA9IGF3YWl0IHRoaXNCb3QuaGF0Y2hPdm8ob3ZvKTsKICAgIHJldHVybiB7IGhhdGNoZWRCb3RzIH07Cn0KZWxzZSB7CiAgICBvdm8udGFncy5wcm9ncmVzc0JhciA9IDA7CiAgICBjb25maWdCb3QudGFncy52ZXJzaW9uID0gb3ZvLnRhZ3MubWF4VmVyc2lvbjsKICAgIHNldFRpbWVvdXQoKCkgPT4geyB3aGlzcGVyKG92bywgImVnZ1RpbWVyIik7IH0sIDc1KTsKfScA9JDTyQSBpwUJb25LZXlEb3duAgQA9JDTyQTH7AWCBkAvL2hpZGRlbiB2ZXJzaW9uIGJ1dHRvbiBmb3IgaGF0Y2ggbWVudQppZiAoIWxpbmtzLm92b0JvdCB8fCBjb25maWdCb3QudGFncy5tZW51UG9ydGFsICE9ICJhYk92b01lbnUiKQp7CiAgICByZXR1cm47Cn0KCmlmICh0aGF0LmtleXMgPT0gIlNoaWZ0IikKewogICAgbGV0IHZlcnNpb25CdXR0b24gPSB7fTsKCiAgICB2ZXJzaW9uQnV0dG9uLmFiT3ZvTWVudSA9IHRydWU7CiAgICB2ZXJzaW9uQnV0dG9uLm92b1NvcnRPcmRlciA9IC0xOwogICAgdmVyc2lvbkJ1dHRvbi5tYXhWZXJzaW9uID0gbGlua3Mub3ZvQm90LnRhZ3MubWF4VmVyc2lvbjsKICAgIHZlcnNpb25CdXR0b24ubWFuYWdlciA9ICLwn5SXIiArIHRoaXNCb3QuaWQ7CiAgICB2ZXJzaW9uQnV0dG9uLmxhYmVsID0gImNoYW5nZSBlZ2cgdmVyc2lvbiI7CiAgICB2ZXJzaW9uQnV0dG9uLmxhYmVsQWxpZ25tZW50ID0gImNlbnRlciI7CiAgICB2ZXJzaW9uQnV0dG9uLm92b01lbnVSZXNldCA9ICJAIGRlc3Ryb3kodGhpc0JvdCk7IjsKICAgIHZlcnNpb25CdXR0b24uY29sb3IgPSBsaW5rcy5yZW1lbWJlci50YWdzLmFiQmFzZUFjY2VudENvbG9yOwogICAgdmVyc2lvbkJ1dHRvbi5vbktleVVwID0gIkAgaWYodGhhdC5rZXlzID09ICdTaGlmdCcpe2Rlc3Ryb3kodGhpc0JvdCl9OyI7CiAgICB2ZXJzaW9uQnV0dG9uLm9uQ2xpY2sgPSAiQCBsaW5rcy5tYW5hZ2VyLmNoYW5nZU92b1ZlcnNpb24oKTsiOwoKICAgIGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKHZlcnNpb25CdXR0b24pOwp9JwD0kNPJBIGnBQhoYXRjaE92bwIEAPSQ08kEyPIFkxVALy9sb2dpYyBmb3IgaGF0Y2hpbmcgb2YgYW4gYWIKc2hvdXQoJ292b01lbnVSZXNldCcpOwoKLy9kYXRhIGluIHJlZ2FyZHMgdG8gd2hhdCBhYiBpcyBnb2luZyB0byBiZSBoYXRjaGVkCmNvbnN0IG92byA9IHRoYXQ7CgovL2hhdGNoIHNwZWNpZmljIHZhcmlhYmxlcwpsZXQgaW5pdGlhbEJvb3QgPSBvdm8udGFncy5pbml0aWFsQm9vdDsKbGV0IHRhcmdldFZlcnNpb24gPSBvdm8udGFncy5zdGFibGVWZXJzaW9uID8/IG92by50YWdzLnRhcmdldFZlcnNpb247CgppZiAoKGNvbmZpZ0JvdC50YWdzLmFiVmVyc2lvbiB8fCBjb25maWdCb3QudGFncy5wYXR0ZXJuVmVyc2lvbikgJiYgKG92by50YWdzLmFiSUQgPT0gY29uZmlnQm90LnRhZ3MucGF0dGVybiB8fCBvdm8udGFncy5hYklEID09IGNvbmZpZ0JvdC50YWdzLmFiKSkKewogICAgdGFyZ2V0VmVyc2lvbiA9IGNvbmZpZ0JvdC50YWdzLmFiVmVyc2lvbiA/PyBjb25maWdCb3QudGFncy5wYXR0ZXJuVmVyc2lvbjsKfQoKLy90YXJnZXRlZCB2ZXJzaW9ucwppZiAoY29uZmlnQm90LnRhZ3MudmVyc2lvbiAmJiAob3ZvLnRhZ3MuYWJJRCA9PSBjb25maWdCb3QudGFncy5wYXR0ZXJuIHx8IG92by50YWdzLmFiSUQgPT0gY29uZmlnQm90LnRhZ3MuYWIgfHwgIWlzTmFOKGNvbmZpZ0JvdC50YWdzLnZlcnNpb24pKSkKewogICAgaWYgKGNvbmZpZ0JvdC50YWdzLnZlcnNpb24gPT0gImZlZWRiYWNrIikKICAgIHsKICAgICAgICB0YXJnZXRWZXJzaW9uID0gb3ZvLnRhZ3MuZmVlZGJhY2tWZXJzaW9uOwogICAgfQogICAgZWxzZSBpZiAoY29uZmlnQm90LnRhZ3MudmVyc2lvbiA9PSAiY3VycmVudCIpCiAgICB7CiAgICAgICAgdGFyZ2V0VmVyc2lvbiA9IG92by50YWdzLmVnZ1ZlcnNpb25IaXN0b3J5Lmxlbmd0aDsKICAgIH0KICAgIGVsc2UgaWYgKCFpc05hTihjb25maWdCb3QudGFncy52ZXJzaW9uKSkKICAgIHsKICAgICAgICB0YXJnZXRWZXJzaW9uID0gY29uZmlnQm90LnRhZ3MudmVyc2lvbgogICAgfQoKICAgIGNvbmZpZ0JvdC50YWdzLnZlcnNpb24gPSBudWxsOwp9CgppZiAoaXNOYU4odGFyZ2V0VmVyc2lvbikpCnsKICAgIHRhcmdldFZlcnNpb24gPSBvdm8udGFncy5lZ2dWZXJzaW9uSGlzdG9yeS5sZW5ndGg7Cn0KCmxldCB2ZXJzaW9uQXJyYXkgPSBvdm8udGFncy5lZ2dWZXJzaW9uSGlzdG9yeTsKbGV0IGZpbGVVUkwgPSB2ZXJzaW9uQXJyYXlbdGFyZ2V0VmVyc2lvbiAtIDFdOwpsZXQga2V5ID0gb3ZvLnRhZ3Mua2V5ID8gb3ZvLnRhZ3Mua2V5IDogY29uZmlnQm90LnRhZ3Mua2V5OwpsZXQgZmlsZUdldDsKCi8vYWN0dWFsIGZpbGUgcmV0cmlldmFsCnRyeQp7CiAgICBmaWxlR2V0ID0gYXdhaXQgb3MuZ2V0RmlsZShmaWxlVVJMKTsKfQpjYXRjaCAoZSkKewogICAgY29uc29sZS5lcnJvcihlKTsKICAgIGxpbmtzLnV0aWxzLmFiTG9nQW5kVG9hc3QoJ25vIGZpbGUgZm91bmQnKTsKCiAgICByZXR1cm47Cn0KCi8vaGFuZGxpbmcgZm9yIGVuY3J5cHRlZCBhYiBmaWxlCmlmIChjcnlwdG8uaXNFbmNyeXB0ZWQoZmlsZUdldCkpCnsKICAgIGlmICgha2V5KQogICAgewogICAgICAgIGtleSA9IGF3YWl0IG9zLnNob3dJbnB1dCgnJywgewogICAgICAgICAgICB0eXBlOiAnc2VjcmV0JywKICAgICAgICAgICAgdGl0bGU6ICdFbnRlciBrZXknCiAgICAgICAgfSk7CiAgICB9CgogICAgZmlsZUdldCA9IGNyeXB0by5kZWNyeXB0KGtleSwgZmlsZUdldCk7CgogICAgaWYgKGZpbGVHZXQgPT0gbnVsbCkgewogICAgICAgIGxpbmtzLnV0aWxzLmFiTG9nQW5kVG9hc3QoJ2luY29ycmVjdCBrZXknKTsKICAgICAgICByZXR1cm47CiAgICB9CiAgIAogICAgZmlsZUdldCA9IEpTT04ucGFyc2UoZmlsZUdldCk7CiAgICBmaWxlR2V0ID0gZmlsZUdldC5zdGF0ZTsKfQplbHNlCnsKICAgIGZpbGVHZXQgPSBmaWxlR2V0LnN0YXRlOwp9CgovL2NsZWFuIHVwCmRlc3Ryb3kob3ZvKTsKCi8vdG9hc3QgaWYgbm90IG9uIHN0YWJsZQppZihvdm8udGFncy5zdGFibGVWZXJzaW9uICE9IHRhcmdldFZlcnNpb24gJiYgIWNvbmZpZ0JvdC50YWdzLmFiU2lsZW50KQp7CiAgICBpZiAob3ZvLnRhZ3MuZmVlZGJhY2tWZXJzaW9uID09IHRhcmdldFZlcnNpb24pCiAgICB7CiAgICAgICAgb3MudG9hc3QoImxvYWQgZmVlZGJhY2sgdmVyc2lvbiBvZiAiICsgb3ZvLnRhZ3MuYWJJRCk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgb3MudG9hc3QoImxvYWQgdmVyc2lvbiAiICsgdGFyZ2V0VmVyc2lvbiArICIgb2YgIiArIG92by50YWdzLmVnZ1ZlcnNpb25IaXN0b3J5Lmxlbmd0aCArICIgb2YgIiArIG92by50YWdzLmFiSUQpOwogICAgfQp9CgovL2dlbmVyYXRlIGJvdHMgYmFzZWQgb24gdGhlIGZpbGUgcmV0cmlldmVkICpIRVJFKgpjb25zdCBuZXdCb3RzID0gYXdhaXQgbGlua3MuY3JlYXRlLmFiQ3JlYXRlQm90cyh7CiAgICBib3RzOiBmaWxlR2V0LAogICAgb3JpZ2luOiBvdm8udGFncy5hYklELAogICAgc3R1ZGlvOiBvdm8udGFncy5zdHVkaW8sCiAgICB2ZXJzaW9uOiB0YXJnZXRWZXJzaW9uLAogICAgaW5pdGlhbEJvb3Q6IGluaXRpYWxCb290LAogICAgZWdnUGFyYW1ldGVyczogb3ZvLnRhZ3MuZWdnUGFyYW1ldGVycywKICAgIG9uUHJlcHJvY2Vzc0JvdERhdGE6IG92by52YXJzLm9uUHJlcHJvY2Vzc0JvdERhdGEsCiAgICBzb3VyY2VFdmVudDogb3ZvLnRhZ3Muc291cmNlRXZlbnQsCn0pOwoKcmV0dXJuIG5ld0JvdHM7JwD0kNPJBIGnBQtpbnRlcmFjdE92bwIEAPSQ08kE3IcG6QZALy9tYW51YWwgaGF0Y2ggbWVudQpjb25zdCBvdm9Cb3QgPSB0aGF0ID8gdGhhdCA6IGxpbmtzLm92b0JvdDsKCmlmICghb3ZvQm90KSB7CiAgICByZXR1cm47Cn0KCnNob3V0KCJvdm9NZW51UmVzZXQiKTsKCmNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gImFiT3ZvTWVudSI7CgptYXNrcy5vbkdyaWRDbGljayA9IGBACiAgICBzaG91dCgib3ZvTWVudVJlc2V0Iik7CmA7Cm1hc2tzLm92b01lbnVSZXNldCA9IGBACiAgICBtYXNrcy5vbkdyaWRDbGljayA9IG51bGw7CiAgICBtYXNrcy5vdm9NZW51UmVzZXQgPSBudWxsOwoKICAgIGNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gbnVsbDsKYDsKCm9zLnR3ZWVuVG8ob3ZvQm90LCAxNSw0NSw0NSwgNSk7Cgpjb25zdCBlZ2dNZW51QnV0dG9uID0gewogICAgYWJPdm9NZW51OiB0cnVlLAogICAgbWFuYWdlcjogZ2V0TGluayh0aGlzQm90KSwKICAgIG92b0JvdDogZ2V0TGluayhvdm9Cb3QpLAogICAgY29sb3I6IGFiUGVyc29uYWxpdHkudGFncy5hYkJhc2VDb2xvciwKICAgIHRhcmdldFZlcnNpb246IG92b0JvdC50YWdzLnRhcmdldFZlcnNpb24sCiAgICBsYWJlbDogYGhhdGNoICR7b3ZvQm90LnRhZ3MuYWJJRH0gdiR7b3ZvQm90LnRhZ3MudGFyZ2V0VmVyc2lvbn0gb2YgJHtvdm9Cb3QudGFncy5tYXhWZXJzaW9ufWAsCiAgICBsYWJlbEFsaWdubWVudDogImNlbnRlciIsCiAgICBvdm9NZW51UmVzZXQ6IGBACiAgICAgICAgZGVzdHJveSh0aGlzQm90KTsKICAgIGAsCiAgICBvbkNsaWNrOiBgQAogICAgICAgIGxpbmtzLm1hbmFnZXIuaGF0Y2hPdm8obGlua3Mub3ZvQm90KTsKICAgIGAsCn07CgpsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbihlZ2dNZW51QnV0dG9uKTsnAPSQ08kEgacFBmNyZWF0ZQIEAPSQ08kExo4GKPCflJczNGMzYzIxMC01YmYxLTQ5Y2YtYjE1MS1lZTJkMDdmMGU2NzMnAPSQ08kEgacFEGNoYW5nZU92b1ZlcnNpb24CBAD0kNPJBO2OBvACQC8vbG9naWMgZm9yIHZlcnNpb24gY2hhbmdpbmcgd2hlbiBtYW51YWxseSBoYXRjaGluZyBhbiBhYgpjb25zdCBvdm9Cb3QgPSBsaW5rcy5vdm9Cb3Q7CgpsZXQgbmV3VmVyc2lvbiA9IGF3YWl0IG9zLnNob3dJbnB1dChvdm9Cb3QudGFncy50YXJnZXRWZXJzaW9uLCB7CiAgICBwbGFjZWhvbGRlcjogImVudGVyIGEgdmVyc2lvbiBmcm9tIDEgdG8gIiArIG92b0JvdC50YWdzLm1heFZlcnNpb24KfSk7Cgpvdm9Cb3QudGFncy50YXJnZXRWZXJzaW9uID0gbmV3VmVyc2lvbjsKb3ZvQm90LnRhZ3MubGFiZWwgPSAndicrIG5ld1ZlcnNpb247Cgpjb25maWdCb3QudGFncy52ZXJzaW9uID0gbmV3VmVyc2lvbjsKCnNob3V0KCJvdm9NZW51UmVzZXQiKTsnAPSQ08kEgacFBG1lbnUCBAD0kNPJBN6RBijwn5SXYjMwYzZjNWQtYTRmNy00MjY2LWJhMzgtMzkzZGM5NWUxZWNiJwD0kNPJBIGnBQhhYklnbm9yZQIEAPSQ08kEhZIGBHRydWUnAPSQ08kEgacFB2FiU2hlbGwCBAD0kNPJBIqSBgR0cnVlJwD0kNPJBIGnBQxhYjFMVE1TZWFyY2gCBAD0kNPJBI+SBjNALy9zdXBwb3J0IG9sZCBzeW50YXgKdGhpc0JvdC5vbkxvb2t1cEFCRWdncyh0aGF0KTsnAPSQ08kEgacFDW9uTG9va3VwQXNrSUQCBAD0kNPJBMOSBrMIQGxldCBwcm9ncmVzc0J1dHRvbiA9IGF3YWl0IGxpbmtzLmlucHV0LmFiUHJvZ3Jlc3NCYXIoYGxvb2tpbmcgdXAgJHt0aGF0LmFza0lEfWApOwoKY29uc3QgYXNrSUQgPSAiYXNrXyIgKyB0aGF0LmFza0lEOwpjb25zdCBzb3VyY2VFdmVudCA9IHRoYXQuc291cmNlRXZlbnQ7CmNvbnN0IGVuZHBvaW50ID0gbGlua3MucmVtZW1iZXIudGFncy5hYkVuZHBvaW50OwpsZXQgbG9va3VwQXNrOyAKCnRyeQp7CiAgICBsb29rdXBBc2sgPSBhd2FpdCBvcy5nZXREYXRhKGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJSZWNvcmRLZXksIGFza0lELCBlbmRwb2ludCk7Cn0KY2F0Y2gKewogICAgbG9va3VwQXNrID0gYXdhaXQgb3MuZ2V0RGF0YShsaW5rcy5yZW1lbWJlci50YWdzLmFiUmVjb3JkS2V5LCB0aGF0LmFza0lELCBlbmRwb2ludCk7Cn0KCmlmICh0aGF0LmNoYW5uZWxDb25maWcpCnsKICAgIGlmIChwcm9ncmVzc0J1dHRvbikKICAgIHsKICAgICAgICBkZXN0cm95KHByb2dyZXNzQnV0dG9uKTsKICAgIH0KICAgIAogICAgcmV0dXJuIGxvb2t1cEFzazsKfQplbHNlIGlmIChsb29rdXBBc2suc3VjY2VzcyAmJiBsb29rdXBBc2suZGF0YS5wYXR0ZXJuSUQpCnsKICAgIGlmIChsb29rdXBBc2suZGF0YS5zdHVkaW9JRCA9PSAiQUIiKQogICAgewogICAgICAgIGF3YWl0IGxpbmtzLmxlYXJuLmFiQWRhcHQobG9va3VwQXNrLmRhdGEucGF0dGVybklEKTsKCiAgICAgICAgc2hvdXQoIm9uQUJJbml0aWFsaXplZCIpOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIHRoaXNCb3Qub25Mb29rdXBBQkVnZ3Moe2FiSUQ6IGxvb2t1cEFzay5kYXRhLnBhdHRlcm5JRCwgcmVjb3JkS2V5OiBsb29rdXBBc2suZGF0YS5zdHVkaW9JRCwgYXV0b0hhdGNoOiB0cnVlLCBzb3VyY2VFdmVudCB9KTsgIAogICAgfQp9CmVsc2UgaWYgKGxvb2t1cEFzay5zdWNjZXNzICYmICFsb29rdXBBc2suZGF0YS51cmwpCnsKICAgIGxvb2t1cEFzay5zdWNjZXNzID0gIWxvb2t1cEFzay5zdWNjZXNzOwp9CgppZiAocHJvZ3Jlc3NCdXR0b24pCnsKICAgIGRlc3Ryb3kocHJvZ3Jlc3NCdXR0b24pOwp9CgpyZXR1cm4gbG9va3VwQXNrOycA9JDTyQSBpwUFaW5wdXQCBAD0kNPJBPeaBijwn5SXZjg2MDI4NzgtYzJlZi00OGJkLTg1YTAtOGQ2MzUxZWI0MTIwJwD0kNPJBIGnBQVoYXRjaAIEAPSQ08kEnpsGwAFALy9zaG91dCgiaGF0Y2giLCB7YWJJRDogYWJJRCwgcmVjb3JkS2V5OiBzdHVkaW8sIGtleToga2V5LCBhdXRvSGF0Y2g6IGJvb2xlYW4sIHJldHVyblR5cGU6IGRhdGEvbnVsbCwgZWdnUGFyYW1ldGVyczogYXJnfSk7Cgpjb25zdCBsb29rVXAgPSBhd2FpdCB0aGlzQm90Lm9uTG9va3VwQUJFZ2dzKHRoYXQpOwoKcmV0dXJuIGxvb2tVcDsnAPSQ08kEgacFCWFiVmVyc2lvbgIEAPSQ08kE35wGBDEwLjUnAPSQ08kEgacFBWxlYXJuAgQA9JDTyQTknAYo8J+UlzY2NTdiODY1LWU5ODMtNDQwMS05ZmM5LWY1NDE4ZDE4YTdmNycA9JDTyQSBpwUKYWJMb2FkVG9vbAIEAPSQ08kEi50GsAdAbGV0IHsKICAgIHRvb2xOYW1lLAogICAgdG9vbFBhcmFtZXRlcnMsCn0gPSB0aGF0ID8/IHt9Cgphc3NlcnQodG9vbE5hbWUsIGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gdG9vbE5hbWUgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXIuYCk7Cgpjb25zb2xlLmxvZyhgWyR7dGFncy5zeXN0ZW19LiR7dGFnTmFtZX1dIHRvb2xQYXJhbWV0ZXJzOmAsIHRvb2xQYXJhbWV0ZXJzKTsKCmNvbnN0IHVybCA9IGxpbmtzLmxlYXJuLmFiQnVpbGRDYXN1YWxDYXRhbG9nVVJMKGAvYWJ0b29scy8ke3Rvb2xOYW1lfS5hdXhgKTsKCmxldCBhdXg7Cgp0cnkgewogICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB3ZWIuaG9vayh7CiAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICB1cmwsCiAgICB9KQoKICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkgewogICAgICAgIGF1eCA9IHJlc3BvbnNlLmRhdGE7CiAgICB9Cn0gY2F0Y2ggKGUpIHsKICAgIGxldCBtZXNzYWdlID0gYEZhaWxlZCB0byBkb3dubG9hZCB0b29sICcke3Rvb2xOYW1lfScuYDsKICAgIGlmIChlLm1lc3NhZ2UpIHsKICAgICAgICBtZXNzYWdlICs9IGAgRXJyb3I6ICR7ZS5tZXNzYWdlfWA7CiAgICB9CgogICAgbGlua3MudXRpbHMuYWJMb2dBbmRUb2FzdChtZXNzYWdlKTsKfQppZiAoYXV4KSB7CiAgICBpZiAoYXV4LnZlcnNpb24gPT09IDEpIHsKICAgICAgICByZXR1cm4gbGlua3MuY3JlYXRlLmFiQ3JlYXRlQm90cyh7IGJvdHM6IGF1eC5zdGF0ZSwgZWdnUGFyYW1ldGVyczogdG9vbFBhcmFtZXRlcnMsIGlnbm9yZUdyaWRGb2N1czogdHJ1ZSB9KQogICAgfSBlbHNlIHsKICAgICAgICBsaW5rcy51dGlscy5hYkxvZ0FuZFRvYXN0KGBhYiB0b29scyBtdXN0IGJlIGluIGF1eCBmb3JtYXQgdjEuICcke3Rvb2xOYW1lfScgaXMgYXV4IGZvcm1hdCB2JHthdXgudmVyc2lvbn1gKTsKICAgIH0KfScA9JDTyQSBpwUFdXRpbHMCBAD0kNPJBLykBijwn5SXOTNkOTY1ZTAtZDIwZS00YjQ1LThjYTAtNjQ5MjczYjcxMzhjJwD0kNPJBIGnBQtwZXJzb25hbGl0eQIEAPSQ08kE46QGKPCflJdiNzZkZmJjNC04NTRiLTRmNmQtYTkxZi1hOTQ4Njk0Nzc0ZGInAQRib3RzJGY4NjAyODc4LWMyZWYtNDhiZC04NWEwLThkNjM1MWViNDEyMAEnAPSQ08kEiqUGEWNtZFVwZGF0ZUFydGlmYWN0AgQA9JDTyQSLpQaMCEBjb25zdCBhcmdzID0gdGhhdDsKCmlmIChhcmdzICYmIGFyZ3MubGVuZ3RoID4gMCkgewogICAgLy8gVXBkYXRlIHVzZXIgcHJvdmlkZWQgYXJ0aWZhY3QgbmFtZXMuCiAgICBmb3IgKGNvbnN0IGFiQXJ0aWZhY3ROYW1lIG9mIGFyZ3MpIHsKICAgICAgICBsaW5rcy5hcnRpZmFjdC5hYlVwZGF0ZUFydGlmYWN0U2hhcmRzKHsgYWJBcnRpZmFjdE5hbWUgfSk7CiAgICB9Cn0gZWxzZSB7CiAgICAvLyBIYXZlIHVzZXIgc2VsZWN0IGFydGlmYWN0IG5hbWVzIHRvIHVwZGF0ZS4KICAgIGxldCBhYkFydGlmYWN0TmFtZXMgPSBsaW5rcy5hcnRpZmFjdC5hYkdldEFydGlmYWN0TmFtZXNJbkluc3QoKTsKCiAgICBpZiAoYWJBcnRpZmFjdE5hbWVzICYmIGFiQXJ0aWZhY3ROYW1lcy5sZW5ndGggPiAwKSB7CiAgICAgICAgYWJBcnRpZmFjdE5hbWVzLnNvcnQoKTsKCiAgICAgICAgY29uc3Qgc2VsZWN0aW9uT3B0aW9ucyA9IGFiQXJ0aWZhY3ROYW1lcy5tYXAoKGVudHJ5KSA9PiB7CiAgICAgICAgICAgIHJldHVybiB7IGxhYmVsOiBlbnRyeSwgdmFsdWU6IGVudHJ5IH0KICAgICAgICB9KQoKICAgICAgICBjb25zdCBzZWxlY3RlZE9wdGlvbnMgPSBhd2FpdCBvcy5zaG93SW5wdXQobnVsbCwgewogICAgICAgICAgICB0aXRsZTogJ1VwZGF0ZSBhcnRpZmFjdHMnLAogICAgICAgICAgICB0eXBlOiAnbGlzdCcsCiAgICAgICAgICAgIHN1YnR5cGU6ICdjaGVja2JveCcsCiAgICAgICAgICAgIGl0ZW1zOiBzZWxlY3Rpb25PcHRpb25zCiAgICAgICAgfSkKCiAgICAgICAgZm9yIChjb25zdCBzZWxlY3RlZCBvZiBzZWxlY3RlZE9wdGlvbnMpIHsKICAgICAgICAgICAgbGlua3MuYXJ0aWZhY3QuYWJVcGRhdGVBcnRpZmFjdFNoYXJkcyh7IGFiQXJ0aWZhY3ROYW1lOiBzZWxlY3RlZC52YWx1ZSB9KTsKICAgICAgICB9CiAgICB9IGVsc2UgewogICAgICAgIGxpbmtzLnV0aWxzLmFiTG9nQW5kVG9hc3QoYENhbm5vdCB1cGRhdGUgYXJ0aWZhY3RzIGJlY2F1c2UgdGhlcmUgYXJlIG5vIGFydGlmYWN0cyBpbiB0aGUgaW5zdC5gKTsKICAgIH0KfQonAPSQ08kEiqUGBnN5c3RlbQIEAPSQ08kEmK0GDmFiLnNoZWxsLmlucHV0JwD0kNPJBIqlBgRmb3JtAgQA9JDTyQSnrQYHbm90aGluZycA9JDTyQSKpQYJb25LZXlEb3duAgQA9JDTyQSvrQb6CkBjb25zdCB7IGtleXMgfSA9IHRoYXQ7CgppZiAobWFza3MuY2hhdE9wZW4pIHsKICAgIGNvbnN0IGVzYyA9IHRoYXQua2V5cy5pbmNsdWRlcygnRXNjYXBlJyk7CgogICAgaWYgKGVzYykgewogICAgICAgIHRoaXNCb3QuYWJDaGF0QmFyQ2xvc2UoKTsKICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgYXJyb3dVcCA9IHRoYXQua2V5cy5pbmNsdWRlcygnQXJyb3dVcCcpOwogICAgICAgIGNvbnN0IGFycm93RG93biA9IHRoYXQua2V5cy5pbmNsdWRlcygnQXJyb3dEb3duJyk7CiAgICAgICAgCiAgICAgICAgaWYgKGFycm93VXAgfHwgYXJyb3dEb3duKSB7CiAgICAgICAgICAgIC8vIElmIEFycm93VXAgb3IgQXJyb3dEb3duIGFyZSBwcmVzc2VkIHdoaWxlIHRoZSBhYiBjaGF0IGJhciBpcyBvcGVuIHRoZW4KICAgICAgICAgICAgLy8gc3RhcnQgY29tYmluZyB0aHJvdWdoIGNoYXQgaGlzdG9yeS4KICAgICAgICAgICAgY29uc3QgZGlyID0gYXJyb3dVcCA/IC0xIDogMTsKICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzQm90LnZhcnMuaGlzdG9yeUluZGV4ICsgZGlyOwogICAgICAgICAgICBsZXQgaGlzdG9yaWNhbFRleHQgPSBudWxsOwoKICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzQm90LnZhcnMuY2hhdEhpc3RvcnkubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBoaXN0b3JpY2FsVGV4dCA9IHRoaXNCb3QudmFycy5jaGF0SGlzdG9yeVtpbmRleF07CiAgICAgICAgICAgICAgICB0aGlzQm90LnZhcnMuaGlzdG9yeUluZGV4ID0gaW5kZXg7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPCAwKSB7CiAgICAgICAgICAgICAgICB0aGlzQm90LnZhcnMuaGlzdG9yeUluZGV4ID0gLTE7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPj0gdGhpc0JvdC52YXJzLmNoYXRIaXN0b3J5Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgdGhpc0JvdC52YXJzLmhpc3RvcnlJbmRleCA9IHRoaXNCb3QudmFycy5jaGF0SGlzdG9yeS5sZW5ndGg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgY2hhdCBiYXIuCiAgICAgICAgICAgIGF3YWl0IHRoaXNCb3QuYWJDaGF0QmFyQ2xvc2UoKTsKICAgICAgICAgICAgdGhpc0JvdC5hYkNoYXRCYXJPcGVuKHsgcHJlZmlsbDogaGlzdG9yaWNhbFRleHQgfSk7CiAgICAgICAgfQogICAgfQp9IGVsc2UgewogICAgY29uc3QgYmFja3RpY2sgPSB0aGF0LmtleXMuaW5jbHVkZXMoJ2AnKSB8fCB0aGF0LmtleXMuaW5jbHVkZXMoIkRlYWQiKTsKCiAgICBpZiAoYmFja3RpY2spIHsKICAgICAgICB0aGlzQm90LnZhcnMuaGlzdG9yeUluZGV4ID0gdGhpc0JvdC52YXJzLmNoYXRIaXN0b3J5Lmxlbmd0aDsKICAgICAgICB0aGlzQm90LmFiQ2hhdEJhck9wZW4oKTsKICAgIH0KfQonAPSQ08kEiqUGBm9uQ2hhdAIEAPSQ08kEqrgGihhALy8gTm90IHN1cHBvcnRlZCBvdXRzaWRlIG9mIGJ1aWxkZXIgdmVyc2lvbgppZiAoIWJ1aWxkZXJWZXJzaW9uKSB7CiAgICB0aGlzQm90LmFiQ2hhdEJhckNsb3NlKCk7CiAgICByZXR1cm47Cn0KCmlmICghdGhhdC5tZXNzYWdlKSB7CiAgICB0aGlzQm90LmFiQ2hhdEJhckNsb3NlKCk7CiAgICByZXR1cm47Cn0KCi8vIEFwcGVuZCBtZXNzYWdlIHRvIGNoYXQgaGlzdG9yeSBhbmQgdXBkYXRlIHRoZSBjdXJyZW50IGhpc3RvcnkgaW5kZXguCnRoaXNCb3QudmFycy5jaGF0SGlzdG9yeS5wdXNoKHRoYXQubWVzc2FnZSk7CnRoaXNCb3QudmFycy5oaXN0b3J5SW5kZXggPSB0aGlzQm90LnZhcnMuY2hhdEhpc3RvcnkubGVuZ3RoOwoKLy8gRnVuY3Rpb24gdG8gcGFyc2UgYXJndW1lbnRzIHdpdGggcXVvdGUgc3VwcG9ydCBhbmQgZXJyb3IgaGFuZGxpbmcKLy8gRXhhbXBsZXM6IAovLyAgICdhcmcxIGFyZzInIC0+IFsnYXJnMScsICdhcmcyJ10KLy8gICAnImFyZyB3aXRoIHNwYWNlcyIgYXJnMicgLT4gWydhcmcgd2l0aCBzcGFjZXMnLCAnYXJnMiddCi8vICAgJyJ1bmNsb3NlZCBxdW90ZScgLT4gdGhyb3dzIEVycm9yCmZ1bmN0aW9uIHBhcnNlQXJndW1lbnRzKGlucHV0KSB7CiAgICBjb25zdCBhcmdzID0gW107CiAgICBsZXQgY3VycmVudEFyZyA9ICcnOwogICAgbGV0IGluc2lkZVF1b3RlcyA9IG51bGw7CiAgICBsZXQgcXVvdGVTdGFydFBvcyA9IC0xOwogICAgCiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgY29uc3QgY2hhciA9IGlucHV0W2ldOwogICAgICAgIAogICAgICAgIGlmIChpbnNpZGVRdW90ZXMpIHsKICAgICAgICAgICAgaWYgKGNoYXIgPT09IGluc2lkZVF1b3RlcykgewogICAgICAgICAgICAgICAgaW5zaWRlUXVvdGVzID0gbnVsbDsKICAgICAgICAgICAgICAgIHF1b3RlU3RhcnRQb3MgPSAtMTsKICAgICAgICAgICAgfSBlbHNlIGlmIChjaGFyID09PSAnXFwnICYmIGkgKyAxIDwgaW5wdXQubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBpKys7IC8vIFNraXAgdGhlIGJhY2tzbGFzaAogICAgICAgICAgICAgICAgY3VycmVudEFyZyArPSBpbnB1dFtpXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGN1cnJlbnRBcmcgKz0gY2hhcjsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChjaGFyID09PSAnIicgfHwgY2hhciA9PT0gIiciKSB7CiAgICAgICAgICAgICAgICBpbnNpZGVRdW90ZXMgPSBjaGFyOwogICAgICAgICAgICAgICAgcXVvdGVTdGFydFBvcyA9IGk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PT0gJyAnKSB7CiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEFyZy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGN1cnJlbnRBcmcpOwogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBcmcgPSAnJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGN1cnJlbnRBcmcgKz0gY2hhcjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIAogICAgaWYgKGluc2lkZVF1b3RlcykgewogICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5jbG9zZWQgcXVvdGU6IGZvdW5kIG9wZW5pbmcgJHtpbnNpZGVRdW90ZXN9IGF0IHBvc2l0aW9uICR7cXVvdGVTdGFydFBvc30gYnV0IG5vIGNsb3NpbmcgcXVvdGVgKTsKICAgIH0KICAgIAogICAgaWYgKGN1cnJlbnRBcmcubGVuZ3RoID4gMCkgewogICAgICAgIGFyZ3MucHVzaChjdXJyZW50QXJnKTsKICAgIH0KICAgIAogICAgcmV0dXJuIGFyZ3M7Cn0KCmlmICh0aGF0Lm1lc3NhZ2VbMF0gPT0gIi4iKSB7CiAgICBjb25zdCBjb21tYW5kUGFydCA9IHRoYXQubWVzc2FnZS5zdWJzdHJpbmcoMSk7IC8vIFJlbW92ZSB0aGUgZG90CiAgICBjb25zdCBzcGFjZUluZGV4ID0gY29tbWFuZFBhcnQuaW5kZXhPZignICcpOwogICAgCiAgICBsZXQgY21kLCBhcmdzOwogICAgaWYgKHNwYWNlSW5kZXggPT09IC0xKSB7CiAgICAgICAgLy8gTm8gYXJndW1lbnRzCiAgICAgICAgY21kID0gY29tbWFuZFBhcnQ7CiAgICAgICAgYXJncyA9IHVuZGVmaW5lZDsKICAgIH0gZWxzZSB7CiAgICAgICAgLy8gSGFzIGFyZ3VtZW50cwogICAgICAgIGNtZCA9IGNvbW1hbmRQYXJ0LnN1YnN0cmluZygwLCBzcGFjZUluZGV4KTsKICAgICAgICBjb25zdCBhcmdzU3RyaW5nID0gY29tbWFuZFBhcnQuc3Vic3RyaW5nKHNwYWNlSW5kZXggKyAxKTsKICAgICAgICAKICAgICAgICB0cnkgewogICAgICAgICAgICBjb25zdCBwYXJzZWRBcmdzID0gcGFyc2VBcmd1bWVudHMoYXJnc1N0cmluZyk7CiAgICAgICAgICAgIGFyZ3MgPSBwYXJzZWRBcmdzLmxlbmd0aCA/IHBhcnNlZEFyZ3MgOiB1bmRlZmluZWQ7CiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgbGlua3MudXRpbHMuYWJMb2dBbmRUb2FzdCh7IG1lc3NhZ2U6IGBFcnJvciBwYXJzaW5nIGNvbW1hbmQgYXJndW1lbnRzOiAke2Vycm9yLm1lc3NhZ2V9YCwgbG9nVHlwZTogJ0Vycm9yJyB9KTsKICAgICAgICAgICAgdGhpc0JvdC5hYkNoYXRCYXJDbG9zZSgpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgIC8vIENyZWF0ZSBhIGZyZXNoIENvbW1hbmRzTWFuYWdlciB3aXRoIGVhY2ggY2FsbCBzbyB0aGF0IHdlIGFsd2F5cyBoYXZlIHRoZSBsYXRlc3QgY29tbWFuZHMgYW5kIGZ1bmN0aW9uYWxpdHkuCiAgICBjb25zdCBhYkNvbW1hbmRzID0gbmV3IEFCQ29tbWFuZHNNYW5hZ2VyKCk7CgogICAgaWYgKGFiQ29tbWFuZHMgJiYgYWJDb21tYW5kcy5oYXNDb21tYW5kKGNtZCkpIHsKICAgICAgICAvLyBDYWxsIGNvbW1hbmQgd2l0aCBhcmdzLgogICAgICAgIGFiQ29tbWFuZHMuY2FsbENvbW1hbmQoY21kLCBhcmdzKTsKICAgIH0gZWxzZSB7CiAgICAgICAgLy8gRXZhbHVhdGUgY29tbWFuZCBhcyBqYXZhc2NyaXB0LgogICAgICAgIGNvbnN0IGpzID0gdGhhdC5tZXNzYWdlLnN1YnN0cmluZygxKTsKICAgICAgICBvcy5ydW4oanMpOwogICAgfQp9Cgp0aGlzQm90LmFiQ2hhdEJhckNsb3NlKCk7JwD0kNPJBIqlBgtkZXNjcmlwdGlvbgIEAPSQ08kEtdAGQlRoaXMgaXMgbWVhbnQgdG8gaGFuZGxlIGFueSBub25lIG1lbnUgcmVsYXRlZCBpbnB1dHMvaW50ZXJhY3Rpb25zLicA9JDTyQSKpQYMb25GaWxlVXBsb2FkAgQA9JDTyQT40AbXGEAvL2ZpbHRlciBvdXQgdGltZXMgd2hlbiBmaWxlIGxvYWRpbmcgaXMgbm90IGFsbG93ZWQKaWYgKCFidWlsZGVyVmVyc2lvbiB8fCBsaW5rcy5yZW1lbWJlci50YWdzLmFiTGlzdGVuaW5nRm9yRmlsZVVwbG9hZHMgIT09IHRydWUpCnsKICAgIHJldHVybjsKfQoKLy92YXJpb3VzIGZpbGUgc3BlY2lmaWMgdmFyaWFibGVzCmxldCBmaWxlRXh0ZW5zaW9uID0gdGhhdC5maWxlLm5hbWUuc3BsaXQoJy4nKS5wb3AoKS50b0xvd2VyQ2FzZSgpOwpsZXQgZmlsZU5hbWUgPSB0aGF0LmZpbGUubmFtZS5zcGxpdCgnLicpLnNoaWZ0KCk7CmxldCBzaXplID0gdGhhdC5maWxlLnNpemU7CmxldCBtaW1lVHlwZTsKbGV0IGJvdEluZm8gPSB7fTsKCi8vaGFyZCBsaW1pdCBiYXNlZCBvbiBmaWxlIHNpemUKaWYgKHNpemUgPiAyMDAwMDAwMDApCnsKICBvcy50b2FzdCgibWF4aW11bSBmaWxlIHNpemUgZXhjZWVkZWQgKDIwMCBtYikiKTsKCiAgcmV0dXJuOwp9CgovL3RoaXMgc3dpdGNoIGhhbmRsZXMgcG9zc2libGUgZmlsZXMgZXh0ZW5zaW9ucywgd2hpbGUgcmVqZWN0aW5nIGFueSBpdCBkb2VzIG5vdCByZWNvZ25pemUKc3dpdGNoKGZpbGVFeHRlbnNpb24pCnsKICBjYXNlICdqcGcnOgogIGNhc2UgJ2pwZWcnOgogIGNhc2UgJ3dlYnAnOgogIGNhc2UgJ2dpZic6CiAgY2FzZSAncG5nJzoKICAgIG1pbWVUeXBlID0gImltYWdlLyIgKyBmaWxlRXh0ZW5zaW9uOwogICAgYm90SW5mby5mb3JtID0gInNwcml0ZSI7CiAgICBicmVhazsKICBjYXNlICdzdmcnOgogICAgbWltZVR5cGUgPSAiaW1hZ2Uvc3ZnK3htbCI7CiAgICBib3RJbmZvLmZvcm0gPSAic3ByaXRlIjsKICAgIGJyZWFrOwogIGNhc2UgJ2dsYic6CiAgY2FzZSAnZXhyJzoKICBjYXNlICdnbHRmJzoKICAgIG1pbWVUeXBlID0gInRleHQveG1sIjsKICAgIGJvdEluZm8uZm9ybSA9ICJtZXNoIjsKICAgIGJvdEluZm8uZm9ybVN1YnR5cGUgPSAiZ2x0ZiI7CiAgICBicmVhazsKICBjYXNlICdhdXgnOgogIGNhc2UgJ3BkZic6CiAgICBsZXQgYm90RGF0YSA9IGZpbGVFeHRlbnNpb24gPT0gIi5hdXgiID8gSlNPTi5wYXJzZSh0aGF0LmZpbGUuZGF0YSkuc3RhdGUgOiBvcy5wYXJzZUJvdHNGcm9tRGF0YSh0aGF0LmZpbGUuZGF0YSk7CgogICAgbGlua3MuY3JlYXRlLmFiQ3JlYXRlQm90cyh7Ym90czogYm90RGF0YSwgb3JpZ2luOiBmaWxlTmFtZX0pOwoKICAgIHJldHVybjsKLy8gICBjYXNlICdwZGYnOgovLyAgICAgYnJlYWs7CiAgY2FzZSAnbXAzJzoKICAgIG1pbWVUeXBlID0gJ2F1ZGlvL21wZWcnOwogICAgYm90SW5mby5vbkNsaWNrID0gIkAgb3MucGxheVNvdW5kKHRhZ3MuZm9ybUFkZHJlc3MpOyI7CiAgICBib3RJbmZvLmxhYmVsID0gIkNsaWNrIHRvIFBsYXkiOwogICAgYnJlYWs7CiAgY2FzZSAnbXA0JzoKICAgIG1pbWVUeXBlID0gJ3ZpZGVvL21wNCc7CiAgICBib3RJbmZvLmZvcm0gPSAiaWZyYW1lIjsKICAgIGJvdEluZm8uZm9ybVN1YnR5cGUgPSAic3JjIjsKICAgIGJyZWFrOwogIGNhc2UgJ290Zic6CiAgICBtaW1lVHlwZSA9ICdmb250L290Zic7CiAgICBib3RJbmZvLmxhYmVsID0gImV4YW1wbGUiOwogICAgYnJlYWs7CiAgY2FzZSAnd29mZic6CiAgICBtaW1lVHlwZSA9ICdmb250L3dvZmYnOwogICAgYm90SW5mby5sYWJlbCA9ICJleGFtcGxlIjsKICAgIGJyZWFrOwogIGRlZmF1bHQ6CiAgICBsZXQgcmVzdWx0ID0gbmV3IEVycm9yKCJ1bmhhbmRsZWQgZmlsZSB0eXBlOiAiICsgZmlsZUV4dGVuc2lvbik7CiAgICBvcy50b2FzdCgiZmlsZSB0eXBlIG5vdCBzdXBwb3J0ZWQiKTsKICAgIGNvbnNvbGUud2FybihyZXN1bHQpCiAgICByZXR1cm4gcmVzdWx0Owp9CgovL3RoZSBmb2xsb3dpbmcgdmFyaWFibGVzIGFuZCBvYmplY3RzIHNldCB1cCBhIGxvYWRpbmcgYmFyIGJ1dHRvbgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9ICJhYk1lbnUiOwoKbGV0IHVwbG9hZFJlc3VsdDsKbGV0IHByb2dyZXNzQnV0dG9uID0gYXdhaXQgdGhpc0JvdC5hYlByb2dyZXNzQmFyKGB1cGxvYWRpbmdgKTsKCmNvbmZpZ0JvdC50YWdzLnNlbGVjdGVkX3N0dWRpb0lEID0gY29uZmlnQm90LnRhZ3Muc3R1ZGlvSUQgPz8gY29uZmlnQm90LnRhZ3Muc3R1ZGlvOwoKaWYgKCFjb25maWdCb3QudGFncy5zZWxlY3RlZF9zdHVkaW9JRCkKewogIGF3YWl0IG9zLnJlcXVlc3RBdXRoQm90KCk7CgogIGNvbmZpZ0JvdC50YWdzLnNlbGVjdGVkX3N0dWRpb0lEID0gYXV0aEJvdC5pZDsKfQoKLy90aGlzIGlzIHRoZSBhY3R1YWwgdXBsb2FkIGZ1bmN0aW9uYWxpdHkKdXBsb2FkUmVzdWx0ID0gYXdhaXQgbGlua3Muc3RvcmUuYWJQdWJsaXNoRmlsZSh7ZmlsZTogdGhhdC5maWxlLmRhdGEsIGZpbGVOYW1lOiBmaWxlTmFtZSwgbWltZVR5cGU6IG1pbWVUeXBlfSk7CgovL2lmIHRoZSBmaWxlIHNob3VsZCBiZSBpbmNsdWRlZCBhcyBhIGJvdCB3aXRoIGEgbGluaywgdGhpcyBsb2dpYyBoYW5kbGVzIHRoYXQKCmlmIChtaW1lVHlwZS5pbmNsdWRlcygiZm9udCIpKQp7CiAgICBib3RJbmZvW2NvbmZpZ0JvdC50YWdzLmdyaWRQb3J0YWxdID0gdHJ1ZTsKICAgIGJvdEluZm8ubGFiZWxGb250QWRkcmVzcyA9IHVwbG9hZFJlc3VsdC51cmwgPyB1cGxvYWRSZXN1bHQudXJsIDogdXBsb2FkUmVzdWx0LmV4aXN0aW5nRmlsZVVybDsKCiAgICBjcmVhdGUoYm90SW5mbyk7Cn0KZWxzZSBpZiAoT2JqZWN0LmtleXMoYm90SW5mbykubGVuZ3RoID4gMCkKewogICAgYm90SW5mb1tjb25maWdCb3QudGFncy5ncmlkUG9ydGFsXSA9IHRydWU7CiAgICBib3RJbmZvLmZvcm1BZGRyZXNzID0gdXBsb2FkUmVzdWx0LnVybCA/IHVwbG9hZFJlc3VsdC51cmwgOiB1cGxvYWRSZXN1bHQuZXhpc3RpbmdGaWxlVXJsOwoKICAgIGNyZWF0ZShib3RJbmZvKTsKfQoKY29uc3QgY2xpcFVSTCA9IHVwbG9hZFJlc3VsdC51cmwgPz8gdXBsb2FkUmVzdWx0LmV4aXN0aW5nRmlsZVVybDsKCm9zLnNldENsaXBib2FyZChjbGlwVVJMKTsKCm9zLnRvYXN0KCJmaWxlIHVybCBhZGRlZCBzZXQgdG8gY2xpcGJvYXJkIik7CgovL2NsZWFyIHRoZSBwcm9ncmVzcyBiYXIgYnV0dG9uCmNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gbnVsbDsKCmlmIChwcm9ncmVzc0J1dHRvbikKewogIGRlc3Ryb3kocHJvZ3Jlc3NCdXR0b24pOwp9CgpyZXR1cm4gdXBsb2FkUmVzdWx0OycA9JDTyQSKpQYFbGVhcm4CBAD0kNPJBNDpBijwn5SXNjY1N2I4NjUtZTk4My00NDAxLTlmYzktZjU0MThkMThhN2Y3JwD0kNPJBIqlBghyZW1lbWJlcgIEAPSQ08kE9+kGKPCflJdlNTM4MGE2Yi04YjRkLTRhOGItOGIwNC01OGUxZWIwM2U1ZTcnAPSQ08kEiqUGDW1hbmlmZXN0YXRpb24CBAD0kNPJBJ7qBijwn5SXZGNhNWQ5ODctYzRkOC00NmU0LWI2MGMtZGFhN2IyZjRkZGFkJwD0kNPJBIqlBghhYklnbm9yZQIEAPSQ08kExeoGBHRydWUnAPSQ08kEiqUGBmNyZWF0ZQIEAPSQ08kEyuoGKPCflJczNGMzYzIxMC01YmYxLTQ5Y2YtYjE1MS1lZTJkMDdmMGU2NzMnAPSQ08kEiqUGBXN0b3JlAgQA9JDTyQTx6gYo8J+Ulzc2YWYwNDkxLTM5MTktNDk4NC1hYTgyLTIyYzc0MmY0MjYzZicA9JDTyQSKpQYEbWVudQIEAPSQ08kEmOsGKPCflJdiMzBjNmM1ZC1hNGY3LTQyNjYtYmEzOC0zOTNkYzk1ZTFlY2InAPSQ08kEiqUGB2FiU2hlbGwCBAD0kNPJBL/rBgR0cnVlJwD0kNPJBIqlBg1hYlByb2dyZXNzQmFyAgQA9JDTyQTE6wb9CUBpZiAoIWNvbmZpZ0JvdC50YWdzLmFiU2lsZW50TW9kZSkKewogICAgY29uZmlnQm90Lm1hc2tzLm1lbnVQb3J0YWwgPSAiYWJNZW51IjsKfQoKbGV0IGxvYWRMYWJlbCA9IHRoYXQgPz8gInVwZGF0aW5nIjsKbGV0IG1lbnVCdXR0b24gPSB7fTsKCm1lbnVCdXR0b24uc3BhY2UgPSAidGVtcExvY2FsIjsKbWVudUJ1dHRvbi5hYk1lbnUgPSB0cnVlOwptZW51QnV0dG9uLm1lbnVJdGVtU3R5bGUgPSB7CiAgICAiYm9yZGVyLXJhZGl1cyI6IjhweCIsIAogICAgIm1hcmdpbi10b3AiOiI4cHgiLCAKICAgICJib3JkZXItd2lkdGgiOiAiMnB4IiwgCiAgICAiYm9yZGVyLWNvbG9yIjogIiMwMDAiLCAKICAgICJib3JkZXItc3R5bGUiOiAic29saWQiLAogICAgImJveC1zaGFkb3ciOiAiM3B4IDRweCAjMDAwIiwKICAgICJtaW4taGVpZ2h0IjogIjQ0cHgiCn07OwptZW51QnV0dG9uLnRyYWNrTnVtID0gLTE7Cm1lbnVCdXR0b24ub25DcmVhdGUgPSBgQAogICAgaWYgKHRhZ3MudHJhY2tOdW0gPT0gMikKICAgIHsKICAgICAgICB0YWdzLnRyYWNrTnVtID0gMDsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICB0YWdzLnRyYWNrTnVtKys7CiAgICB9CgogICAgdGFncy5sYWJlbCA9IHRhZ3NbImxhYmVsIit0YWdzLnRyYWNrTnVtXTsKICAgIHRhZ3MuZm9ybUFkZHJlc3MgPSB0YWdzWyJmb3JtIit0YWdzLnRyYWNrTnVtXTsKCiAgICBzZXRUaW1lb3V0KCgpID0+IHdoaXNwZXIodGhpc0JvdCwgIm9uQ3JlYXRlIiksIDUwMCk7YDsKbWVudUJ1dHRvbi5sYWJlbDAgPSBsb2FkTGFiZWwgKyAiLiI7Cm1lbnVCdXR0b24ubGFiZWwxID0gbG9hZExhYmVsICsgIi4uIjsKbWVudUJ1dHRvbi5sYWJlbDIgPSBsb2FkTGFiZWwgKyAiLi4uIjsKbWVudUJ1dHRvbi5mb3JtMCA9ICJob3VyZ2xhc3NfYm90dG9tIjsKbWVudUJ1dHRvbi5mb3JtMSA9ICJob3VyZ2xhc3NfdG9wIjsKbWVudUJ1dHRvbi5mb3JtMiA9ICJob3VyZ2xhc3NfYm90dG9tIjsKbWVudUJ1dHRvbi5jb2xvciA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJCYXNlU3Ryb2tlQ29sb3I7Cm1lbnVCdXR0b24ubGFiZWxDb2xvciA9ICJibGFjayI7Cm1lbnVCdXR0b24ubGFiZWxBbGlnbm1lbnQgPSAiY2VudGVyIjsKbWVudUJ1dHRvbi5hYlByb2dyZXNzUmVzZXQgPSAiQCBkZXN0cm95KHRoaXNCb3QpOyI7Cm1lbnVCdXR0b24ub25EZXN0cm95ID0gIkAgY29uZmlnQm90Lm1hc2tzLm1lbnVQb3J0YWwgPSBudWxsOyI7CgptZW51QnV0dG9uID0gY3JlYXRlKG1lbnVCdXR0b24pOwoKcmV0dXJuIG1lbnVCdXR0b247JwD0kNPJBIqlBglvblRhcENvZGUCBAD0kNPJBML1BqkCQGNvbnN0IHRhcENvZGUgPSB0aGF0OwoKc3dpdGNoICh0YXBDb2RlKQp7CiAgICBjYXNlICIzMzQyIjoKICAgICAgICBvcy50b2FzdCgid2FraW5nICIgKyBsaW5rcy5yZW1lbWJlci50YWdzLmFiQnVpbGRlcklkZW50aXR5KTsKCiAgICAgICAgdGhpc0JvdC5vbkNoYXQoe21lc3NhZ2U6ICIuLiJ9KTsKICAgICAgICBicmVhazsKICAgIGNhc2UgIjQyNDIiOgogICAgICAgIHRoaXNCb3QuYWJDaGF0QmFyT3BlbigpOwogICAgICAgIGJyZWFrOwogICAgZGVmYXVsdDoKICAgICAgICAvL2NvbnNvbGUubG9nKHRhcENvZGUpOwp9JwD0kNPJBIqlBgNhc2sCBAD0kNPJBOz3Bijwn5SXZWM4NWMxZDYtOWYxYS00MGQ0LTgyZTEtNWJkNjgwMzQ5YzI3JwD0kNPJBIqlBglhYlZlcnNpb24CBAD0kNPJBJP4BgQxMC41JwD0kNPJBIqlBgpvbkJvdEFkZGVkAgQA9JDTyQSY+AZAQHRoaXNCb3QubG9hZEFCQ29tbWFuZHNNYW5hZ2VyKCk7CnRoaXNCb3QudmFycy5jaGF0SGlzdG9yeSA9IFtdOycA9JDTyQSKpQYab25BQkNvbW1hbmRzTWFuYWdlckNyZWF0ZWQCBAD0kNPJBNn4BvNCQGxldCBhYkNvbW1hbmRzOiBBQkNvbW1hbmRzTWFuYWdlciA9IHRoYXQ7CgovLyBUaGVzZSBhcmUgYWxsIHRoZSBidWlsdC1pbiBjb21tYW5kcy4KCmFiQ29tbWFuZHMuYWRkQ29tbWFuZCgnaGVscCcsIChhcmdzKSA9PiB7CiAgICBjb25zdCBjb21tYW5kcyA9IGFiQ29tbWFuZHMuY29tbWFuZHM7CiAgICBjb25zdCBjb21tYW5kS2V5cyA9IE9iamVjdC5rZXlzKGNvbW1hbmRzKTsKCiAgICBsZXQgc2VsZWN0ZWRDb21tYW5kOwogICAgaWYgKGNvbW1hbmRLZXlzICYmIGNvbW1hbmRLZXlzLmxlbmd0aCAmJiBhcmdzICYmIGFyZ3MubGVuZ3RoKSB7CiAgICAgICAgY29uc3QgY29tbWFuZEtleU1hdGNoID0gY29tbWFuZEtleXMuZmluZChrZXkgPT4ga2V5ID09PSBhcmdzWzBdKTsKICAgICAgICBzZWxlY3RlZENvbW1hbmQgPSBjb21tYW5kS2V5TWF0Y2g7CiAgICB9CiAgICAKICAgIGxpbmtzLmhlbHAubW91bnQoeyBhYkNvbW1hbmRzTWFuYWdlcjogYWJDb21tYW5kcywgc2VsZWN0ZWRDb21tYW5kIH0pOwp9LCB7CiAgICBzaG9ydERlc2NyaXB0aW9uOiAnU2hvdyB0aGlzIGhlbHAgd2luZG93LiBDYW4gc3BlY2lmeSBhIGNvbW1hbmQgdG8gb3BlbiB0aGUgaGVscCBwYWdlIGZvciB0aGF0IGNvbW1hbmQgZGlyZWN0bHkuJywKICAgIHVzYWdlOiBbJy5oZWxwJywgJy5oZWxwIFtjb21tYW5kXSddCn0pOwoKYWJDb21tYW5kcy5hZGRDb21tYW5kKCcuJywgYXJncyA9PiB0aGlzQm90LmNtZEFCV2FrZShhcmdzKSwgewogICAgc2hvcnREZXNjcmlwdGlvbjogJ1dha2UgdXAgYWIuJywKICAgIHVzYWdlOiAnLi4nCn0pOwoKYWJDb21tYW5kcy5hZGRDb21tYW5kKCd3YWtlJywgYXJncyA9PiB0aGlzQm90LmNtZEFCV2FrZShhcmdzKSwgewogICAgc2hvcnREZXNjcmlwdGlvbjogJ1dha2UgdXAgYWIuJywKICAgIHVzYWdlOiAnLndha2UnCn0pOwoKYWJDb21tYW5kcy5hZGRDb21tYW5kKCdzbGVlcCcsIGFyZ3MgPT4gdGhpc0JvdC5jbWRBQlNsZWVwKGFyZ3MpLCB7CiAgICBzaG9ydERlc2NyaXB0aW9uOiAnUHV0IGFiIHRvIHNsZWVwLicsCiAgICB1c2FnZTogJy5zbGVlcCcKfSk7CgphYkNvbW1hbmRzLmFkZENvbW1hbmQoJ2FzaycsIChhcmdzKSA9PiB7CiAgICBpZiAobGlua3MuYXNrKSB7CiAgICAgICAgaWYgKGFyZ3MgJiYgYXJncy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGNvbnN0IGFza0lucHV0ID0gYXJncy5qb2luKCcgJyk7CiAgICAgICAgICAgIGxpbmtzLmFzay5hYkNvcmVNZW51QWN0aW9uKGFza0lucHV0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsaW5rcy51dGlscy5hYkxvZ0FuZFRvYXN0KGAuYXNrIGNvbW1hbmQgcmVxdWlyZXMgaW5wdXRgKTsKICAgICAgICB9CiAgICB9IGVsc2UgewogICAgICAgIGxpbmtzLnV0aWxzLmFiTG9nQW5kVG9hc3QoYGFzayBib3QgaXMgbm90IGxvYWRlZCwgY2Fubm90IGxvYWQgYXNrYCk7CiAgICB9Cn0sIHsKICAgIHNob3J0RGVzY3JpcHRpb246ICdBc2sgYWInLAogICAgdXNhZ2U6ICcuYXNrIDxhc2tfbmFtZT4nCn0pOwoKYWJDb21tYW5kcy5hZGRDb21tYW5kKCduYW1lYWInLCBhc3luYyAoYXJncykgPT4gewogICAgY29uc3QgbmFtZSA9IGF3YWl0IG9zLnNob3dJbnB1dChsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5LCB7IHRpdGxlOiAnd2hhdCB3b3VsZCB5b3UgbGlrZSB0byBjYWxsIG1lPycgfSk7CiAgICBzZXRUYWdNYXNrKGxpbmtzLnBlcnNvbmFsaXR5LCAnYWJCdWlsZGVySWRlbnRpdHknLCBuYW1lLCAnbG9jYWwnKTsKICAgIHNob3V0KCdjaGFuZ2VQZXJzb25hbGl0eUNvbmZpZycsIHsgbmFtZTogbmFtZSB9KTsKfSwgewogICAgc2hvcnREZXNjcmlwdGlvbjogJ0dpdmUgYWIgYSBuZXcgbmFtZS4nLAogICAgdXNhZ2U6ICcubmFtZWFiJwp9KTsKCmFiQ29tbWFuZHMuYWRkQ29tbWFuZCgnc3lzdGVtJywgYXJncyA9PiB0aGlzQm90LmNtZFN5c3RlbShhcmdzKSwgewogICAgc2hvcnREZXNjcmlwdGlvbjogJ09wZW4gdGhlIHN5c3RlbSBwb3J0YWwgKElERSkgZm9yIHRoZSBpbnN0LicsCiAgICBsb25nRGVzY3JpcHRpb246IGBPcGVuIHRoZSBzeXN0ZW0gcG9ydGFsIChJREUpIGZvciB0aGUgaSAgICAKCiAgICBZb3UgbWF5IHByb3ZpZGUgYSBjdXN0b20gc3lzdGVtVGFnTmFtZSB3aXRoIHRoZSBjb21tYW5kLCBpbiBvcmRlciB0byBvcGVuIHRoZSBzeXN0ZW0gcG9ydGFsIG9ubHkgZm9yIGJvdHMgd2l0aCB0aGUgZ2l2ZW4gc3lzdGVtVGFnTmFtZS4gQnkgZGVmYXVsdCwgInN5c3RlbSIgd2lsbCBiZSB1c2VkIGFzIHRoZSBzeXN0ZW1UYWdOYW1lLgoKICAgIEZvciBleGFtcGxlOgoKICAgID4gLnN5c3RlbQogICAgVGhpcyB3aWxsIHNob3cgYWxsIGJvdHMgaW4gdGhlIHN5c3RlbVBvcnRhbCB0aGF0IGhhdmUgYSAic3lzdGVtIiB0YWcuCgogICAgPiAuc3lzdGVtIG15R3JvdXAKICAgIFRoaXMgd2lsbCBzaG93IGFsbCBib3RzIGluIHRoZSBzeXN0ZW1Qb3J0YWwgdGhhdCBoYXZlIGEgIm15R3JvdXAiIHRhZy4KICAgIGAsCiAgICB1c2FnZTogWwogICAgICAgICcuc3lzdGVtJywKICAgICAgICAnLnN5c3RlbSBzeXN0ZW1UYWdOYW1lJwogICAgXSwKICAgIGFyZ3M6IFsKICAgICAgICB7CiAgICAgICAgICAgIGlkZW50aWZpZXI6ICctdycsCiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnT3BlbiB0aGUgc3lzdGVtIHBvcnRhbCBpbiB0aGUgY3VycmVudCB3aW5kb3cuIEJ5IGRlZmF1bHQgdGhlIHN5c3RlbSBwb3J0YWwgd2lsbCBvcGVuIGluIGEgbmV3IHRhYi4nCiAgICAgICAgfQogICAgXQp9KTsKCmFiQ29tbWFuZHMuYWRkQ29tbWFuZCgnbG9nJywgKGFyZ3MpID0+IHsKICAgIGxpbmtzLmNvbnNvbGUudG9nZ2xlQ29uc29sZSgpOwp9LCB7CiAgICBzaG9ydERlc2NyaXB0aW9uOiAnVG9nZ2xlIHZpc2libGl0eSBvZiB0aGUgYWIgbG9nLicsCiAgICB1c2FnZTogJy5sb2cnCn0pCgphYkNvbW1hbmRzLmFkZENvbW1hbmQoJ2xvZ2NsZWFyJywgKGFyZ3MpID0+IHsKICAgIGNvbnN0IG1lc3NhZ2VMb2dCb3RzID0gZ2V0Qm90cygiY29uc29sZUxvZ01lc3NhZ2VCb3QiLCB0cnVlKTsKICAgIGRlc3Ryb3kobWVzc2FnZUxvZ0JvdHMpOwp9LCB7CiAgICBzaG9ydERlc2NyaXB0aW9uOiAnQ2xlYXIgYWxsIGFiIGxvZyBtZXNzYWdlcy4nLAogICAgdXNhZ2U6ICcubG9nY2xlYXInCn0pCgphYkNvbW1hbmRzLmFkZENvbW1hbmQoJ3NoZWV0JywgYXJncyA9PiB0aGlzQm90LmNtZFNoZWV0KGFyZ3MpLCB7CiAgICBzaG9ydERlc2NyaXB0aW9uOiAnT3BlbiB0aGUgc2hlZXQgcG9ydGFsIGZvciBzcGVjaWZpZWQgYm90IG9yIGFuIGVudGlyZSBkaW1lbnNpb24uJywKICAgIHVzYWdlOiBbCiAgICAgICAgJy5zaGVldCBbb3B0aW9uc10gW3BvcnRhbCB8IGhlbHBlckJvdE5hbWUgfCBib3RJZCB8IGdsb2JhbFRoaXNQYXRoXScsCiAgICAgICAgJ2V4LiAuc2hlZXQgaG9tZScsCiAgICAgICAgJ2V4LiAuc2hlZXQgY29uZmlnQm90JywKICAgICAgICAnZXguIC5zaGVldCAtdCBhMmNmNDczOS0zOWEyLTRmZDYtYjNlZi1jYzQ3ODJmOTcwODknLAogICAgICAgICdleC4gLnNoZWV0IGdsb2JhbFRoaXMubXlPYmplY3QubXlCb3QnLAogICAgICAgICdleC4gLnNoZWV0IG15T2JqZWN0Lm15Qm90JwogICAgXSwKICAgIGFyZ3M6IFsKICAgICAgICB7CiAgICAgICAgICAgIGlkZW50aWZpZXI6ICctdCcsCiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnT3BlbiB0aGUgc2hlZXQgcG9ydGFsIGluIGEgbmV3IGJyb3dzZXIgdGFiLiBcblxuTk9URTogLnNoZWV0IHdpbGwgYXV0b21hdGljYWxseSBpbnNwZWN0IHRoZSBzcGFjZSBvZiBhIGJvdCBhbmQgZm9yY2Ugb3BlbmluZyBpbiB0aGUgc2FtZSB0YWIgaWYgYSBib3QgaXMgaW4gdGVtcExvY2FsIG9yIHRlbXBTaGFyZWQgc3BhY2UuJywKICAgICAgICB9CiAgICBdCn0pOwoKYWJDb21tYW5kcy5hZGRDb21tYW5kKCdtZW51c2hlZXQnLCAoYXJncykgPT4gewogICAgY29uZmlnQm90LnRhZ3Muc2hlZXRQb3J0YWwgPSBjb25maWdCb3QudGFncy5tZW51UG9ydGFsOwogICAgaWYgKCFjb25maWdCb3QudGFncy5tZW51UG9ydGFsKSB7CiAgICAgICAgbGlua3MudXRpbHMuYWJMb2dBbmRUb2FzdCh7IG1lc3NhZ2U6IGBDYW5ub3Qgb3BlbiBzaGVldFBvcnRhbCBmb3IgbWVudVBvcnRhbCBib3RzLiBUaGUgbWVudVBvcnRhbCBpcyBjdXJyZW50bHkgZGlzYWJsZWQuYH0pCiAgICB9Cn0sIHsKICAgIHNob3J0RGVzY3JpcHRpb246ICdPcGVuIHRoZSBzaGVldCBwb3J0YWwgZm9yIHRoZSBjdXJyZW50IG1lbnUgcG9ydGFsLicsCiAgICB1c2FnZTogJy5tZW51U2hlZXQnLAp9KTsKCmFiQ29tbWFuZHMuYWRkQ29tbWFuZCgnZG93bmxvYWRpbnN0JywgYXJncyA9PiB0aGlzQm90LmNtZERvd25sb2FkSW5zdChhcmdzKSwgewogICAgc2hvcnREZXNjcmlwdGlvbjogJ0Rvd25sb2FkIHRoZSBpbnN0IHRvIGRpc2suJywKICAgIHVzYWdlOiAnLmRvd25sb2FkaW5zdCcKfSk7CgphYkNvbW1hbmRzLmFkZENvbW1hbmQoJ2Rvd25sb2FkYWInLCBhcmdzID0+IHRoaXNCb3QuY21kRG93bmxvYWRBQihhcmdzKSwgewogICAgc2hvcnREZXNjcmlwdGlvbjogJ0Rvd25sb2FkIHNwZWNpZmllZCBhYiBncm91cChzKSB0byBkaXNrLicsCiAgICBsb25nRGVzY3JpcHRpb246IGBEb3dubG9hZCBzcGVjaWZpZWQgYWIgZ3JvdXAocykgdG8gZGlzay4KCiAgICBZb3UgY2FuIHByb3ZpZGUgYSBsaXN0IG9mIGdyb3VwcyB0byBkb3dubG9hZCBhbG9uZyB3aXRoIHRoZSBjb21tYW5kOgogICAgPiAuZG93bmxvYWRhYiBhYkNvcmUgYWJTaGVsbCBhYkludGVyZmFjZQoKICAgIElmIGdyb3VwKHMpIGFyZSBub3QgcHJvdmlkZWQgd2l0aCB0aGUgY29tYW1hbmQgdGhlbiB5b3Ugd2lsbCBiZSBwcm9tcHRlZCB0byBwcm92aWRlIG9uZSB3aXRoIGEgZGlhbG9nLgogICAgYCwKICAgIHVzYWdlOiBbCiAgICAgICAgJy5kb3dubG9hZGFiIFtvcHRpb25zXSBbZ3JvdXAuLi5dJywKICAgICAgICAnZXguIC5kb3dubG9hZGFiIGFiU2hlbGwgYWJJbnRlcmZhY2UnLAogICAgICAgICdleC4gLmRvd25sb2FkYWIgLXYgMSBteUdyb3VwTmFtZScKICAgIF0sCiAgICBhcmdzOiBbCiAgICAgICAgewogICAgICAgICAgICBpZGVudGlmaWVyOiAnLXYnLAogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1NwZWNpZnkgdGhlIGF1eCBmb3JtYXQgdmVyc2lvbiBudW1iZXIuIGV4LiAtdiAxIHdpbGwgYmUgYXV4IGZvcm1hdCB2ZXJzaW9uIDEgKHB1cmUgYm90IGpzb24pLiBCeSBkZWZhdWx0LCBhYiBmaWxlcyBhcmUgdXN1YWxseSBkb3dubG9hZGVkIGFzIHZlcnNpb24gMiBhdXggZmlsZXMgKGNvbmZsaWN0LWZyZWUgdXBkYXRlKS4nCiAgICAgICAgfQogICAgXQp9KTsKCmFiQ29tbWFuZHMuYWRkQ29tbWFuZCgnZG93bmxvYWRlZ2cnLCBhcmdzID0+IHRoaXNCb3QuY21kRG93bmxvYWRFZ2coYXJncyksIHsKICAgIHNob3J0RGVzY3JpcHRpb246ICdEb3dubG9hZCBhdXggZmlsZSBmcm9tIGFiIGVnZy4nLAogICAgbG9uZ0Rlc2NyaXB0aW9uOiBgRG93bmxvYWQgYXV4IGZpbGUgZnJvbSBhYiBlZ2cuIFlvdSB3aWxsIG5lZWQgdG8gcHJvdmlkZSB0aGUgcmVjb3JkS2V5IGFzIHdlbGwgYW5kIHRoZSBuYW1lIG9mIHRoZSBlZ2cuIEEgZHJvcGRvd24gc2VsZWN0aW9uIHdpbGwgYmUgcHJvdmlkZWQgZm9yIHRoZSBlZ2cgaWYgZm91bmQgdG8gc2VsZWN0IHdoaWNoIHZlcnNpb24gdG8gZG93bmxvYWQuYCwKICAgIHVzYWdlOiAnLmRvd25sb2FkZWdnJywKfSk7CgphYkNvbW1hbmRzLmFkZENvbW1hbmQoJ2xvYWRza2lsbCcsIGFzeW5jIChhcmdzKSA9PiB7CiAgICBpZiAoYXJncykgewogICAgICAgIGZvciAobGV0IHNraWxsIG9mIGFyZ3MpIHsKICAgICAgICAgICAgYXdhaXQgbGlua3MubGVhcm4uYWJBZGFwdChza2lsbCk7CiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICBsaW5rcy51dGlscy5hYkxvZ0FuZFRvYXN0KCcubG9hZHNraWxsIHJlcXVpcmVzIHNvbWUgc2tpbGwgbmFtZXMnKTsKICAgIH0KfSwgewogICAgc2hvcnREZXNjcmlwdGlvbjogJ0xvYWQgdGhlIHNwZWNpZmllZCBhYiBza2lsbHMuJywKICAgIHVzYWdlOiAnLmxvYWRTa2lsbCBbc2tpbGwgLi4uXScKfSk7CgphYkNvbW1hbmRzLmFkZENvbW1hbmQoJ3VybHFyJywgKCkgPT4gb3Muc2hvd1FSQ29kZShjb25maWdCb3QudGFncy51cmwpLCB7CiAgICBzaG9ydERlc2NyaXB0aW9uOiAnU2hvdyBhIFFSIGNvZGUgZm9yIHRoZSBicm93ZXIgdGFiXCdzIGN1cnJlbnQgVVJMLicsCiAgICB1c2FnZTogJy51cmxxcicKfSk7CgphYkNvbW1hbmRzLmFkZENvbW1hbmQoJ2RpbScsIChhcmdzKSA9PiB7CiAgICBpZiAoYXJncyAmJiBhcmdzLmxlbmd0aCkgewogICAgICAgIGNvbnN0IG5hbWUgPSBhcmdzLmpvaW4oJyAnKTsKICAgICAgICBvcy5nb1RvRGltZW5zaW9uKG5hbWUpOwogICAgICAgIGxpbmtzLnV0aWxzLmFiTG9nQW5kVG9hc3QoeyBtZXNzYWdlOiBgTW92ZWQgdG8gJyR7bmFtZX0nIGRpbWVuc2lvbi5gLCBkdXJhdGlvbjogMyB9KQogICAgfQp9LCB7CiAgICBzaG9ydERlc2NyaXB0aW9uOiAnR28gdG8gc3BlY2lmaWVkIGRpbWVuc2lvbiAvIHBvcnRhbC4nLAogICAgdXNhZ2U6ICcuZGltIDxkaW1lbnNpb24gfCBwb3J0YWw+JywKfSk7CgphYkNvbW1hbmRzLmFkZENvbW1hbmQoJ3V1aWQnLCAoKSA9PiB7CiAgICBvcy5zZXRDbGlwYm9hcmQodXVpZCgpKTsKCiAgICBsZXQgbWVzc2FnZSA9IGBDb3BpZWQgbmV3IHV1aWQgdG8gY2xpcGJvYXJkYDsKICAgIGFiLmxvZyhsaW5rcy5wZXJzb25hbGl0eS50YWdzLmFiQnVpbGRlcklkZW50aXR5ICsgJzogJyArIG1lc3NhZ2UpOwogICAgb3MudG9hc3QobWVzc2FnZSk7Cn0sIHsKICAgIHNob3J0RGVzY3JpcHRpb246ICdHZW5lcmF0ZSBhIHVuaXZlcnNhbGx5IHVuaXF1ZSBpZGVudGlmaWVyICh1dWlkKSBhbmQgY29weSBpdCB0byB0aGUgY2xpcGJvYXJkLicsCiAgICB1c2FnZTogJy51dWlkJwp9KTsKCmFiQ29tbWFuZHMuYWRkQ29tbWFuZCgnZHVwJywgKGFyZ3MpID0+IHsKICAgIGNvbnN0IGJvdElkID0gYXJncyA/IGFyZ3NbMF0gOiB1bmRlZmluZWQ7CiAgICBpZiAoYm90SWQpIHsKICAgICAgICBjb25zdCBib3QgPSBnZXRCb3QoJ2lkJywgYm90SWQpOwogICAgICAgIGlmIChib3QpIHsKICAgICAgICAgICAgY29uc3QgZHVwQm90ID0gY3JlYXRlKGJvdCk7CiAgICAgICAgICAgIG9zLnNldENsaXBib2FyZChkdXBCb3QuaWQpOwogICAgICAgICAgICBvcy50b2FzdCgnRHVwbGljYXRlIGJvdCBpZCBjb3BpZWQgdG8gY2xpcGJvYXJkLicpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG9zLnRvYXN0KGBObyBib3QgZm91bmQgd2l0aCBpZCAke2JvdElkfWApOwogICAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgICAgb3MudG9hc3QoJ1Byb3ZpZGUgdGhlIGlkIG9mIHRoZSBib3QgeW91IHdhbnQgdG8gZHVwbGljYXRlJyk7CiAgICB9Cn0sIHsKICAgIHNob3J0RGVzY3JpcHRpb246ICdEdXBsaWNhdGUgYSBzcGVjaWZpZWQgYm90IGFuZCBjb3B5IHRoZSBuZXcgYm90XCdzIGlkIHRvIHRoZSBjbGlwYm9hcmQuJywKICAgIHVzYWdlOiAnLmR1cCA8Ym90SWQ+Jwp9KTsKCmFiQ29tbWFuZHMuYWRkQ29tbWFuZCgndXBsb2FkYXV4JywgKGFyZ3MpID0+IHsKICAgIG9zLnNob3dVcGxvYWRBdXhGaWxlKCk7Cn0sIHsKICAgIHNob3J0RGVzY3JpcHRpb246ICdVcGxvYWQgQVVYIGZpbGUocykgdG8gdGhlIGN1cnJlbnQgaW5zdC4nLAogICAgdXNhZ2U6ICcudXBsb2FkYXV4Jwp9KQoKYWJDb21tYW5kcy5hZGRDb21tYW5kKCd1cGxvYWRmaWxlcycsIGFyZ3MgPT4gdGhpc0JvdC5jbWRVcGxvYWRGaWxlcyhhcmdzKSwgewogICAgc2hvcnREZXNjcmlwdGlvbjogJ1VwbG9hZCBmaWxlKHMpIGRpcmVjdGx5IHRvIHJlY29yZC4nLAogICAgdXNhZ2U6IFsKICAgICAgICAnLnVwbG9hZGZpbGVzJywKICAgICAgICAnLnVwbG9hZGZpbGVzIC1yZWNvcmQgPHJlY29yZF9pZD4nCiAgICBdLAogICAgYXJnczogWwogICAgICAgIHsKICAgICAgICAgICAgaWRlbnRpZmllcjogJy1yZWNvcmQnLAogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ09wdGlvbmFsbHkgcHVibGlzaCBmaWxlKHMpIHRvIGEgc3BlY2lmaWMgcmVjb3JkLiBJZiBvbWl0dGVkLCBmaWxlKHMpIHdpbGwgYmUgcHVibGlzaGVkIHRvIHRoZSB1c2VyXCdzIHBlcnNvbmFsIHJlY29yZC4nCiAgICAgICAgfQogICAgXQp9KQoKYWJDb21tYW5kcy5hZGRDb21tYW5kKCd1cGRhdGVhcnRpZmFjdCcsIGFyZ3MgPT4gdGhpc0JvdC5jbWRVcGRhdGVBcnRpZmFjdChhcmdzKSwgewogICAgc2hvcnREZXNjcmlwdGlvbjogJ01hbnVhbGx5IHVwZGF0ZSBhbiBhcnRpZmFjdCBpbiB0aGUgY3VycmVudCBpbnN0LicsCiAgICBsb25nRGVzY3JpcHRpb246IGBNYW51YWxseSB1cGRhdGUgYW4gYXJ0aWZhY3QgaW4gdGhlIGN1cnJlbnQgaW5zdC4KICAgIAogICAgQSBkaWFsb2cgd2lsbCBiZSBzaG93biBhbGxvd2luZyB5b3UgdG8gc2VsZWN0IHdoaWNoIGFydGlmYWN0cyB0byB1cGRhdGUgaW4gdGhlIGN1cnJlbnQgaW5zdC4KICAgIGAsCiAgICB1c2FnZTogWwogICAgICAgICcudXBkYXRlYXJ0aWZhY3QnLAogICAgXQp9KScA9JDTyQSKpQYIYXJ0aWZhY3QCBAD0kNPJBM27Byjwn5SXNzhlNDE1MDMtYzkzMy00ZjhhLTgxN2EtYmE5N2JmOGQ1ZDI3JwD0kNPJBIqlBhVsb2FkQUJDb21tYW5kc01hbmFnZXICBAD0kNPJBPS7B+owQHR5cGUgQUJDb21tYW5kQ2FsbGJhY2sgPSAoYXJncz86IGFueVtdKSA9PiB2b2lkOwoKaW50ZXJmYWNlIEFCQ29tbWFuZEFyZyB7CiAgaWRlbnRpZmllcjogc3RyaW5nW10gfCBzdHJpbmc7CiAgZGVzY3JpcHRpb246IHN0cmluZzsKfQoKaW50ZXJmYWNlIEFCQ29tbWFuZEhlbHAgewogIHNob3J0RGVzY3JpcHRpb246IHN0cmluZzsKICBsb25nRGVzY3JpcHRpb24/OiBzdHJpbmc7CiAgYXJncz86IEFCQ29tbWFuZEFyZ1tdOwogIHVzYWdlPzogc3RyaW5nIHwgc3RyaW5nW107Cn0KCmludGVyZmFjZSBBQkNvbW1hbmQgewogIG5hbWU6IHN0cmluZzsKICBjYWxsYmFjazogQUJDb21tYW5kQ2FsbGJhY2s7CiAgaGVscDogQUJDb21tYW5kSGVscDsKfQoKLyoqCiAqIEFCQ29tbWFuZHNNYW5hZ2VyIGlzIHBhcnQgb2YgYWJTaGVsbC4KICogWW91IGNhbiByZWdpc3RlciBjb21tYW5kcyB0byBpdCB0aGF0IGNhbiBiZSBpbnZva2VkIHVzaW5nICckPGNvbW1hbmQ+JyB3aXRoIHRoZSBDYXN1YWxPUyBjaGF0IGJhci4KICogSXRzIGdlbmVyYWxseSBub3QgcmVjb21tZW5kZWQgdG8gY3JlYXRlIHRoaXMgeW91cnNlbGYgYnV0IGluc3RlYWQgdG8gbGlzdGVuIGZvciB0aGUgQG9uQUJDb21tYW5kc01hbmFnZXJDcmVhdGVkIHNob3V0CiAqIGFuZCB0byByZWdpc3RlciB5b3VyIGNvbW1hbmRzIHRoZXJlLgogKiBAcHJvcCB7c3RyaW5nW119IGNvbW1hbmRzCiAqLwpjbGFzcyBBQkNvbW1hbmRzTWFuYWdlciB7CiAgICBjb21tYW5kczogUmVjb3JkPHN0cmluZywgQUJDb21tYW5kPjsKCiAgICBjb25zdHJ1Y3RvcigpIHsKICAgICAgICB0aGlzLmNvbW1hbmRzID0ge307CgogICAgICAgIC8vIFNob3V0IHRoYXQgYW4gaW5zdGFuY2Ugb2YgQUJDb21tYW5kc01hbmFnZXIgaGFzIGJlZW4gY3JlYXRlZCBhbmQgYWxsb3cgYW55IGxpc3RlbmVycwogICAgICAgIC8vIHRvIGFkZCB0aGVpciBvd24gY29tbWFuZHMgdG8gdGhlIGluc3RhbmNlLgogICAgICAgIHNob3V0KCdvbkFCQ29tbWFuZHNNYW5hZ2VyQ3JlYXRlZCcsIHRoaXMpOwogICAgfQoKICAgIC8qKgogICAgICogQWRkIGEgY29tbWFuZCB0byBBQkNvbW1hbmRzTWFuYWdlci4KICAgICAqIFRoaXMgY29tbWFuZCB3aWxsIGJlIGF2YWlsYWJsZSB0byBpbnZva2UgdXNpbmcgJyQ8bmFtZT4nIG9uIHRoZSBDYXN1YWxPUyBjaGF0IGJhci4KICAgICAqIEByZXR1cm5zIHtib29sZWFufSBXZXRoZXIgb3Igbm90IHRoZSBjb21tYW5kIHdhcyBzdWNjZXNzZnVsbHkgYWRkZWQuCiAgICAgKi8KICAgIGFkZENvbW1hbmQobmFtZTogc3RyaW5nLCBjYWxsYmFjazogQUJDb21tYW5kQ2FsbGJhY2ssIGhlbHA6IEFCQ29tbWFuZEhlbHApOiBib29sZWFuIHsKICAgICAgICBpZiAoIW5hbWUgfHwgdHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtBQkNvbW1hbmRzTWFuYWdlcl0gc3RyaW5nIG5hbWUgaXMgcmVxdWlyZWQgZm9yIGNvbW1hbmRzLmApOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBpZiAodGhpcy5jb21tYW5kc1tuYW1lXSkgewogICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbQUJDb21tYW5kc01hbmFnZXJdICR7bmFtZX0gaXMgYWxyZWFkeSBleGlzdHMgYXMgYSBjb21tYW5kLmApOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBpZiAoIWNhbGxiYWNrIHx8IHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbQUJDb21tYW5kc01hbmFnZXJdICR7bmFtZX0gY29tbWFuZCByZXF1aXJlcyBhIGNhbGxiYWNrIGZ1bmN0aW9uLmApOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBpZiAoIWhlbHApIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW0FCQ29tbWFuZHNNYW5hZ2VyXSAke25hbWV9IGNvbW1hbmQgcmVxdWlyZXMgaGVscCBvYmplY3QuYCk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIGlmICghaGVscC5zaG9ydERlc2NyaXB0aW9uKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtBQkNvbW1hbmRzTWFuYWdlcl0gJHtuYW1lfSBjb21tYW5kIGlzIG1pc3Npbmcgc2hvcnREZXNjcmlwdGlvbiBmcm9tIGhlbHAgb2JqZWN0LmApOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICB0aGlzLmNvbW1hbmRzW25hbWVdID0geyBuYW1lLCBjYWxsYmFjaywgaGVscCB9OwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGhhc0NvbW1hbmQobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7CiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZHNbbmFtZV0gIT0gbnVsbDsKICAgIH0KCiAgICAvKioKICAgICAqIFJlbW92ZSBhIGNvbW1hbmQgZnJvbSBBQkNvbW1hbmRzTWFuYWdlcgogICAgICogQHJldHVybnMge2Jvb2xlYW59IFdldGhlciBvciBub3QgdGhlIHNwZWNpZmllZCBjb21tYW5kIHdhcyByZW1vdmVkLiBJZiB0aGUgY29tbWFuZCBkb2Vzbid0IGV4aXN0IGZhbHNlIHdpbGwgYWxzbyBiZSByZXR1cm5lZC4KICAgICAqLwogICAgcmVtb3ZlQ29tbWFuZChuYW1lOiBzdHJpbmcpOiBib29sZWFuIHsKICAgICAgICBpZiAodGhpcy5jb21tYW5kc1tuYW1lXSkgewogICAgICAgICAgICBkZWxldGUgdGhpcy5jb21tYW5kc1tuYW1lXTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIENhbGwgdGhlIHNwZWNpZmllZCBjb21tYW5kIHdpdGggdGhlIHByb3ZpZGVkIGFyZ3MgKGlmIGFueSkuCiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2V0aGVyIG9yIG5vdCB0aGUgY29tbWFuZCB3YXMgZXhlY3V0ZWQuCiAgICAgKi8KICAgIGNhbGxDb21tYW5kKG5hbWU6IHN0cmluZywgYXJncz86IGFueVtdKTogYm9vbGVhbiB7CiAgICAgICAgY29uc3QgY29tbWFuZCA9IHRoaXMuY29tbWFuZHNbbmFtZV07CiAgICAgICAgaWYgKGNvbW1hbmQpIHsKICAgICAgICAgICAgaWYgKGFyZ3MpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkQXJncyA9IFtdOwoKICAgICAgICAgICAgICAgIGlmIChjb21tYW5kLmhlbHAuYXJncykgewogICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaGVscEFyZyBvZiBjb21tYW5kLmhlbHAuYXJncykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShoZWxwQXJnLmlkZW50aWZpZXIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZEFyZ3MucHVzaCguLi5oZWxwQXJnLmlkZW50aWZpZXIpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRBcmdzLnB1c2goaGVscEFyZy5pZGVudGlmaWVyKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBBc3NlcnQgdGhhdCB0aGUgaW5wdXQgYXJncyBhcmUgdmFsaWQgYWdhaW5zdCB0aGUgY29tbWFuZCBoZWxwIGRvY3VtZW50YXRpb24uCiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGVhc3kgd2F5IHRvIHZhbGlkYXRlIGFyZ3MgYmVmb3JlIGV4ZWN1dGluZyBhIGNvbW1hbmQuCiAgICAgICAgICAgICAgICBBQkNvbW1hbmRzTWFuYWdlci5hc3NlcnRWYWxpZEFyZ3MoYXJncywgdmFsaWRBcmdzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb21tYW5kLmNhbGxiYWNrKGFyZ3MpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbQUJDb21tYW5kc01hbmFnZXJdICR7bmFtZX0gaXMgbm90IGEgdmFsaWQgY29tbWFuZC5gKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBwcm92aWRlZCBhcmcuIFdpbGwgcmVtb3ZlIHRoZSBhcmcgYW5kIHZhbHVlIGZyb20gdGhlIGFyZ3MgYXJyYXkuCiAgICAgKi8KICAgIHN0YXRpYyBwYXJzZUFyZ1ZhbHVlKGFyZ3M6IGFueVtdLCBhcmc6IHN0cmluZyk6IGFueSB7CiAgICAgICAgbGV0IHZhbHVlID0gbnVsbDsKCiAgICAgICAgaWYgKGFyZ3MpIHsKICAgICAgICAgICAgY29uc3QgYXJnSW5kZXggPSBhcmdzLmZpbmRJbmRleChhID0+IGEgPT09IGFyZyk7CgogICAgICAgICAgICBpZiAoYXJnSW5kZXggPj0gMCkgewogICAgICAgICAgICAgICAgbGV0IGRlbGV0ZUNvdW50ID0gMTsKICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlSW5kZXggPSBhcmdJbmRleCArIDE7CgogICAgICAgICAgICAgICAgaWYgKHZhbHVlSW5kZXggPCBhcmdzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIGRlbGV0ZUNvdW50Kys7CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBhcmdzW3ZhbHVlSW5kZXhdOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIFJlbW92ZSByZWxhdGVkIGFyZ3MgJiB2YWx1ZXMKICAgICAgICAgICAgICAgIGFyZ3Muc3BsaWNlKGFyZ0luZGV4LCBkZWxldGVDb3VudCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB3ZXRoZXIgdGhlIGFyZyBmbGFnIGlzIHByb3ZpZGVkIGluIHRoZSBhcmdzLiBXaWxsIHJlbW92ZSB0aGUgYXJnIGZyb20gdGhlIGFyZ3MgYXJyYXkuCiAgICAgKi8KICAgIHN0YXRpYyBwYXJzZUFyZ0ZsYWcoYXJnczogYW55W10sIGFyZzogc3RyaW5nKTogYm9vbGVhbiB7CiAgICAgICAgaWYgKGFyZ3MpIHsKICAgICAgICAgICAgY29uc3QgYXJnSW5kZXggPSBhcmdzLmZpbmRJbmRleChhID0+IGEgPT09IGFyZyk7CgogICAgICAgICAgICBpZiAoYXJnSW5kZXggPj0gMCkgewogICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGFyZyBmbGFnLgogICAgICAgICAgICAgICAgYXJncy5zcGxpY2UoYXJnSW5kZXgsIDEpOwoKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICBzdGF0aWMgYXNzZXJ0VmFsaWRBcmdzKGFyZ3M6IGFueVtdLCB2YWxpZEFyZ3M6IGFueVtdKTogdm9pZCB7CiAgICAgICAgaWYgKGFyZ3MpIHsKICAgICAgICAgICAgY29uc3QgaW52YWxpZEFyZ3MgPSBbXTsKCiAgICAgICAgICAgIGZvciAobGV0IGFyZyBvZiBhcmdzKSB7CiAgICAgICAgICAgICAgICBpZiAoYXJnICYmIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZy5zdGFydHNXaXRoKCctJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBhcmcgd2Ugd2FudCB0byBldmFsdWF0ZS4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWxpZEFyZ3MgfHwgIXZhbGlkQXJncy5pbmNsdWRlcyhhcmcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGFyZyBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIHZhbGlkQXJncywgdGh1cyB0aGUgYXJnIGlzIGludmFsaWQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkQXJncy5wdXNoKGFyZyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgdGhpcyBhcmcgaXQgaXMgbW9zdGx5IGxpa2VseSBhIHZhbHVlIGFyZy4KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChpbnZhbGlkQXJncy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgSW52YWxpZCBhcmd1bWVudHM6ICR7aW52YWxpZEFyZ3Muam9pbignLCAnKX1gOwoKICAgICAgICAgICAgICAgIG9zLnRvYXN0KGVycm9yTWVzc2FnZSwgNCk7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKZ2xvYmFsVGhpcy5BQkNvbW1hbmRzTWFuYWdlciA9IEFCQ29tbWFuZHNNYW5hZ2VyOycA9JDTyQSKpQYEaGVscAIEAPSQ08kE3+wHKPCflJcyNGRjMDQzMS1mZmJiLTQ0OGQtYWE3NS05NzFiYWEwNzE4ZGMnAPSQ08kEiqUGCGNtZFNoZWV0AgQA9JDTyQSG7QfNFEBjb25zdCBhcmdzID0gdGhhdDsKCmxldCBwb3J0YWw7CmxldCBuZXdUYWIgPSBmYWxzZTsKCmlmIChhcmdzKSB7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHsKICAgICAgICBjb25zdCBhcmcgPSBhcmdzW2ldOwogICAgICAgIGlmIChhcmcuc3RhcnRzV2l0aCgnLScpKSB7CiAgICAgICAgICAgIGlmIChhcmcgPT09ICctdCcpIHsKICAgICAgICAgICAgICAgIG5ld1RhYiA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKCFwb3J0YWwpIHsKICAgICAgICAgICAgcG9ydGFsID0gYXJnOwogICAgICAgIH0KICAgIH0KfQoKaWYgKCFwb3J0YWwpIHsKICAgIHBvcnRhbCA9IG9zLmdldEN1cnJlbnREaW1lbnNpb24oKTsKfQoKY29uc3QgaGVscGVyQm90cyA9IHsKICAgICdjb25maWdCb3QnOiBjb25maWdCb3QsCiAgICAnZ3JpZFBvcnRhbEJvdCc6IGdyaWRQb3J0YWxCb3QsCiAgICAnc2hlZXRQb3J0YWxCb3QnOiBzaGVldFBvcnRhbEJvdCwKICAgICdzeXN0ZW1Qb3J0YWxCb3QnOiBzeXN0ZW1Qb3J0YWxCb3QsCiAgICAnbWluaUdyaWRQb3J0YWxCb3QnOiBtaW5pR3JpZFBvcnRhbEJvdCwKICAgICdtYXBQb3J0YWxCb3QnOiBtYXBQb3J0YWxCb3QsCiAgICAnbWluaU1hcFBvcnRhbEJvdCc6IG1pbmlNYXBQb3J0YWxCb3QsCiAgICAnbWVudVBvcnRhbEJvdCc6IG1lbnVQb3J0YWxCb3QsCiAgICAnbGVmdFdyaXN0UG9ydGFsQm90JzogbGVmdFdyaXN0UG9ydGFsQm90LAogICAgJ3JpZ2h0V3Jpc3RQb3J0YWxCb3QnOiByaWdodFdyaXN0UG9ydGFsQm90LAogICAgJ21lZXRQb3J0YWxCb3QnOiBtZWV0UG9ydGFsQm90LAogICAgJ3RhZ1BvcnRhbEJvdCc6IHRhZ1BvcnRhbEJvdCwKICAgICdpbXVQb3J0YWxCb3QnOiBpbXVQb3J0YWxCb3QsCn07CgovLyBGdW5jdGlvbiB0byByZXNvbHZlIGEgcG9ydGFsIHJlZmVyZW5jZSB0byBhIHNwZWNpZmljIGJvdApmdW5jdGlvbiByZXNvbHZlUG9ydGFsVG9Cb3QocGF0aCkgewogICAgaWYgKCFwYXRoIHx8IHBhdGggPT09ICcnKSByZXR1cm4gbnVsbDsKICAgIAogICAgLy8gRmlyc3QgY2hlY2sgaWYgaXQncyBkaXJlY3RseSBpbiBoZWxwZXJCb3RzCiAgICBpZiAoaGVscGVyQm90c1twYXRoXSkgewogICAgICAgIHJldHVybiBoZWxwZXJCb3RzW3BhdGhdOwogICAgfQoKICAgIC8vIFBlcmhhcHMgdGhlIHBhdGggaXMgYSBib3QgaWQuCiAgICBsZXQgYm90RnJvbUlkU2VhcmNoID0gZ2V0Qm90KCdpZCcsIHBhdGgpOwogICAgaWYgKGJvdEZyb21JZFNlYXJjaCkgewogICAgICAgIHJldHVybiBib3RGcm9tSWRTZWFyY2g7CiAgICB9CiAgICAKICAgIC8vIENoZWNrIGZvciBib3RoIGRpcmVjdCBhbmQgbmVzdGVkIHBhdGhzIGluIGdsb2JhbFRoaXMKICAgIGxldCBwYXRoUGFydHMgPSBwYXRoLnNwbGl0KCcuJyk7CiAgICBsZXQgY3VycmVudE9iaiA9IGdsb2JhbFRoaXM7CiAgICBsZXQgc3RhcnRJbmRleCA9IDA7CiAgICAKICAgIC8vIEhhbmRsZSBpZiB0aGUgcGF0aCBleHBsaWNpdGx5IHN0YXJ0cyB3aXRoICdnbG9iYWxUaGlzJwogICAgaWYgKHBhdGhQYXJ0c1swXSA9PT0gJ2dsb2JhbFRoaXMnKSB7CiAgICAgICAgc3RhcnRJbmRleCA9IDE7IC8vIFNraXAgdGhlICdnbG9iYWxUaGlzJyBwYXJ0IHNpbmNlIHdlJ3JlIGFscmVhZHkgc3RhcnRpbmcgdGhlcmUKICAgIH0KICAgIAogICAgLy8gVHJhdmVyc2UgdGhlIHBhdGgKICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDwgcGF0aFBhcnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgY29uc3QgcGFydCA9IHBhdGhQYXJ0c1tpXTsKICAgICAgICBpZiAoIWN1cnJlbnRPYmpbcGFydF0pIHsKICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIFBhdGggc2VnbWVudCBkb2Vzbid0IGV4aXN0CiAgICAgICAgfQogICAgICAgIGN1cnJlbnRPYmogPSBjdXJyZW50T2JqW3BhcnRdOwogICAgfQogICAgCiAgICAvLyBDaGVjayBpZiB0aGUgZmluYWwgb2JqZWN0IGlzIGEgYm90IChoYXMgaWQgYW5kIHRhZ3MpCiAgICBpZiAoY3VycmVudE9iaiAmJiBjdXJyZW50T2JqLmlkICYmIGN1cnJlbnRPYmoudGFncykgewogICAgICAgIHJldHVybiBjdXJyZW50T2JqOwogICAgfQogICAgCiAgICByZXR1cm4gbnVsbDsgLy8gTm90IGEgdmFsaWQgYm90Cn0KCi8vIFNlYXJjaCB0byBzZWUgaWYgcG9ydGFsIGFyZ3VtZW50IGlzIHNwZWNpZmljIHRvIGEgYm90CmxldCB1bmlxdWVCb3QgPSByZXNvbHZlUG9ydGFsVG9Cb3QocG9ydGFsKTsKCmlmICh1bmlxdWVCb3QpIHsKICAgIGlmICh1bmlxdWVCb3QudGFncy5zcGFjZSA9PT0gJ3RlbXBMb2NhbCcgfHwKICAgICAgICB1bmlxdWVCb3QudGFncy5zcGFjZSA9PT0gJ3RlbXBTaGFyZWQnCiAgICApIHsKICAgICAgICAvLyBGb3JjZSBzaGVldCB0byBvcGVuIGluIHNhbWUgdGFiIGlmIHRoZSBib3Qgb25seSBsaXZlcyBpbiB0aGlzIHRhYi4KICAgICAgICBuZXdUYWIgPSBmYWxzZTsKICAgIH0KICAgIHBvcnRhbCA9IHVuaXF1ZUJvdC5pZDsKfQoKaWYgKG5ld1RhYikgewogICAgb3Mub3BlblVSTChgLz9pbnN0PSR7b3MuZ2V0Q3VycmVudEluc3QoKX0mc2hlZXRQb3J0YWw9JHtwb3J0YWx9YCk7Cn0gZWxzZSB7CiAgICBjb25maWdCb3QudGFncy5zaGVldFBvcnRhbCA9IHBvcnRhbDsKfScA9JDTyQSKpQYNY21kRG93bmxvYWRBQgIEAPSQ08kE1IEIrQtAY29uc3QgYXJncyA9IHRoYXQ7CgpsZXQgYXV4VmVyc2lvbjogc3RyaW5nID0gQUJDb21tYW5kc01hbmFnZXIucGFyc2VBcmdWYWx1ZShhcmdzLCAnLXYnKTsKCmlmICghYXV4VmVyc2lvbikgewogICAgLy8gRGVmYXVsdCB0byBhdXggdmVyc2lvbiAyIGlmIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4KICAgIGF1eFZlcnNpb24gPSAnMic7Cn0KCmlmIChhdXhWZXJzaW9uICE9PSAnMScgJiYgYXV4VmVyc2lvbiAhPT0gJzInKSB7CiAgICBsaW5rcy51dGlscy5hYkxvZ0FuZFRvYXN0KGBPbmx5IGF1eCBmb3JtYXQgdmVyc2lvbiAxIGFuZCAyIGFyZSBzdXBwb3J0ZWQgaW4gdGhlIGRvd25sb2FkIGFiIGNvbW1hbmQuYCk7CiAgICByZXR1cm47Cn0KCmNoYW5nZVN0YXRlKGxpbmtzLm1hbmlmZXN0YXRpb24sICJBc2xlZXAiLCAiYWJNYW5pZmVzdFN0YXRlIik7CgpsZXQgZ3JvdXBzID0gW107CgppZiAoYXJncyAmJiBhcmdzLmxlbmd0aCA+IDApIHsKICAgIC8vIFJlbWFpbmluZyBhcmdzIGFyZSBncm91cCBuYW1lcyBwcm92aWRlZCB3aXRoIHRoZSBjb21tYW5kLgogICAgZ3JvdXBzID0gYXJnczsKfSBlbHNlIHsKICAgIGxldCBncm91cCA9IGF3YWl0IG9zLnNob3dJbnB1dChtYXNrcy5wcmV2SW5wdXREb3dubG9hZEFCR3JvdXAsIHsgdGl0bGU6ICdBQiBHcm91cCBUYWcnLCBhdXRvU2VsZWN0OiB0cnVlIH0pOwogICAgaWYgKGdyb3VwKSB7CiAgICAgICAgbWFza3MucHJldklucHV0RG93bmxvYWRBQkdyb3VwID0gZ3JvdXA7CiAgICAgICAgZ3JvdXBzLnB1c2goZ3JvdXApOwogICAgfQp9Cgpjb25zdCBtYWpvclZlcnNpb24gPSBsaW5rcy5sZWFybi50YWdzLmFiQ29yZU1ham9yVmVyc2lvbjsKY29uc3QgbWlub3JWZXJzaW9uID0gbGlua3MubGVhcm4udGFncy5hYkNvcmVNaW5vclZlcnNpb247CmNvbnN0IGFiVmVyc2lvbiA9IGAke21ham9yVmVyc2lvbn0uJHttaW5vclZlcnNpb259YDsKCmZvciAobGV0IGdyb3VwIG9mIGdyb3VwcykgewogICAgY29uc3QgZ3JvdXBCb3RzID0gZ2V0Qm90cyhieU1vZCh7IFtncm91cF06IHRydWUsIHNwYWNlOiAnc2hhcmVkJyB9KSk7CgogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cEJvdHMubGVuZ3RoOyBpKyspIHsKICAgICAgICBncm91cEJvdHNbaV0udGFncy5hYlZlcnNpb24gPSBhYlZlcnNpb247CiAgICB9CgogICAgaWYgKGdyb3VwID09ICJhYkNvbmZpZyIpIHsKICAgICAgICBncm91cCA9ICJhYjEiOwogICAgfQoKICAgIGlmIChhdXhWZXJzaW9uID09PSAnMScpIHsKICAgICAgICAvLyBEb3dubG9hZCBhcyB2ZXJzaW9uIDEKICAgICAgICBvcy5kb3dubG9hZEJvdHMoZ3JvdXBCb3RzLCBncm91cCkKICAgIH0gZWxzZSB7CiAgICAgICAgLy8gRG93bmxvYWQgYXMgdmVyc2lvbiAyCiAgICAgICAgb3MuZG93bmxvYWRCb3RzQXNJbml0aWFsemF0aW9uVXBkYXRlKGdyb3VwQm90cywgZ3JvdXApOwogICAgfQoKfQoKJwD0kNPJBIqlBgljbWRBQldha2UCBAD0kNPJBIKNCMQDQGxldCBza2lsbEFycmF5ID0gWyJhYlBlcnNvbmFsaXR5IiwgImFiSW50ZXJmYWNlIiwgImFiQWN0aW9uIiwgImFiVGVzdHMiXTsKCmZvciAobGV0IGkgPSAwOyBpIDwgc2tpbGxBcnJheS5sZW5ndGg7IGkrKykgewogICAgYXdhaXQgbGlua3MubGVhcm4uYWJBZGFwdChza2lsbEFycmF5W2ldKTsKfQoKYXdhaXQgb3Muc2xlZXAoMzAwKTsKCi8va2VlcCBhYiBhd2FrZQpsaW5rcy5yZW1lbWJlci50YWdzLmFiQXdha2VTdGF0ZSA9IHRydWU7CgppZiAoY29uZmlnQm90LnRhZ3MucGF0dGVybikgewogICAgbGlua3MucmVtZW1iZXIudGFncy5iYXNlQUIgPSBjb25maWdCb3QudGFncy5wYXR0ZXJuOwp9CmVsc2UgewogICAgbGlua3MucmVtZW1iZXIudGFncy5iYXNlQUIgPSB1dWlkKCk7Cn0KCmNoYW5nZVN0YXRlKGxpbmtzLm1hbmlmZXN0YXRpb24sICJBd2FrZSIsICJhYk1hbmlmZXN0U3RhdGUiKTsnAPSQ08kEiqUGCmNtZEFCU2xlZXACBAD0kNPJBMeQCN0BQGNoYW5nZVN0YXRlKGxpbmtzLm1hbmlmZXN0YXRpb24sICJBc2xlZXAiLCAiYWJNYW5pZmVzdFN0YXRlIik7Cgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9IG51bGw7CmNvbmZpZ0JvdC5tYXNrcy50YWdQb3J0YWwgPSBudWxsOwpjb25maWdCb3QubWFza3MudGFnUG9ydGFsU3BhY2UgPSBudWxsOwoKdGFnUG9ydGFsQm90Lm1hc2tzLnRhZ1BvcnRhbEFuY2hvclBvaW50ID0gbnVsbDsnAPSQ08kEiqUGB2NvbnNvbGUCBAD0kNPJBKWSCCjwn5SXMjRiN2U2NmYtMGQ1Yi00MDY0LWJmNDgtYjU2MmI5ZTZlM2ViJwD0kNPJBIqlBg5jbWRVcGxvYWRGaWxlcwIEAPSQ08kEzJIIkxBAY29uc3QgYXJncyA9IHRoYXQ7Cgphc3luYyBmdW5jdGlvbiB1cGxvYWRGaWxlKHsgZmlsZSwgcmVjb3JkS2V5IH0pIHsKICAgIGxldCBmaWxlRXh0ZW5zaW9uID0gZmlsZS5uYW1lLnNwbGl0KCcuJykucG9wKCk7CiAgICBsZXQgZmlsZU5hbWUgPSBmaWxlLm5hbWUuc3BsaXQoJy4nKS5zaGlmdCgpOwogICAgbGV0IG1pbWVUeXBlOwoKICAgIHN3aXRjaCAoZmlsZUV4dGVuc2lvbikgewogICAgICAgIGNhc2UgJ3N2Zyc6CiAgICAgICAgICAgIG1pbWVUeXBlID0gImltYWdlL3N2Zyt4bWwiOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdnbGInOgogICAgICAgIGNhc2UgJ2dsdGYnOgogICAgICAgICAgICBtaW1lVHlwZSA9ICJ0ZXh0L3htbCI7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIG1pbWVUeXBlID0gZmlsZS5taW1lVHlwZTsKICAgICAgICAgICAgYnJlYWs7CiAgICB9CgogICAgbGV0IHVybDsKICAgICAgICAKICAgIGNvbmZpZ0JvdC50YWdzLnNlbGVjdGVkX3N0dWRpb0lEID0gcmVjb3JkS2V5OwogICAgY29uc3QgW3Jlc3VsdF0gPSBhd2FpdCBQcm9taXNlLmFsbChzaG91dCgnYWJQdWJsaXNoRmlsZScsIHsgZmlsZSwgZmlsZU5hbWUsIG1pbWVUeXBlIH0pKTsKICAgIGNvbmZpZ0JvdC50YWdzLnNlbGVjdGVkX3N0dWRpb0lEID0gbnVsbDsKICAgIAogICAgaWYgKHJlc3VsdC51cmwpIHsKICAgICAgICB1cmwgPSByZXN1bHQudXJsOwogICAgfSBlbHNlIGlmIChyZXN1bHQuZXhpc3RpbmdGaWxlVXJsKSB7CiAgICAgICAgdXJsID0gcmVzdWx0LmV4aXN0aW5nRmlsZVVybDsKICAgIH0KCiAgICByZXR1cm4geyB1cmwgfTsKfQoKY29uc3QgcmVjb3JkS2V5ID0gQUJDb21tYW5kc01hbmFnZXIucGFyc2VBcmdWYWx1ZShhcmdzLCAnLXJlY29yZCcpOwpjb25zdCBzZWxlY3RlZEZpbGVzID0gYXdhaXQgb3Muc2hvd1VwbG9hZEZpbGVzKCk7CmNvbnN0IHB1Ymxpc2hSZWNvcmQgPSBnZXRCb3QoJ3N5c3RlbScsICdyYy1wYWNrYWdlLWRldi5wdWJsaXNoUmVjb3JkJyk7CgppZiAoc2VsZWN0ZWRGaWxlcyAmJiBzZWxlY3RlZEZpbGVzLmxlbmd0aCkgewogICAgaWYgKHRhZ3MuZGVidWcpIHsKICAgICAgICBjb25zb2xlLmxvZyhgWyR7dGFncy5zeXN0ZW19LiR7dGFnTmFtZX1dIFVwbG9hZCAke3NlbGVjdGVkRmlsZXMubGVuZ3RofSBmaWxlcy4uLmApOwogICAgfQoKICAgIGxldCBkb25lSHRtbCA9ICcnOwoKICAgIGlmIChyZWNvcmRLZXkpIHsKICAgICAgICBkb25lSHRtbCArPSBgPGgyPlJlY29yZCBJZDwvaDI+YDsKICAgICAgICBkb25lSHRtbCArPSBgPHA+JHtyZWNvcmRLZXl9PC9wPmA7CiAgICB9CgogICAgZG9uZUh0bWwgKz0gJzxoMj5VcGxvYWRlZCBGaWxlczwvaDI+JzsKICAgIAogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3RlZEZpbGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgb3Muc2hvd0h0bWwoYFVwbG9hZGluZyAke3NlbGVjdGVkRmlsZXNbaV0ubmFtZX0uLi5gKTsKICAgICAgICAKICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1cGxvYWRGaWxlKHsKICAgICAgICAgICAgZmlsZTogc2VsZWN0ZWRGaWxlc1tpXSwKICAgICAgICAgICAgcmVjb3JkS2V5LAogICAgICAgICAgICBvblByb2dyZXNzOiAoZmlsZVByb2dyZXNzKSA9PiB7CiAgICAgICAgICAgICAgICBvcy5zaG93SHRtbChgVXBsb2FkaW5nICR7c2VsZWN0ZWRGaWxlc1tpXS5uYW1lfSAke01hdGguY2VpbChmaWxlUHJvZ3Jlc3MgKiAxMDApfSVgKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIGlmIChyZXN1bHQudXJsKSB7CiAgICAgICAgICAgIGRvbmVIdG1sICs9IGA8YSBocmVmPSIke3Jlc3VsdC51cmx9IiB0YXJnZXQ9Il9ibGFuayI+JHtzZWxlY3RlZEZpbGVzW2ldLm5hbWV9PC9hPjwvYnI+YDsKICAgICAgICB9CgogICAgICAgIGNvbnNvbGUubG9nKGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gVXBsb2FkICR7c2VsZWN0ZWRGaWxlc1tpXS5uYW1lfSByZXN1bHQ6YCwgcmVzdWx0KTsKICAgIH0KCiAgICBvcy5zaG93SHRtbChkb25lSHRtbCk7Cn0nAPSQ08kEiqUGDmNtZERvd25sb2FkRWdnAgQA9JDTyQTgogj5C0Bjb25zdCByZWNvcmRLZXkgPSBhd2FpdCBvcy5zaG93SW5wdXQobWFza3MucHJldkRvd25sb2FkRWdnUmVjb3JkS2V5LCB7CiAgICB0aXRsZTogJ3JlY29yZCB0byBsb29rdXAgZWdnIGluJywKICAgIHR5cGU6ICd0ZXh0JywKfSkKY29uc29sZS5sb2coYFske3RhZ3Muc3lzdGVtfS4ke3RhZ05hbWV9XSByZWNvcmRLZXk6YCwgcmVjb3JkS2V5KTsKCmlmICghcmVjb3JkS2V5KSB7CiAgICByZXR1cm47Cn0KCm1hc2tzLnByZXZEb3dubG9hZEVnZ1JlY29yZEtleSA9IHJlY29yZEtleTsKCmNvbnN0IGVnZ05hbWUgPSBhd2FpdCBvcy5zaG93SW5wdXQobWFza3MucHJldkRvd25sb2FkRWdnTmFtZSwgewogICAgdGl0bGU6ICduYW1lIG9mIGVnZycsCiAgICB0eXBlOiAndGV4dCcsCn0pCmNvbnNvbGUubG9nKGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gZWdnTmFtZTpgLCBlZ2dOYW1lKTsKCmlmICghZWdnTmFtZSkgewogICAgcmV0dXJuOwp9CgptYXNrcy5wcmV2RG93bmxvYWRFZ2dOYW1lID0gZWdnTmFtZTsKCmNvbnN0IGVnZyA9IGF3YWl0IGxpbmtzLnNlYXJjaC5vbkxvb2t1cEFCRWdncyh7CiAgICBhYklEOiBlZ2dOYW1lLAogICAgcmVjb3JkS2V5LAogICAgcmV0dXJuVHlwZTogJ2VnZycKfSkKCmNvbnNvbGUubG9nKGBbJHt0YWdzLnN5c3RlbX0uJHt0YWdOYW1lfV0gZWdnOmAsIGVnZyk7CgppZiAoIUFycmF5LmlzQXJyYXkoZWdnLmVnZ1ZlcnNpb25IaXN0b3J5KSB8fCBlZ2cuZWdnVmVyc2lvbkhpc3RvcnkubGVuZ3RoID09PSAwKSB7CiAgICBsaW5rcy51dGlscy5hYkxvZ0FuZFRvYXN0KGBEYXRhIGZvdW5kIGF0IGFkZHJlc3MgJyR7ZWdnTmFtZX0nIGluIHJlY29yZCAnJHtyZWNvcmRLZXl9JyBkb2VzIG5vdCBhcHBlYXIgdG8gYmUgYW4gZWdnLmApCiAgICByZXR1cm4gbnVsbDsKfQoKY29uc3QgZWdnVmVyc2lvbk9wdGlvbnMgPSBlZ2cuZWdnVmVyc2lvbkhpc3RvcnkubWFwKChpdGVtLCBpbmRleCkgPT4gewogICAgcmV0dXJuIHsgbGFiZWw6IGB2ZXJzaW9uICR7aW5kZXggKyAxfWAsIHZhbHVlOiBpbmRleCB9Cn0pCgpjb25zdCBzZWxlY3RlZFZlcnNpb25PcHRpb24gPSBhd2FpdCBvcy5zaG93SW5wdXQoZWdnVmVyc2lvbk9wdGlvbnMubGVuZ3RoIC0gMSwgewogICAgdGl0bGU6ICdkb3dubG9hZCBlZ2cgdmVyc2lvbicsCiAgICB0eXBlOiAnbGlzdCcsCiAgICBzdWJ0eXBlOiAnc2VsZWN0JywKICAgIGl0ZW1zOiBlZ2dWZXJzaW9uT3B0aW9ucywKfSkKCmlmICghc2VsZWN0ZWRWZXJzaW9uT3B0aW9uKSB7CiAgICByZXR1cm4gbnVsbDsKfQoKY29uc3QgYXV4RGF0YVVybCA9IGVnZy5lZ2dWZXJzaW9uSGlzdG9yeVtzZWxlY3RlZFZlcnNpb25PcHRpb24udmFsdWVdOwpjb25zdCBhdXhEYXRhID0gYXdhaXQgb3MuZ2V0RmlsZShhdXhEYXRhVXJsKTsKY29uc3QgYXV4RmlsZW5hbWUgPSBgJHtlZ2dOYW1lfV92JHtzZWxlY3RlZFZlcnNpb25PcHRpb24udmFsdWUgKyAxfS5hdXhgOwoKb3MuZG93bmxvYWQoYXV4RGF0YSwgYXV4RmlsZW5hbWUsICdhcHBsaWNhdGlvbi9qc29uJyk7JwD0kNPJBIqlBg9jbWREb3dubG9hZEluc3QCBAD0kNPJBNquCG9AY29uc3QgYXJncyA9IHRoYXQ7Cgpvcy5kb3dubG9hZEJvdHMoZ2V0Qm90cyhieU1vZCh7IHNwYWNlOiAic2hhcmVkIiwgYWJJZ25vcmU6IG51bGwgfSkpLCBvcy5nZXRDdXJyZW50SW5zdCgpKTsnAPSQ08kEiqUGBnNlYXJjaAIEAPSQ08kEyq8IKPCflJdkODM3MTQ0NC05MTU4LTQ0MzYtOGZjNy04NGNjOTFiN2Y1MjUnAPSQ08kEiqUGBXV0aWxzAgQA9JDTyQTxrwgo8J+UlzkzZDk2NWUwLWQyMGUtNGI0NS04Y2EwLTY0OTI3M2I3MTM4YycA9JDTyQSKpQYJY21kU3lzdGVtAgQA9JDTyQSYsAiRB0Bjb25zdCBhcmdzID0gdGhhdDsKCmNvbnN0IHNhbWVXaW5kb3cgPSBBQkNvbW1hbmRzTWFuYWdlci5wYXJzZUFyZ0ZsYWcoYXJncywgJy13Jyk7CgpsZXQgc3lzdGVtVGFnTmFtZSA9IG51bGw7CgppZiAoYXJncyAmJiBhcmdzLmxlbmd0aCA+IDApIHsKICAgIHN5c3RlbVRhZ05hbWUgPSBhcmdzLmpvaW4oJyAnKTsKfQoKaWYgKHNhbWVXaW5kb3cpIHsKICAgIC8vIE9wZW4gc3lzdGVtIHBvcnRhbCBpbiB0aGUgY3VycmVudCB3aW5kb3cuCiAgICBjb25maWdCb3QudGFncy5zeXN0ZW1Qb3J0YWwgPSB0cnVlOwogICAgY29uZmlnQm90LnRhZ3Muc3lzdGVtVGFnTmFtZSA9IHN5c3RlbVRhZ05hbWU7Cn0gZWxzZSB7CiAgICAvLyBPcGVuIHN5c3RlbSBwb3J0YWwgaW4gYSBuZXcgdGFiLgogICAgY29uc3QgdXJsID0gbmV3IFVSTChjb25maWdCb3QudGFncy51cmwpOwoKICAgIC8vIFJlbW92ZSBhbnkgcG9ydGFscyB0aGF0IGFyZSBzZXQgaW4gdGhlIFVSTC4KICAgIGxldCBwYXJhbXMgPSB1cmwuc2VhcmNoUGFyYW1zLmtleXMoKTsKICAgIGZvciAobGV0IHBhcmFtIG9mIHBhcmFtcykgewogICAgICAgIGlmIChwYXJhbS5lbmRzV2l0aCgnUG9ydGFsJykpIHsKICAgICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5kZWxldGUocGFyYW0pOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBUdXJuIG9uIHRoZSBzeXN0ZW0gcG9ydGFsLgogICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3N5c3RlbVBvcnRhbCcsICd0cnVlJyk7CiAgICB1cmwuc2VhcmNoUGFyYW1zLmRlbGV0ZSgnc3lzdGVtVGFnTmFtZScpOwoKICAgIGlmIChzeXN0ZW1UYWdOYW1lKSB7CiAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3N5c3RlbVRhZ05hbWUnLCBzeXN0ZW1UYWdOYW1lKTsKICAgIH0KCiAgICBvcy5vcGVuVVJMKHVybC5ocmVmKTsKfQonAPSQ08kEiqUGDWFiQ2hhdEJhck9wZW4CBAD0kNPJBKq3CKMCQGNvbnN0IHsKICAgIHByZWZpbGwsCn0gPSB0aGF0ID8/IHt9CgptYXNrcy5jaGF0T3BlbiA9IHRydWU7Cgpvcy5zaG93Q2hhdCh7CiAgICBwbGFjZWhvbGRlcjogJz4gLmhlbHAgdG8gc2VlIGF2YWlsYWJsZSBjb21tYW5kcycsCiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMmYyZjJmJywKICAgIGZvcmVncm91bmRDb2xvcjogbGlua3MucGVyc29uYWxpdHkudGFncy5hYkJhc2VDb2xvciwKICAgIHBsYWNlaG9sZGVyQ29sb3I6IGxpbmtzLnBlcnNvbmFsaXR5LnRhZ3MuYWJCYXNlQ29sb3IsCiAgICBwcmVmaWxsCn0pJwD0kNPJBIqlBg5hYkNoYXRCYXJDbG9zZQIEAPSQ08kEzrkIdkBtYXNrcy5jaGF0T3BlbiA9IGZhbHNlOwpvcy5oaWRlQ2hhdCgpOwoKLy8gR2l2ZSBDYXN1YWxPUyBhIGNoYW5nZSB0byBhY3R1YWxseSByZW1vdmUgdGhlIGNoYXQgYmFyLgphd2FpdCBvcy5zbGVlcCgwKTsnAPSQ08kEiqUGC3BlcnNvbmFsaXR5AgQA9JDTyQTFuggo8J+Ul2I3NmRmYmM0LTg1NGItNGY2ZC1hOTFmLWE5NDg2OTQ3NzRkYgA="}]}