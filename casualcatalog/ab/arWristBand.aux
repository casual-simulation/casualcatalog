{"signature":{"abVersion":"undefined.NaN","casualOSVersion":[{"alpha":false,"hash":"8e5ee8f33c196328a1c90dbbd799d2ddf248f31d","major":3,"minor":3,"patch":11,"playerMode":"builder","version":"v3.3.11"}],"timeStamp":1729781857623},"state":{"8c0434e6-3d15-4d2d-b288-a74c55d3aeb7":{"id":"8c0434e6-3d15-4d2d-b288-a74c55d3aeb7","space":"shared","tags":{"abIDOrigin":"wrist_band","abIDStudio":"e91eab0d-6a75-4ab9-8a0e-50a4cc0c1d34","color":"#00D9CD","creator":"faf16c47-ed6b-4156-8655-911031457f5c","form":"hex","home":true,"homeRotationX":"0.785398","homeSortOrder":0,"homeX":0,"homeY":0,"homeZ":"-0.5","pointable":"false","scale":"0.5","scaleZ":"0.2","transformer":"faf16c47-ed6b-4156-8655-911031457f5c"}},"abXPBot":{"id":"abXPBot","tags":{"abIgnore":true,"authorID":"e91eab0d-6a75-4ab9-8a0e-50a4cc0c1d34","form":"nothing","signature":{"abVersion":"undefined.NaN","casualOSVersion":[{"alpha":false,"hash":"8e5ee8f33c196328a1c90dbbd799d2ddf248f31d","major":3,"minor":3,"patch":11,"playerMode":"builder","version":"v3.3.11"}],"timeStamp":1729781857623},"system":"ab.pattern.abXPBot","version":8,"xp":3}},"faf16c47-ed6b-4156-8655-911031457f5c":{"id":"faf16c47-ed6b-4156-8655-911031457f5c","space":"shared","tags":{"abIDOrigin":"wrist_band","abIDStudio":"e91eab0d-6a75-4ab9-8a0e-50a4cc0c1d34","abWristBandX":"-3","abWristBandY":"3","form":"sphere","formOpacity":"0.5","home":true,"homeX":null,"homeY":null,"homeZ":null,"listening":true,"onAnyBotsAdded":"@if (!configBot.tags.arEnabled)\n{\n    return;\n}\n\nconst menuPortal = configBot.tags.menuPortal;\nconst allBots = that.bots;\n\nfor (let i = 0; i < allBots.length; i++)\n{\n    const activeBot = allBots[i];\n\n    if (activeBot.tags[menuPortal] == true)\n    {\n       thisBot.wrist_addItem(activeBot);\n    }\n}","onClick":"@const arCapable = await os.arSupported();\nconst currentDimension = os.getCurrentDimension();\n\nif (!arCapable && !configBot.tags.arEnabled)\n{\n    masks.color = \"red\";\n\n    os.toast(\"AR not possible on this device\");\n\n    return;\n}\nelse if (arCapable && !configBot.tags.arEnabled)\n{\n    os.enableAR();\n\n    configBot.tags.arEnabled = true;\n}\n\nconfigBot.masks.leftWristPortal = \"abWristBand\";\n\nsetTagMask(thisBot, currentDimension, false, \"tempShared\");\n\nmasks.abWristBand = true;\nmasks.onClick = `@ thisBot.onExitClick();`;\nmasks.label = \"X\";\nmasks.form = null;\nmasks.formOpacity = 1;\nmasks.draggable = false;\nmasks.color = \"clear\";\nmasks.scaleZ = 0.1;\nmasks.labelColor = \"#FFFFFF\";\nmasks.onPointerEnter = \"@ masks.scale = 1.1;\";\nmasks.onPointerExit = \"@ masks.scale = null;\";\n\nconst hexBot = getBot(\"transformer\", thisBot.id);\n\nhexBot.masks.color = \"clear\";","onEggHatch":"@applyMod(thisBot, that.eggParameters);","onExitClick":"@clearTagMasks(thisBot);\n\nconfigBot.masks.leftWristPortal = null;\nconfigBot.tags.arEnabled = null;\n\nos.disableAR();\n\nconst hexBot = getBot(\"transformer\", thisBot.id);\n\nclearTagMasks(hexBot);","onSkillUpdate":"@applyMod(thisBot, that.data);","scale":"1.5","wristManager":"true","wrist_addItem":"@const targetBot = that;\nconst wristPortal = configBot.tags.leftWristPortal;\nconst otherWristBots = getBots(byMod({[wristPortal]: true, wristManager: null}));\n\notherWristBots.push(targetBot);\n\nconst actualRootCheck = Math.sqrt(otherWristBots.length) % 1 === 0;\nconst baseRoot = Math.ceil(Math.sqrt(otherWristBots.length));\n\nlet targetColumns = baseRoot;\n\nif (actualRootCheck)\n{\n    targetColumns = Math.sqrt(otherWristBots.length);\n}\n\nlet botNum = 0;\n\nfullLoop:\nfor (let j = 0; j < targetColumns; j++)\n{\n    const rowNum = j;\n\n    for (let k = 0; k < targetColumns; k++)\n    {\n        const columnNum = k;\n        const currentBot = otherWristBots[botNum];\n\n        if (!currentBot)\n        {\n            break fullLoop;\n        }\n        else\n        {\n            botNum++;\n        }\n\n        currentBot.masks[wristPortal + \"X\"]= (columnNum * 2) - 2;\n        currentBot.masks[wristPortal + \"Y\"] = (rowNum * -2) + 2;\n        currentBot.masks[wristPortal] = true;\n        //currentBot.masks.labelPosition = \"floatingBillboard\";\n    }\n}"}}},"version":1}