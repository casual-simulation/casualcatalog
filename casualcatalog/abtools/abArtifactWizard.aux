{"version":1,"state":{"b6a320ea-6f5c-4e1e-99ef-a01aa64300d4":{"id":"b6a320ea-6f5c-4e1e-99ef-a01aa64300d4","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","system":"abArtifactWizard.wizard","label":"artifact wizard","cursor":"pointer","formOpacity":"0.33","strokeColor":"#c0b3fc","labelPosition":"floatingBillboard","onClick":"@thisBot.abArtifactWizardMenuOpen({ wizardBot: thisBot, wizardDimension: that.dimension });\n\n// const { dimension } = that;\n\n// if (!links.artifact) {\n//     await links.learn.abAdapt('abShell');\n// }\n\n// // Find all the unique abArtifactNames in the inst.\n// let abArtifactNames = new Set();\n\n// getBots((b) => {\n//     if (b.tags.abArtifactName && !b.tags.abArtifact) { \n//         abArtifactNames.add(b.tags.abArtifactName);\n//     }\n// })\n\n// if (abArtifactNames.size > 0) {\n//     // Let the user choose which artifact they would like to generate.\n//     abArtifactNames = Array.from(abArtifactNames);\n//     abArtifactNames.sort(); // Sort artifact names alphabetically.\n\n//     // Convert artifact names into input options.\n//     let artifactOptions = abArtifactNames.map((name, index) => {\n//         return {\n//             label: name,\n//             value: name\n//         }\n//     })\n\n//     // Find (if any) the indexes of previously selected artifacts.\n//     let prevSelectedIndex;\n//     if (configBot.tags.abArtifactWizardPrevSelectedItem) {\n//         const index = artifactOptions.findIndex(o => o.value === configBot.tags.abArtifactWizardPrevSelectedItem.value);\n//         if (index >= 0) {\n//             prevSelectedIndex = index;\n//         }\n//     }\n\n//     const selectedItem = await os.showInput(prevSelectedIndex, {\n//         title: 'Choose artifact to make',\n//         type: 'list',\n//         subtype: 'radio',\n//         items: artifactOptions,\n//     });\n\n//     configBot.tags.abArtifactWizardPrevSelectedItem = selectedItem;\n\n//     if (selectedItem) {\n//         const abArtifactName = selectedItem.value;\n//         const abArtifactBot = await links.artifact.abCreateArtifactBot({\n//             abArtifactName,\n//             dimension,\n//             position: getBotPosition(thisBot, dimension),\n//         });\n\n//         if (abArtifactBot) {\n//             if (tags.destroyAfterUse && configBot.tags.gridPortal !== 'abArtifactWizard') {\n//                 destroy(thisBot);\n//             }\n\n//             links.artifact.abArtifactBotMenuOpen({ abArtifactBot });\n//         }\n//     }\n// } else {\n//     os.toast(`No artifacts defined in the inst.`)\n// }\n","abVersion":"10.5","onEggHatch":"@if (that.eggParameters) {\n    const dimension = that.eggParameters.gridInformation?.dimension ?? 'home';\n    const dimensionX = that.eggParameters.gridInformation?.position?.x ?? 0;\n    const dimensionY = that.eggParameters.gridInformation?.position?.y ?? 0;\n\n    tags[dimension] = true;\n    tags[dimension + 'X'] = dimensionX;\n    tags[dimension + 'Y'] = dimensionY;\n}\n","destroyAfterUse":"true","abIgnore":"true","labelWordWrapMode":"breakWords","abArtifactWizard":true,"color":"#AEA1FF","labelFloatingBackgroundColor":"#AEA1FF","labelColor":"#1e1b2d","remember":"ðŸ”—e5380a6b-8b4d-4a8b-8b04-58e1eb03e5e7","artifact":"ðŸ”—78e41503-c933-4f8a-817a-ba97bf8d5d27","learn":"ðŸ”—6657b865-e983-4401-9fc9-f5418d18a7f7","abArtifactWizardMenuOpen":"@const {\n    wizardDimension = ab.tags.abInst,\n} = that ?? {};\n\nshout(\"abArtifactWizardMenuReset\");\n\nconfigBot.masks.menuPortal = \"abArtifactWizardMainMenu\";\n\nconst menuBots = [];\n\nconst abArtifactNames: Set<string> = links.artifact.abGetArtifactNamesInInst();\n\nif (!abArtifactNames || abArtifactNames.size === 0) {\n    links.utils.abLogAndToast({ message: `No artifacts found in the inst.` })\n    return;\n}\n\nconst abArtifactBaseColor = links.remember.tags.abArtifactBaseColor ?? links.artifact.tags.abArtifactBaseColorDefault;\nconst abArtifactLabelColor = links.remember.tags.abArtifactLabelColor ?? links.artifact.tags.abArtifactLabelColorDefault;\n\n/**\n * Menu portal: abArtifactWizardMainMenu\n */\n\n// Create artifact button.\nconst createButton = links.menu.abCreateMenuButton({\n    abArtifactWizardMainMenu: true,\n    // formAddress: 'download',\n    label: `create artifact bot`,\n    color: abArtifactBaseColor,\n    labelColor: abArtifactLabelColor,\n    wizardBot: getLink(thisBot),\n    wizardDimension,\n    onArtifactWizardSelection: `@\n        const { abArtifactName } = that;\n\n        console.log('create selection', that);\n\n        const position = getBotPosition(links.wizardBot, tags.wizardDimension);\n\n        const abArtifactBot = await links.wizardBot.links.artifact.abCreateArtifactBot({\n            abArtifactName,\n            dimension: tags.wizardDimension,\n            position,\n        });\n\n        if (abArtifactBot) {\n            if (links.wizardBot && links.wizardBot.tags.destroyAfterUse && configBot.tags.gridPortal !== 'abArtifactWizard') {\n                destroy(thisBot);\n            }\n\n            links.wizardBot.links.artifact.abArtifactBotMenuOpen({ abArtifactBot });\n        }\n        \n        shout(\"abArtifactWizardMenuReset\");\n    `,\n    onClick: `@\n        configBot.tags.abArtifactWizardSelectionMenuTarget = getLink(thisBot);\n        configBot.masks.menuPortal = 'abArtifactWizardSelectionMenu';\n    `,\n})\nmenuBots.push(createButton);\n\n// Publish artifact shards button.\nconst publishButton = links.menu.abCreateMenuButton({\n    abArtifactWizardMainMenu: true,\n    // formAddress: 'sync',\n    label: `publish artifact shards`,\n    color: abArtifactBaseColor,\n    labelColor: abArtifactLabelColor,\n    onArtifactWizardSelection: `@\n        const { abArtifactName } = that;\n\n        shout(\"abArtifactWizardMenuReset\");\n    `,\n    onClick: `@\n        configBot.tags.abArtifactWizardSelectionMenuTarget = getLink(thisBot);\n        configBot.masks.menuPortal = 'abArtifactWizardSelectionMenu';\n    `,\n})\nmenuBots.push(publishButton);\n\n\n/**\n * Menu portal: abArtifactWizardSelectionMenu\n */\n\nfor (const abArtifactName of abArtifactNames) {\n    const artifactNameButton = links.menu.abCreateMenuButton({\n        abArtifactWizardSelectionMenu: true,\n        // formAddress: 'download',\n        label: abArtifactName,\n        publishButton: getLink(publishButton),\n        createButton: getLink(createButton),\n        color: abArtifactBaseColor,\n        labelColor: abArtifactLabelColor,\n        onClick: `@\n            whisper(configBot.links.abArtifactWizardSelectionMenuTarget, 'onArtifactWizardSelection', { abArtifactName: tags.label });\n        `,\n    })\n    menuBots.push(artifactNameButton);\n}\n\nmasks.menuBots = getLink(menuBots);","abArtifactWizardMenuReset":"@if (links.menuBots) {\n    destroy(links.menuBots);\n    links.menuBots = null;\n}\n\nconfigBot.masks.menuPortal = null;\nconfigBot.tags.abArtifactWizardSelectionMenuTarget = null;","onAnyBotsRemoved":"@const { botIDs } = that;\n\nif (botIDs.includes(thisBot.id)) {\n    thisBot.abArtifactBotMenuReset();\n}","onGridClick":"@thisBot.abArtifactWizardMenuReset();","menu":"ðŸ”—b30c6c5d-a4f7-4266-ba38-393dc95e1ecb","utils":"ðŸ”—93d965e0-d20e-4b45-8ca0-649273b7138c","abArtifactWizardX":null,"abArtifactWizardY":null,"abArtifactWizardZ":null}}}}