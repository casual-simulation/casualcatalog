{"version":1,"state":{"1f115ccc-3e99-45eb-9c6d-778c11898958":{"id":"1f115ccc-3e99-45eb-9c6d-778c11898958","space":"shared","tags":{"creator":"bdbeef26-8eb0-494e-b5df-94114c7f6155","abAgent":"true","abMenuRefresh":"@thisBot.agentReset();","abVersion":"10.5","agentOnRequest":"@thisBot.agentReset();\n\nlet inquiry = that.inquiry ?? that;\n\nconst abAskBot = getBot(\"system\", \"ab.action.ask\");\nconst prompt = !that.prompt ? abAskBot.tags.prompt_core : abAskBot.tags[\"prompt_\" + that.prompt];\n\nabAskBot.masks.gptActive = true;\n\nab.log(tags.aiModel + \" bot\" + \": thinking about \" + inquiry);\n\nthisBot.botChat({message: \"thinking about \" + inquiry});\n\nif (that.prompt == \"grid\")\n{\n    inquiry = inquiry + ` POSITION: {${that.data.dimension}: true, ${that.data.dimension}X: ${that.data.dimensionX}, ${that.data.dimension}Y:${that.data.dimensionY}}.`\n}\nelse if (that.prompt == \"bot\")\n{\n    inquiry = inquiry + ` TARGET_BOT_ID: ` + links.targetBot.id;\n}\nelse if (that.prompt == \"multipleBot\")\n{\n    inquiry = inquiry + ` TARGET_BOT_IDS: ` + that.data.bots;\n}\nelse if (that.prompt == \"core\")\n{\n\n}\n\n\n//TARGET RIGHT FUNCTION\nconst answer = await abAskBot.submitRequestGPT({inquiry: inquiry, prompt: prompt, model: that.model});\n\ncreate({home: true, onCreate: `@ ${answer}`});\n//FIX\nab.log(tags.aiModel + \" bot\" + \": \" + answer);\n\nreturn;","agentReset":"@if (links.arm)\n{\n    destroy(links.arm);\n}\n\nclearTagMasks(thisBot);\n\nabRemember.masks.abBuilderIdentity = null;","aiModel":"claude-3-7-sonnet-latest","askAgent":"@if (masks.form == \"input\")\n{\n    thisBot.agentReset();\n\n    return;\n}\n\nconst menuPortal = configBot.tags.menuPortal ?? \"menu\";\n\nif (!configBot.tags.menuPortal)\n{\n    configBot.tags.menuPortal = menuPortal;\n}\n\nmasks.promptType = that.prompt;\nmasks.labelColor = \"black\";\nmasks.color = tags.strokeColor;\nmasks.dimension = menuPortal;\nmasks[menuPortal] = true;\nmasks.form = \"input\";\n\nif (that.bot && that.prompt === \"bot\")\n{\n    masks.targetBot = getLink(that.bot);\n}\n\nabRemember.masks.abBuilderIdentity = tags.aiModel;","botChat":"@const botBase = thisBot;\nconst dimension = configBot.tags.gridPortal;\nconst message = that.message;\nconst messageTime = that.time ? that.time * 1000 : 1600; \nconst messageBot = {};\n\nmessageBot.space = \"tempLocal\";\nmessageBot.transformer = botBase.id;\nmessageBot.form = \"sprite\";\nmessageBot.color = \"#000000\";\nmessageBot.label = message;\nmessageBot.labelColor = \"#ffffff\";\nmessageBot.labelSize = 1;\nmessageBot.scaleX = message.length / 5 > 10 ? 10 : message.length < 10 ? 2 : message.length / 5;\nmessageBot.scaleY = (message.length / 50) > 1 ? Math.round(message.length / 50) : 1.33;\nmessageBot.scaleZ = 0.1;\nmessageBot.orientationMode = \"billboard\";\nmessageBot[dimension] = true;\nmessageBot.dimension = dimension;\nmessageBot[dimension + \"X\"] = 0;\nmessageBot[dimension + \"Y\"] = 0;\nmessageBot[dimension + \"Z\"] = botBase.tags.scale ? botBase.tags.scale / 2 + 2 : 2;\nmessageBot.onFade = `@ await animateTag(thisBot, {\n    fromValue: {\n        formOpacity: 1,\n        labelOpacity: 1,\n        [tags.dimension + \"Z\"]: tags[tags.dimension + \"Z\"]\n    },\n    toValue: {\n        formOpacity: 0,\n        labelOpacity: 0,\n        [tags.dimension + \"Z\"]: tags[tags.dimension + \"Z\"] + 5\n    },\n    duration: ${that.duration ?? 3}\n}).catch({});\n\ndestroy(thisBot);`;\n\nconst activeMessage = create(messageBot);\n\nsetTimeout(()=> activeMessage.onFade(), messageTime);","color":"clear","label":"claude-3-7-sonnet-latest","labelColor":"gold","menuColor":"gold","menuItemStyle":"ðŸ§¬{\"border-radius\":\"8px\", \"margin-top\": \"8px\", \"border\": \"2px solid #000\", \"box-shadow\": \"3px 4px #000\", \"min-height\": \"44px\"}","onArmClick":"@const arm = that.arm;\nconst dimension = arm.tags.dimension;\nconst targetX = arm.tags[dimension + \"X\"];\nconst targetY = arm.tags[dimension + \"Y\"];\n\ntags[dimension] = true;\ntags[dimension + \"X\"] = targetX;\ntags[dimension + \"Y\"] = targetY;\n\nthisBot.agentReset();","onClick":"@thisBot.askAgent({prompt: \"core\"});","onDrag":"@os.hideChat();\n\n// if (links.remember.links.abMultipleBotFocus && that.bot.id == id)\n// {\n//     os.enableCustomDragging();\n\n//     return;\n// }\n\n\nif (tags.arm)\n{\n    await thisBot.agentReset();\n}\n\n// if (!that.bot.tags.interval)\n// {\n//     thisBot.abClick();\n// }\n\n//let state = os.getInputState(\"keyboard\", \"Shift\");\nlet arm = {};\n\narm.space = \"tempLocal\";\narm[that.dimension] = true;\narm[that.dimension + \"X\"] = tags[that.dimension + \"X\"];\narm[that.dimension + \"Y\"] = tags[that.dimension + \"Y\"];\narm.creator = thisBot.id;\narm.dimension = that.dimension ?? configBot.tags.gridPortal;\narm.scale = 0.9;\narm.scaleZ = 0.01;\narm.color = \"clear\";\narm.strokeColor = tags.strokeColor ?? tags.color;\narm.lineColor = tags.strokeColor ?? tags.color;\narm.lineTo = thisBot.id;\narm.manager = getLink(thisBot);\narm.onClick = \"@ links.manager.onArmClick({arm: thisBot});\";\narm.onDrop = `@ tags.draggable = false;\n\nif (that.to.bot)\n{\n    links.manager.masks.lineTo = that.to.bot.id;\n    links.manager.masks.lineColor = links.manager.tags.strokeColor;\n    \n    links.manager.askAgent({prompt: \"bot\", bot: that.to.bot});\n\n    destroy(thisBot);\n}\nelse\n{\n    links.manager.askAgent({prompt: \"grid\"});\n}`;\n\n// arm.onClick = `@ destroy(thisBot);\n\n// links.manager.abManifestBot({dimension: that.dimension, position:{x:tags[that.dimension + \"X\"],y:tags[that.dimension + \"Y\"]}});`;\n\n// if (state)\n// {\n//     arm.multiSelect = true;\n//     arm.form = \"sphere\";\n//     arm.color = links.remember.tags.abBaseStrokeColor;\n\n//     masks.draggable = true;\n// }\n\nlet newArm = await create(arm);\n\nmasks.arm = \"ðŸ”—\" + newArm.id;\n\nos.replaceDragBot(newArm);","onGridClick":"@thisBot.agentReset();","onSubmit":"@var requestData = that.data;\nvar activeDimension = that.dimension ?? configBot.tags.gridPortal;\n\nif (links.arm)\n{\n    const arm = links.arm;\n    const activeDimension = arm.tags.dimension\n\n    requestData = {dimension: activeDimension, dimensionX: arm.tags[activeDimension + \"X\"], dimensionY: arm.tags[activeDimension + \"Y\"]};\n}\n\nconst inquiry = that.text;\nconst prompt = tags.promptType;\n\nconst aiRequest = await thisBot.agentOnRequest({inquiry: inquiry, prompt: prompt, data: requestData, model: tags.aiModel});","strokeColor":"gold","system":"ai_toolbox.tool.model agent","onCreate":"@tags.abIgnore = true;","ai_toolbox_tools":"true","agent_bot_tool":"true","abIgnore":true}},"5de98e36-0c0f-4f2c-b43d-b334ee8ecdb6":{"id":"5de98e36-0c0f-4f2c-b43d-b334ee8ecdb6","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","home":null,"onClick":"@configBot.tags.menuPortal = \"ai_kit_bot_menu\";\r\n\r\nconst menuOptions = {\r\n    ai_kit_bot_menu: true\r\n}\r\n\r\nconst aiMenu = {\r\n    onClick: `@`,\r\n    ...menuOptions,\r\n    groupSortOrder: 1,\r\n    clearAiKitAgentBotMenu: `@destroy(this);`\r\n}\r\n\r\nconst menu = [];\r\nconst aiModels = links.remember.tags.aiModels;\r\nfor (let i = 0; i < aiModels.length; ++i) {\r\n    const groupItem = {\r\n        menuItemType: \"dropdown\",\r\n        label: aiModels[i].company,\r\n        dropdownOptions: []\r\n    }\r\n    for(let j = 0; j < aiModels[i].models.length; ++j) {\r\n        const dropdownItem = {\r\n            label: aiModels[i].models[j].model,\r\n            botGen: await getLink(thisBot),\r\n            modelData: aiModels[i].models[j],\r\n            onClick: `@links.botGen.createAIAgent(tags.modelData)`\r\n        }\r\n        groupItem.dropdownOptions.push(dropdownItem);\r\n    }\r\n\r\n    menu.push(groupItem);\r\n}\r\n\r\naiMenu[\"menuItems\"] = menu;\r\n\r\nconsole.log(\"tester\", aiMenu, aiModels)\r\n\r\nab.links.menu.abCreateMenuGroup(aiMenu);","system":"ai_toolbox.tool.agent maker","remember":"ðŸ”—e5380a6b-8b4d-4a8b-8b04-58e1eb03e5e7","homeX":null,"homeY":null,"homeZ":null,"onGridClick":"@shout(\"clearAiKitAgentBotMenu\")","createAIAgent":"@const botTags = {\r\n    abIDOrigin: null,\r\n    aiModel: that.model,\r\n    ai_toolbox: null,\r\n    label: that.model,\r\n    system: \"ai.agent.\" + that.model\r\n}\r\n\r\nconst dimension = that.eggParameters.gridInformation?.dimension ?? 'home';\r\nconst dimensionX = that.eggParameters.gridInformation?.position?.x ?? 0;\r\nconst dimensionY = that.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\nbotTags[dimension] = true;\r\nbotTags[dimension + 'X'] = thisBot.tags[dimension + 'X'];\r\nbotTags[dimension + 'Y'] = thisBot.tags[dimension + 'Y'];\r\n\r\nconst bot = await create(links.modelAgent, botTags);\r\n\r\nif (bot) {\r\n    destroy(links.modelAgent);\r\n    destroy(thisBot);\r\n}","onCreate":"@tags.abIgnore = true;\r\nthisBot.onClick();","modelAgent":"ðŸ”—7f88465f-596c-4e0c-aaad-dba81fbe710a","ai_toolbox_tools":"true","agent_bot_tool":"true","abVersion":"10.5","abIgnore":true,"form":null,"onEggHatch":"@if (that.eggParameters) {\r\n    const dimension = that.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = that.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = that.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n}","label":"make an agent"}}}}