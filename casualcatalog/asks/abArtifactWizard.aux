{"version":1,"state":{"2dcbe632-51c8-4905-9bb5-a8000df16be6":{"id":"2dcbe632-51c8-4905-9bb5-a8000df16be6","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","system":"abArtifactWizard.wizard","label":"artifact wizard","cursor":"pointer","formOpacity":"0.33","strokeColor":"#c0b3fc","labelPosition":"floatingBillboard","onClick":"@thisBot.abArtifactWizardMenuOpen({ wizardBot: thisBot, wizardDimension: that.dimension });","abVersion":"10.10","onEggHatch":"@if (that.eggParameters) {\n    const dimension = that.eggParameters.gridInformation?.dimension ?? 'home';\n    const dimensionX = that.eggParameters.gridInformation?.position?.x ?? 0;\n    const dimensionY = that.eggParameters.gridInformation?.position?.y ?? 0;\n\n    tags[dimension] = true;\n    tags[dimension + 'X'] = dimensionX;\n    tags[dimension + 'Y'] = dimensionY;\n\n    thisBot.abArtifactWizardMenuOpen({ wizardDimension: dimension });\n}\n","destroyAfterUse":"true","abIgnore":"true","labelWordWrapMode":"breakWords","abArtifactWizard":true,"color":"#AEA1FF","labelFloatingBackgroundColor":"#AEA1FF","labelColor":"#1e1b2d","remember":"ðŸ”—e5380a6b-8b4d-4a8b-8b04-58e1eb03e5e7","artifact":"ðŸ”—78e41503-c933-4f8a-817a-ba97bf8d5d27","learn":"ðŸ”—6657b865-e983-4401-9fc9-f5418d18a7f7","abArtifactWizardMenuOpen":"@const {\n    wizardDimension = ab.tags.abInst,\n} = that ?? {};\n\nshout('abArtifactWizardMenuReset');\n\nconfigBot.masks.menuPortal = 'abArtifactWizardMainMenu';\n\nconst artifactInstances: Record<string, Bot[]> = links.artifact.abGetArtifactInstances();\nconst artifactPatterns: Record<string, Bot[]> = links.artifact.abGetArtifactPatterns();\n\nconst instanceIDs = Object.keys(artifactInstances);\nconst patternNames = Object.keys(artifactPatterns);\n\nif (instanceIDs.length === 0 && patternNames.length === 0) {\n    links.utils.abLogAndToast({ message: `No artifacts found in the inst.` })\n    return;\n}\n\nconst abArtifactBaseColor = links.remember.tags.abArtifactBaseColor ?? links.artifact.tags.abArtifactBaseColorDefault;\nconst abArtifactLabelColor = links.remember.tags.abArtifactLabelColor ?? links.artifact.tags.abArtifactLabelColorDefault;\n\n/**\n * Menu portal: abArtifactWizardMainMenu\n */\n\nconst createButton = links.menu.abCreateMenuButton({\n    abArtifactWizardMainMenu: true,\n    formAddress: 'add_box',\n    label: `artifact bot`,\n    color: abArtifactBaseColor,\n    labelColor: abArtifactLabelColor,\n    wizardBot: getLink(thisBot),\n    wizardDimension,\n    abArtifactWizardMenuReset: `@destroy(thisBot)`,\n    onArtifactWizardSelection: `@\n        const abArtifactName = that.abArtifactName;\n        let abArtifactInstanceID = that.abArtifactInstanceID;\n        const abArtifactInstanceOwner = that.abArtifactInstanceOwner ?? authBot?.id ?? ab.links.remember.tags.abRecordName;\n\n        const position = getBotPosition(links.wizardBot, tags.wizardDimension);\n\n        let abArtifactBot = getBot((b) => {\n            return b.tags.abArtifactName === abArtifactName &&\n                   b.tags.abArtifactInstanceID === abArtifactInstanceID &&\n                   b.tags.abArtifactBot === true\n        })\n\n        if (abArtifactBot) {\n            // Add existing artifact bot to current dimension and position.\n            console.log('existing artifact bot used');\n            abArtifactBot.tags[tags.wizardDimension] = true;\n            abArtifactBot.tags[tags.wizardDimension + 'X'] = position.x;\n            abArtifactBot.tags[tags.wizardDimension + 'Y'] = position.y;\n            abArtifactBot.tags[tags.wizardDimension + 'Z'] = position.z;\n\n            links.wizardBot.links.artifact.abUpdateArtifactShards({ abArtifactName, abArtifactInstanceID, abArtifactInstanceOwner })\n        } else {\n            if (!abArtifactInstanceID) {\n                // Generate a new instance id and assign pattern bots to it, these pattern bots are now shards of the artifact instance.\n                abArtifactInstanceID = uuid();\n                console.log('assigning new artifact instance id:', abArtifactInstanceID);\n\n                const patterns = links.wizardBot.links.artifact.abGetArtifactPatterns({ abArtifactName });\n                const patternBots = patterns[abArtifactName];\n\n                for (const patternBot of patternBots) {\n                    patternBot.tags.abArtifactInstanceID = abArtifactInstanceID;\n                    patternBot.tags.abArtifactShardInstanceID = uuid();\n                    patternBot.tags.abArtifactInstanceOwner = abArtifactInstanceOwner;\n                }\n            }\n\n            console.log('new artifact bot created');\n            abArtifactBot = await links.wizardBot.links.artifact.abCreateArtifactBot({\n                abArtifactName,\n                abArtifactInstanceID,\n                abArtifactInstanceOwner,\n                dimension: tags.wizardDimension,\n                position,\n            });\n        }\n\n        if (abArtifactBot) {\n            if (links.wizardBot && links.wizardBot.tags.destroyAfterUse && configBot.tags.gridPortal !== 'abArtifactWizard') {\n                destroy(links.wizardBot);\n            }\n        }\n        \n        shout(\"abArtifactWizardMenuReset\");\n    `,\n    onClick: `@\n        configBot.tags.abArtifactWizardSelectionMenuTarget = getLink(thisBot);\n        configBot.masks.menuPortal = 'abArtifactWizardSelectionMenu';\n    `,\n})\n\nconst downloadButton = links.menu.abCreateMenuButton({\n    abArtifactWizardMainMenu: true,\n    formAddress: 'download',\n    label: `download artifact pattern`,\n    wizardBot: getLink(thisBot),\n    color: abArtifactBaseColor,\n    labelColor: abArtifactLabelColor,\n    abArtifactWizardMenuReset: `@destroy(thisBot)`,\n    onArtifactWizardSelection: `@\n        const { abArtifactName, abArtifactInstanceID, abArtifactInstanceOwner } = that;\n\n        const shardBots = getBots(b => b.tags.abArtifactName === abArtifactName && b.tags.abArtifactInstanceID === abArtifactInstanceID && b.space === 'shared' && !b.tags.abIgnore);\n\n        if (shardBots.length > 0) {\n            links.wizardBot.links.artifact.abDownloadArtifactPattern({ abArtifactName, shardBots });\n        } else {\n            links.wizardBot.links.utils.abLogAndToast({ message: 'Could not find any shard bots.' , logType: 'error' })\n        }\n\n        if (links.wizardBot.tags.destroyAfterUse && configBot.tags.gridPortal !== 'abArtifactWizard') {\n            destroy(links.wizardBot);\n        }\n        \n        shout(\"abArtifactWizardMenuReset\");\n    `,\n    onClick: `@\n        configBot.tags.abArtifactWizardSelectionMenuTarget = getLink(thisBot);\n        configBot.masks.menuPortal = 'abArtifactWizardSelectionMenu';\n    `,\n})\n\nconst publishButton = links.menu.abCreateMenuButton({\n    abArtifactWizardMainMenu: true,\n    formAddress: 'ios_share',\n    label: `publish artifact pattern`,\n    color: abArtifactBaseColor,\n    wizardBot: getLink(thisBot),\n    labelColor: abArtifactLabelColor,\n    abArtifactWizardMenuReset: `@destroy(thisBot)`,\n    onArtifactWizardSelection: `@\n        const { abArtifactName, abArtifactInstanceID, abArtifactInstanceOwner } = that;\n\n        configBot.tags.abArtifactWizardSelectedArtifactName = abArtifactName;\n        configBot.tags.abArtifactWizardSelectedArtifactInstanceID = abArtifactInstanceID;\n        configBot.masks.menuPortal = 'abArtifactWizardPublishMenu';\n    `,\n    onClick: `@        \n        if (!authBot) {\n            links.wizardBot.links.utils.abLogAndToast({ message: 'You must be logged in to publish an artifact pattern', logType: 'error'});\n            return;\n        }\n        \n        configBot.tags.abArtifactWizardSelectionMenuTarget = getLink(thisBot);\n        configBot.masks.menuPortal = 'abArtifactWizardSelectionMenu';\n    `,\n})\n\n/**\n * Menu portal: abArtifactWizardSelectionMenu\n */\n\nconst selectionOptions: { name: string, instanceID?: string, instanceOwner?: string}[] = [];\n\nfor (const instanceID of instanceIDs) {\n    const shardBot = artifactInstances[instanceID][0];\n\n    selectionOptions.push({ name: shardBot.tags.abArtifactName, instanceID, instanceOwner: shardBot.tags.abArtifactInstanceOwner })\n}\n\nfor (const patternName of patternNames) {\n    selectionOptions.push({ name: patternName });\n}\n\n// Sort alphabetically by name first, then by instanceID\nselectionOptions.sort((a, b) => {\n    const nameComparison = a.name.localeCompare(b.name);\n    \n    // If names are the same, compare by instanceID\n    if (nameComparison === 0) {\n        if (a.instanceID && b.instanceID) {\n            return a.instanceID.localeCompare(b.instanceID);\n        } else if (a.instanceID && !b.instanceID) {\n            return -1; // Items with instanceID come before those without\n        } else if (!a.instanceID && b.instanceID) {\n            return 1; // Items without instanceID come after those with\n        }\n        return 0; // Both don't have instanceID\n    }\n    \n    return nameComparison;\n});\n\n\nfor (const option of selectionOptions) {\n    let label = option.name;\n    if (option.instanceID) {\n        label += ` (inst id: ${option.instanceID.substring(0, 7)})`;\n    }\n\n    const optionButton = links.menu.abCreateMenuButton({\n        abArtifactWizardSelectionMenu: true,\n        label,\n        name: option.name,\n        instanceID: option.instanceID,\n        instanceOwner: option.instanceOwner,\n        color: abArtifactBaseColor,\n        labelColor: abArtifactLabelColor,\n        abArtifactWizardMenuReset: `@destroy(thisBot)`,\n        onPortalChanged: `@\n            if (that.portal !== 'menuPortal' && that.dimension !== 'abArtifactWizardSelectionMenu') {\n                return;\n            }\n\n            if (configBot.tags.abArtifactWizardSelectedArtifactName === tags.name && \n                configBot.tags.abArtifactWizardSelectedArtifactInstanceID === tags.instanceID\n            ) {\n                tags.formAddress = 'radio_button_checked';\n            } else {\n                tags.formAddress = 'radio_button_unchecked';\n            }\n        `,\n        onClick: `@\n            whisper(configBot.links.abArtifactWizardSelectionMenuTarget, 'onArtifactWizardSelection', { abArtifactName: tags.name, abArtifactInstanceID: tags.instanceID, abArtifactInstanceOwner: tags.instanceOwner });\n        `,\n    })\n}\n\n/**\n * Menu portal: abArtifactWizardPublishMenu\n */\n\nconst nameButton = links.menu.abCreateMenuButton({\n    abArtifactWizardPublishMenu: true,\n    formAddress: 'radio_button_checked',\n    publishButton: getLink(publishButton),\n    color: abArtifactBaseColor,\n    labelColor: abArtifactLabelColor,\n    abArtifactWizardMenuReset: `@destroy(thisBot)`,\n    onPortalChanged: `@\n        if (that.portal !== 'menuPortal' && that.dimension !== 'abArtifactWizardPublishMenu') {\n            return;\n        }\n        \n        if (configBot.tags.abArtifactWizardSelectedArtifactName &&\n            configBot.tags.abArtifactWizardSelectedArtifactInstanceID\n        ) {\n            tags.label = configBot.tags.abArtifactWizardSelectedArtifactName + ' (inst id: ' + configBot.tags.abArtifactWizardSelectedArtifactInstanceID.substring(0, 7) + ')';\n        } else if (configBot.tags.abArtifactWizardSelectedArtifactName) {\n            tags.label = configBot.tags.abArtifactWizardSelectedArtifactName;\n        } else {\n            tags.label = 'Select an artifact';\n        }\n    `,\n    onClick: `@\n        configBot.tags.abArtifactWizardSelectionMenuTarget = getLink(links.publishButton);\n        configBot.masks.menuPortal = 'abArtifactWizardSelectionMenu';\n    `,\n})\n\nconst studioButton = links.menu.abCreateMenuButton({\n    abArtifactWizardPublishMenu: true,\n    formAddress: 'inventory_2',\n    color: abArtifactBaseColor,\n    labelColor: abArtifactLabelColor,\n    wizardBot: getLink(thisBot),\n    abArtifactWizardMenuReset: `@destroy(thisBot)`,\n    onPortalChanged: `@\n        if (that.portal !== 'menuPortal' && that.dimension !== 'abArtifactWizardPublishMenu') {\n            return;\n        }\n\n        let foundRecordKey;\n\n        if (configBot.tags.abArtifactWizardSelectedArtifactName) {\n            const artifactBundles = links.wizardBot.links.artifact.abFindArtifactBundles({ \n                abArtifactName: configBot.tags.abArtifactWizardSelectedArtifactName,\n                abArtifactInstanceID: configBot.tags.abArtifactWizardSelectedArtifactInstanceID\n            });\n\n            for (let key in artifactBundles) {\n                const artifactBundle = artifactBundles[key];\n\n                if (artifactBundle.dependencies && artifactBundle.dependencies.length > 0) {\n                    const matchingDep = artifactBundle.dependencies.find(d => d.abID === configBot.tags.abArtifactWizardSelectedArtifactName && d.recordKey);\n\n                    if (matchingDep) {\n                        foundRecordKey = matchingDep.recordKey;\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (foundRecordKey) {\n            tags.recordKey = foundRecordKey;\n        } else {\n            tags.recordKey = authBot.id;\n        }\n    `,\n    onClick: `@\n        const input = await os.showInput(tags.recordKey, { autoSelect: true, title: 'studio record key' });\n\n        if (input) {\n            tags.recordKey = input;\n        } else {\n            tags.recordKey = authBot.id;\n        }\n    `,\n    onBotChanged: `@\n        const changedTags = that.tags;\n\n        if (changedTags.includes('recordKey')) {\n            tags.label = 'studio=' + tags.recordKey;\n        }\n    `,\n})\n\nconst submitButton = links.menu.abCreateMenuButton({\n    abArtifactWizardPublishMenu: true,\n    formAddress: 'publish',\n    color: abArtifactBaseColor,\n    labelColor: abArtifactLabelColor,\n    studioButton: getLink(studioButton),\n    wizardBot: getLink(thisBot),\n    abArtifactWizardMenuReset: `@destroy(thisBot)`,\n    onPortalChanged: `@\n        if (that.portal !== 'menuPortal' && that.dimension !== 'abArtifactWizardPublishMenu') {\n            return;\n        }\n\n        await os.sleep(0);\n\n        const name = configBot.tags.abArtifactWizardSelectedArtifactName;\n        const instanceID = configBot.tags.abArtifactWizardSelectedArtifactInstanceID;\n        const recordKey = links.studioButton.tags.recordKey;\n\n        const shardBots = getBots(b => b.tags.abArtifactName === name && b.tags.abArtifactInstanceID === instanceID && b.space === 'shared' && !b.tags.abIgnore );\n        thisBot.vars.shardBots = shardBots;\n\n        if (shardBots.length > 1) {\n            tags.label = 'Publish (' + shardBots.length + ' bots)';\n        } else if (shardBots.length === 1) {\n            tags.label = 'Publish (1 bot)';\n        } else {\n            tags.label = 'No bots to publish';\n        }\n    `,\n    onClick: `@\n        const name = configBot.tags.abArtifactWizardSelectedArtifactName;\n        const recordKey = links.studioButton.tags.recordKey;\n        const shardBots = thisBot.vars.shardBots;\n\n        try { \n            const result = await links.wizardBot.links.artifact.abPublishArtifactPattern({ abArtifactName: name, studio: recordKey, shardBots, manualPublish: true })\n\n            if (result.success) {\n                if (links.wizardBot && links.wizardBot.tags.destroyAfterUse && configBot.tags.gridPortal !== 'abArtifactWizard') {\n                    destroy(links.wizardBot);\n                }\n            }\n        } catch (e) {\n            links.wizardBot.links.utils.abLogAndToast({ message: e.message, logType: 'error' });\n        }\n\n    `\n})","abArtifactWizardMenuReset":"@configBot.masks.menuPortal = null;\nconfigBot.tags.abArtifactWizardSelectionMenuTarget = null;\nconfigBot.tags.abArtifactWizardSelectedArtifactName = null;\nconfigBot.tags.abArtifactWizardSelectedArtifactInstanceID = null;","onAnyBotsRemoved":"@const { botIDs } = that;\n\nif (botIDs.includes(thisBot.id)) {\n    thisBot.abArtifactBotMenuReset();\n}","onGridClick":"@thisBot.abArtifactWizardMenuReset();","menu":"ðŸ”—b30c6c5d-a4f7-4266-ba38-393dc95e1ecb","utils":"ðŸ”—93d965e0-d20e-4b45-8ca0-649273b7138c","abArtifactWizardX":0,"abArtifactWizardY":3,"abArtifactWizardZ":0,"abIDOrigin":"abArtifactWizard","home":null,"homeY":null,"homeX":null,"homeZ":null}}}}