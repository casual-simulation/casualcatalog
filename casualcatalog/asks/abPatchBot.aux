{"version":1,"state":{"33219dc1-1201-4f39-aba6-30ba7b707ef9":{"id":"33219dc1-1201-4f39-aba6-30ba7b707ef9","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","system":"abPatchBot.patchBot","home":null,"onClick":"@thisBot.abPatchMenuOpen();\nthisBot.animateSpin();","abPatchMenuOpen":"@thisBot.abPatchMenuReset();\n\nmasks.patchMenuOpen = true;\nconfigBot.tags.menuPortal = 'abPatchMenu';\n\nab.links.menu.abCreateMenuButton({\n    abPatchMenu: true,\n    label: 'approve patch',\n    formAddress: 'done',\n    color: tags.abPatchColor,\n    patchBot: getLink(thisBot),\n    onClick: `@\n        if (links.patchBot.tags.abPatchBotInstance) {\n            whisper(links.patchBot, 'onABPatchApproveClick');\n        } else {\n            os.toast('do nothing: this is a patch bot template');\n        }\n    `\n});\n\nab.links.menu.abCreateMenuButton({\n    abPatchMenu: true,\n    label: 'undo patch',\n    formAddress: 'undo',\n    color: tags.abPatchColor,\n    patchBot: getLink(thisBot),\n    onClick: `@\n        if (links.patchBot.tags.abPatchBotInstance) {\n            whisper(links.patchBot, 'onABPatchUndoClick');\n        } else {\n            os.toast('do nothing: this is a patch bot template');\n        }\n    `\n});\n\nab.links.menu.abCreateMenuButton({\n    abPatchMenu: true,\n    label: 'approve all patches',\n    formAddress: 'done_all',\n    color: tags.abPatchColor,\n    patchBot: getLink(thisBot),\n    onClick: `@\n        if (links.patchBot.tags.abPatchBotInstance) {\n            shout('onABPatchApproveClick');\n        } else {\n            os.toast('do nothing: this is a patch bot template');\n        }\n    `\n});\n\nab.links.menu.abCreateMenuButton({\n    abPatchMenu: true,\n    label: 'undo all patches',\n    formAddress: 'fast_rewind',\n    color: tags.abPatchColor,\n    patchBot: getLink(thisBot),\n    onClick: `@\n        if (links.patchBot.tags.abPatchBotInstance) {\n            shout('onABPatchUndoClick');\n        } else {\n            os.toast('do nothing: this is a patch bot template');\n        }\n    `\n});","abPatchMenuReset":"@masks.patchMenuOpen = null;\n\nif (configBot.tags.menuPortal === 'abPatchMenu') {\n    configBot.tags.menuPortal = null;\n}\n\nconst menuBots = getBots(b => b.tags.abPatchMenu != null);\ndestroy(menuBots);","onGridClick":"@thisBot.abPatchMenuReset();","onEggHatch":"@if (tags.debug) {\n    console.log(`[${tags.system}.${tagName}] that:`, that);\n}\n\nconst sourceEvent = that?.sourceEvent;\n\nif (sourceEvent === 'ask_gpt') {\n    const patchCode = that.eggParameters.patchCode;\n    const askInput = that.eggParameters.askInput;\n\n    tags.abIgnore = true;\n    tags.abPatchBotInstance = true;\n    tags.abPatchCode = `@${patchCode}`;\n    tags.abPatchBotIdentity = `patch ${thisBot.id.substring(0, 5)}`;\n    tags.abPatchLabel = tags.abPatchBotIdentity;\n    tags.system = `abPatchBot.${tags.abPatchBotIdentity}`;\n\n    thisBot.abPatchApply();\n}\n","formOpacity":"0.33","strokeColor":"#FFFFFF","color":"#FFFFFF","onBotAdded":"@let waitTime = 0;\n\nwhile(!globalThis.ab?.links.bot_factory) {\n    if (waitTime >= 5000) {\n        return;\n    }\n    \n    await os.sleep(250);\n    waitTime += 250;\n}\n\nmasks.ready = true;\n\nthisBot.updateBillboardLabel();","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\n    destroy(thisBot.vars.billboardLabelBot);\n    thisBot.vars.billboardLabelBot = null;\n}\n\nconst currentDimension = configBot.tags.mapPortal ?? configBot.tags.gridPortal;\nconst botInDimension = currentDimension && thisBot.tags[currentDimension] === true;\n\nif (botInDimension) {\n    thisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \n        bot: thisBot,\n        label: tags.abPatchLabel,\n        color: tags.abPatchColor,\n        dimension: currentDimension,\n        labelColor: '#000000',\n        space: 'tempLocal',\n    })\n}\n\n","onBotChanged":"@const currentDimension = configBot.tags.mapPortal ?? configBot.tags.gridPortal;\nconst needUpdateBillboardLabel = that.tags.some(t => t === 'abPatchLabel' || t === 'abPatchColor' || t === currentDimension);\n\nif (needUpdateBillboardLabel && tags.ready) {\n    thisBot.updateBillboardLabel();\n}","homeX":null,"homeY":null,"homeZ":null,"abVersion":"10.27","cursor":"pointer","abPatchBot":true,"animateSpin":"@clearAnimations(thisBot);\n\nconst dimension = configBot.tags.mapPortal ?? configBot.tags.gridPortal;\nlet currentRotZ = tags[dimension + 'RotationZ'] ?? 0;\n\nfunction getNextOrthogonalSpin(currentRotZ) {\n    const HALF_TURN = Math.PI;\n    const QUARTER_TURN = Math.PI / 2;\n\n    const minTarget = currentRotZ + HALF_TURN;\n    const nextMultiple = Math.ceil(minTarget / QUARTER_TURN) * QUARTER_TURN;\n    return nextMultiple;\n}\n\nconst targetRotZ = getNextOrthogonalSpin(currentRotZ);\n\nawait animateTag(thisBot, {\n    fromValue: {\n        [dimension + 'RotationZ']: currentRotZ,\n    },\n    toValue: {\n        [dimension + 'RotationZ']: targetRotZ,\n    },\n    easing: {\n        type: \"sinusoidal\",\n        mode: \"inout\"\n    },\n    duration: 0.5,\n    tagMaskSpace: 'tempLocal',\n}).catch(() => {});\n\nmasks[dimension + 'RotationZ'] = null;","abPatchApply":"@if (tags.abPatchApplied) {\n    return;\n}\n\nif (typeof thisBot.abPatchCode === 'function') {\n    try { \n        await thisBot.abPatchCode();\n        setTagMask(thisBot, 'abPatchApplied', true, 'shared');\n    } catch (e) {\n        ab.links.utils.abLogAndToast({ name: tags.patchLabel, message: `Something went wrong applying patch — ${ab.links.utils.getErrorMessage(e)}`, logType: 'error' });\n    }\n} else {\n    ab.links.utils.abLogAndToast({ name: tags.patchLabel, message: `Cannot apply patch — patch code is invalid.`, logType: 'error' });\n}","abPatchUndo":"@if (!tags.abPatchApplied) {\n    return;\n}\n\nconsole.warn(`[${tags.system}.${tagName}] TODO`);","abPatchColor":"#FFFFFF","abPatchLabel":"patch bot template","abPatchBotIdentity":"","onAnyBotsRemoved":"@const { botIDs } = that;\n\nif (botIDs.includes(thisBot.id)) {\n    if (thisBot.masks.patchMenuOpen) {\n        thisBot.abPatchMenuReset();\n    }\n}","onABPatchApproveClick":"@if (tags.abPatchApplied && tags.abPatchBotInstance) {\n    destroy(thisBot);\n}","onABPatchUndoClick":"@if (tags.abPatchApplied && tags.abPatchBotInstance) {\n    console.warn(`[${tags.system}.${tagName}] TODO`)\n}","debug":"true","onPortalChanged":"@const { portal, dimension } = that;\n\nif (portal === 'gridPortal' || portal === 'mapPortal') {\n    thisBot.updateBillboardLabel();\n}","abPatchBotX":null,"abPatchBotY":null,"abPatchBotZ":null}}}}