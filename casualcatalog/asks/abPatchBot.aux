{"version":1,"state":{"33219dc1-1201-4f39-aba6-30ba7b707ef9":{"id":"33219dc1-1201-4f39-aba6-30ba7b707ef9","space":"shared","tags":{"cursor":"pointer","abPatchBot":"true","creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","system":"abPatchBot.patchBot","home":true,"onClick":"@thisBot.abPatchMenuOpen();\nthisBot.animateSpin();","abPatchMenuOpen":"@thisBot.abPatchMenuReset();\n\nconfigBot.tags.menuPortal = 'abPatchMenu';\n\nab.links.menu.abCreateMenuButton({\n    abPatchMenu: true,\n    label: 'approve mod',\n    // formAddress: 'back_hand',\n    color: tags.patchColor,\n    onClick: `@\n    `\n});\n\nab.links.menu.abCreateMenuButton({\n    abPatchMenu: true,\n    label: 'undo mod',\n    // formAddress: 'back_hand',\n    color: tags.patchColor,\n    onClick: `@\n    `\n});\n\nab.links.menu.abCreateMenuButton({\n    abPatchMenu: true,\n    label: 'approve all mods',\n    // formAddress: 'back_hand',\n    color: tags.patchColor,\n    onClick: `@\n    `\n});\n\nab.links.menu.abCreateMenuButton({\n    abPatchMenu: true,\n    label: 'undo all mods',\n    // formAddress: 'back_hand',\n    color: tags.patchColor,\n    onClick: `@\n    `\n});","abPatchMenuReset":"@if (configBot.tags.menuPortal === 'abPatchMenu') {\n    configBot.tags.menuPortal = null;\n}\n\nconst menuBots = getBots(b => b.tags.abPatchMenu != null);\ndestroy(menuBots);","onGridClick":"@thisBot.abPatchMenuReset();","onEggHatch":"@console.log(`[${tags.system}.${tagName}] that:`, that);","patchColor":"#FFFFFF","formOpacity":"0.33","strokeColor":"#FFFFFF","color":"#FFFFFF","onBotAdded":"@let waitTime = 0;\n\nwhile(!globalThis.ab?.links.bot_factory) {\n    if (waitTime >= 5000) {\n        return;\n    }\n    \n    await os.sleep(250);\n    waitTime += 250;\n}\n\nmasks.ready = true;\n\nthisBot.updateBillboardLabel();","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\n    destroy(thisBot.vars.billboardLabelBot);\n    thisBot.vars.billboardLabelBot = null;\n}\n\nthisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \n    bot: thisBot, \n    label: tags.patchLabel,\n    labelSize: tags.patchLabelSize,\n    color: tags.patchColor,\n    dimension: configBot.tags.mapPortal ?? configBot.tags.gridPortal,\n    labelColor: '#000000',\n    space: 'tempLocal',\n})\n","patchLabel":"patch bot","onBotChanged":"@const needUpdateBillboardLabel = that.tags.some(t => t === 'patchLabel' || t === 'patchColor' || t === 'patchLabelSize');\n\nif (needUpdateBillboardLabel && tags.ready) {\n    console.log(`hi`);\n    thisBot.updateBillboardLabel();\n}","onCreate":"@setTagMask(thisBot, 'abIgnore', true, 'shared');","animateSpin":"@clearAnimations(thisBot);\n\nconst dimension = configBot.tags.mapPortal ?? configBot.tags.gridPortal;\nlet currentRotZ = tags[dimension + 'RotationZ'] ?? 0;\n\nfunction getNextOrthogonalSpin(currentRotZ) {\n    const HALF_TURN = Math.PI;\n    const QUARTER_TURN = Math.PI / 2;\n\n    const minTarget = currentRotZ + HALF_TURN;\n    const nextMultiple = Math.ceil(minTarget / QUARTER_TURN) * QUARTER_TURN;\n    return nextMultiple;\n}\n\nconst targetRotZ = getNextOrthogonalSpin(currentRotZ);\n\nawait animateTag(thisBot, {\n    fromValue: {\n        [dimension + 'RotationZ']: currentRotZ,\n    },\n    toValue: {\n        [dimension + 'RotationZ']: targetRotZ,\n    },\n    easing: {\n        type: \"sinusoidal\",\n        mode: \"inout\"\n    },\n    duration: 0.5,\n    tagMaskSpace: 'tempLocal',\n}).catch(() => {});\n\nmasks[dimension + 'RotationZ'] = null;","homeX":-2,"homeY":-8,"homeZ":0,"abVersion":"10.25"}}}}