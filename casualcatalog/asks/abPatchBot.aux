{"version":1,"state":{"33219dc1-1201-4f39-aba6-30ba7b707ef9":{"id":"33219dc1-1201-4f39-aba6-30ba7b707ef9","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","system":"abPatchBot.patchBot","home":true,"onClick":"@thisBot.abPatchMenuOpen();\nthisBot.animateSpin();","abPatchMenuOpen":"@thisBot.abPatchMenuReset();\n\nmasks.patchMenuOpen = true;\nconfigBot.tags.menuPortal = 'abPatchMenu';\n\nab.links.menu.abCreateMenuButton({\n    abPatchMenu: true,\n    label: 'approve patch',\n    // formAddress: 'back_hand',\n    color: tags.abPatchColor,\n    patchBot: getLink(thisBot),\n    onClick: `@\n        whisper(links.patchBot, 'onABPatchApproveClick');\n    `\n});\n\nab.links.menu.abCreateMenuButton({\n    abPatchMenu: true,\n    label: 'undo patch',\n    // formAddress: 'back_hand',\n    color: tags.abPatchColor,\n    patchBot: getLink(thisBot),\n    onClick: `@\n        whisper(links.patchBot, 'onABPatchUndoClick');\n    `\n});\n\nab.links.menu.abCreateMenuButton({\n    abPatchMenu: true,\n    label: 'approve all patches',\n    // formAddress: 'back_hand',\n    color: tags.abPatchColor,\n    patchBot: getLink(thisBot),\n    onClick: `@\n        shout('onABPatchApproveClick');\n    `\n});\n\nab.links.menu.abCreateMenuButton({\n    abPatchMenu: true,\n    label: 'undo all patches',\n    // formAddress: 'back_hand',\n    color: tags.abPatchColor,\n    patchBot: getLink(thisBot),\n    onClick: `@\n        shout('onABPatchUndoClick');\n    `\n});","abPatchMenuReset":"@masks.patchMenuOpen = null;\n\nif (configBot.tags.menuPortal === 'abPatchMenu') {\n    configBot.tags.menuPortal = null;\n}\n\nconst menuBots = getBots(b => b.tags.abPatchMenu != null);\ndestroy(menuBots);","onGridClick":"@thisBot.abPatchMenuReset();","onEggHatch":"@console.log(`[${tags.system}.${tagName}] that:`, that);\n\nconst sourceEvent = that?.sourceEvent;\n\nif (sourceEvent === 'ask_gpt') {\n    const patchCode = that.eggParameters.patchCode;\n\n    tags.abIgnore = true;\n    tags.abPatchCode = `@${patchCode}`;\n    tags.abPatchBotIdentity = `patch ${thisBot.id.substring(0, 5)}`;\n    tags.abPatchLabel = tags.abPatchBotIdentity;\n\n    thisBot.abPatchApply();\n}\n","formOpacity":"0.33","strokeColor":"#FFFFFF","color":"#FFFFFF","onBotAdded":"@let waitTime = 0;\n\nwhile(!globalThis.ab?.links.bot_factory) {\n    if (waitTime >= 5000) {\n        return;\n    }\n    \n    await os.sleep(250);\n    waitTime += 250;\n}\n\nmasks.ready = true;\n\nthisBot.updateBillboardLabel();","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\n    destroy(thisBot.vars.billboardLabelBot);\n    thisBot.vars.billboardLabelBot = null;\n}\n\nthisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \n    bot: thisBot, \n    label: tags.abPatchLabel,\n    color: tags.abPatchColor,\n    dimension: configBot.tags.mapPortal ?? configBot.tags.gridPortal,\n    labelColor: '#000000',\n    space: 'tempLocal',\n})\n","onBotChanged":"@const needUpdateBillboardLabel = that.tags.some(t => t === 'abPatchLabel' || t === 'abPatchColor');\n\nif (needUpdateBillboardLabel && tags.ready) {\n    thisBot.updateBillboardLabel();\n}","homeX":-4,"homeY":-9,"homeZ":0,"abVersion":"10.26","cursor":"pointer","abPatchBot":"true","animateSpin":"@clearAnimations(thisBot);\n\nconst dimension = configBot.tags.mapPortal ?? configBot.tags.gridPortal;\nlet currentRotZ = tags[dimension + 'RotationZ'] ?? 0;\n\nfunction getNextOrthogonalSpin(currentRotZ) {\n    const HALF_TURN = Math.PI;\n    const QUARTER_TURN = Math.PI / 2;\n\n    const minTarget = currentRotZ + HALF_TURN;\n    const nextMultiple = Math.ceil(minTarget / QUARTER_TURN) * QUARTER_TURN;\n    return nextMultiple;\n}\n\nconst targetRotZ = getNextOrthogonalSpin(currentRotZ);\n\nawait animateTag(thisBot, {\n    fromValue: {\n        [dimension + 'RotationZ']: currentRotZ,\n    },\n    toValue: {\n        [dimension + 'RotationZ']: targetRotZ,\n    },\n    easing: {\n        type: \"sinusoidal\",\n        mode: \"inout\"\n    },\n    duration: 0.5,\n    tagMaskSpace: 'tempLocal',\n}).catch(() => {});\n\nmasks[dimension + 'RotationZ'] = null;","abPatchApply":"@if (tags.abPatchApplied) {\n    return;\n}\n\nif (typeof thisBot.abPatchCode === 'function') {\n    try { \n        await thisBot.abPatchCode();\n        setTagMask(thisBot, 'abPatchApplied', true, 'shared');\n    } catch (e) {\n        ab.links.utils.abLogAndToast({ name: tags.patchLabel, message: `Something went wrong applying patch — ${ab.links.utils.getErrorMessage(e)}`, logType: 'error' });\n    }\n} else {\n    ab.links.utils.abLogAndToast({ name: tags.patchLabel, message: `Cannot apply patch — patch code is invalid.`, logType: 'error' });\n}","abPatchUndo":"@if (!tags.abPatchApplied) {\n    return;\n}\n\nconsole.warn(`[${tags.system}.${tagName}] TODO`);","abPatchColor":"#FFFFFF","abPatchLabel":"patch bot","abPatchBotIdentity":"","onAnyBotsRemoved":"@const { botIDs } = that;\n\nif (botIDs.includes(thisBot.id)) {\n    if (thisBot.masks.patchMenuOpen) {\n        thisBot.abPatchMenuReset();\n    }\n}","onABPatchApproveClick":"@if (tags.abPatchApplied) {\n    destroy(thisBot);\n}","onABPatchUndoClick":"@if (tags.abPatchApplied) {\n    console.warn(`[${tags.system}.${tagName}] TODO`)\n}"}}}}