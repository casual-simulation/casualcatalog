{"version":1,"state":{"e3d7d64e-6f10-4f74-988a-8dfddffc8a8b":{"id":"e3d7d64e-6f10-4f74-988a-8dfddffc8a8b","space":"shared","tags":{"color":"#00D9CD","form":"hex","homeSortOrder":0,"pointable":"false","scale":"0.5","scaleZ":"0.2","transformer":"ececcea8-aec0-423a-ab45-a9934b425e65","system":"arWebSlinger.hex","abVersion":"10.6","abArtifactName":"arWebSlinger","onABStripArtifactInstanceDataFromBotData":"@console.log(`[${tags.system}.${tagName}]`, JSON.parse(JSON.stringify(that)));\n\nconst { data } = that;\n\nconst dimension = data.tags.dimension;\n\ndelete data.tags.dimension\ndelete data.tags[dimension];\ndelete data.tags[dimension + 'X'];\ndelete data.tags[dimension + 'Y'];\ndelete data.tags[dimension + 'Z'];\ndelete data.tags[dimension + 'RotationX'];","onABArtifactReconstitute":"@const { data } = that;\n\nif (data.eggParameters) {\n    if (data.eggParameters.gridInformation) {\n        const dimension = data.eggParameters.gridInformation.dimension ?? 'home';\n\n        tags.dimension = dimension;\n        tags[dimension] = true;\n        tags[dimension + 'X'] = 0;\n        tags[dimension + 'Z'] = -0.5;\n        tags[dimension + 'RotationX'] = 0.785398;\n    }\n}\n\nif (data.hexDimension) {\n    tags.dimension = data.hexDimension;\n    tags[data.hexDimension] = true;\n    tags[data.hexDimension + 'X'] = data.hexDimensionX;\n    tags[data.hexDimension + 'Y'] = data.hexDimensionY;\n    tags[data.hexDimension + 'Z'] = data.hexDimensionZ;\n}","onABArtifactCollectShards":"@const shard: ABArtifactShard = {\n    data: {\n        hexDimension: tags.dimension,\n        hexDimensionX: tags[tags.dimension + 'X'],\n        hexDimensionY: tags[tags.dimension + 'Y'],\n        hexDimensionZ: tags[tags.dimension + 'Z'],\n    },\n    dependencies: [\n        { askID: 'arWebSlinger' }\n    ]\n}\n\nreturn shard;","arWebSlinger":"true"}},"ececcea8-aec0-423a-ab45-a9934b425e65":{"id":"ececcea8-aec0-423a-ab45-a9934b425e65","space":"shared","tags":{"form":"sphere","formOpacity":"0.5","listening":true,"onAnyBotsAdded":"@const xrEnabled = configBot.tags.arEnabled || configBot.tags.vrEnabled;\n\nif (!xrEnabled) {\n    return;\n}\n\nconst menuPortal = configBot.tags.menuPortal;\nconst allBots = that.bots;\n\nfor (let i = 0; i < allBots.length; i++) {\n    const activeBot = allBots[i];\n\n    if (activeBot.tags[menuPortal] == true) {\n        thisBot.wrist_addItem(activeBot);\n    }\n}","onClick":"@thisBot.arWebSlingerMenuOpen();","onExitClick":"@if (configBot.tags.arEnabled) {\n    os.disableAR();\n} else if (configBot.tags.vrEnabled) {\n    os.disableVR();\n}","scale":"1.5","wristManager":"true","wrist_addItem":"@const targetBot = that;\nconst wristPortal = configBot.tags.leftWristPortal;\nconst otherWristBots = getBots((b) => {\n    return b.tags[wristPortal] === true &&\n        b.links.wristManager !== thisBot\n})\n\notherWristBots.push(targetBot);\n\nconst actualRootCheck = Math.sqrt(otherWristBots.length) % 1 === 0;\nconst baseRoot = Math.ceil(Math.sqrt(otherWristBots.length));\n\nlet targetColumns = baseRoot;\n\nif (actualRootCheck) {\n    targetColumns = Math.sqrt(otherWristBots.length);\n}\n\nlet botNum = 0;\n\nfullLoop:\nfor (let j = 0; j < targetColumns; j++) {\n    const rowNum = j;\n\n    for (let k = 0; k < targetColumns; k++) {\n        const columnNum = k;\n        const currentBot = otherWristBots[botNum];\n\n        if (!currentBot) {\n            break fullLoop;\n        }\n        else {\n            botNum++;\n        }\n\n        currentBot.masks[wristPortal + \"X\"] = (columnNum * 2) - 2;\n        currentBot.masks[wristPortal + \"Y\"] = (rowNum * -2) + 2;\n        currentBot.masks[wristPortal] = true;\n        //currentBot.masks.labelPosition = \"floatingBillboard\";\n    }\n}","system":"arWebSlinger.manager","abVersion":"10.6","abArtifactName":"arWebSlinger","onABArtifactCollectShards":"@const shard: ABArtifactShard = {\n    data: {\n        managerDimension: tags.dimension,\n        managerDimensionX: tags[tags.dimension + 'X'],\n        managerDimensionY: tags[tags.dimension + 'Y'],\n        managerDimensionZ: tags[tags.dimension + 'Z'],\n    },\n    dependencies: [\n        { askID: 'arWebSlinger' }\n    ]\n}\n\nreturn shard;","onABArtifactReconstitute":"@const data = that.data;\n\nif (data.eggParameters) {\n    if (data.eggParameters.gridInformation) {\n        const dimension = data.eggParameters.gridInformation.dimension ?? 'home';\n        const dimensionX = data.eggParameters.gridInformation.position?.x ?? 0;\n        const dimensionY = data.eggParameters.gridInformation.position?.y ?? 0;\n\n        tags.dimension = dimension;\n        tags[dimension] = true;\n        tags[dimension + 'X'] = dimensionX;\n        tags[dimension + 'Y'] = dimensionY;\n    }\n}\n\nif (data.managerDimension) {\n    tags.dimension = data.managerDimension;\n    tags[data.managerDimension] = true;\n    tags[data.managerDimension + 'X'] = data.managerDimensionX;\n    tags[data.managerDimension + 'Y'] = data.managerDimensionY;\n    tags[data.managerDimension + 'Z'] = data.managerDimensionZ;\n}","onABStripArtifactInstanceDataFromBotData":"@console.log(`[${tags.system}.${tagName}]`, JSON.parse(JSON.stringify(that)));\n\nconst { data } = that;\n\nconst dimension = data.tags.dimension;\n\ndelete data.tags.dimension;\ndelete data.tags[dimension];\ndelete data.tags[dimension + 'X'];\ndelete data.tags[dimension + 'Y'];\ndelete data.tags[dimension + 'Z'];","hex":"ðŸ”—e3d7d64e-6f10-4f74-988a-8dfddffc8a8b","onEnterAR":"@configBot.tags.arEnabled = true;\nthisBot.xrSetup();","onExitAR":"@configBot.tags.arEnabled = false;\nthisBot.xrTeardown();","onGridClick":"@thisBot.arWebSlingerMenuReset();","arWebSlinger":"true","arWebSlingerX":"-3","arWebSlingerY":"3","arWebSlingerMenuOpen":"@shout('arWebSlingerMenuReset');\n\nconfigBot.masks.menuPortal = 'arWebSlingerMenu';\n\nconst device = os.device();\n\nconst DEBUG_DISABLE_CHECKS = false;\n\nif (device.supportsAR || device.supportsVR || DEBUG_DISABLE_CHECKS) {\n    if (device.supportsAR || DEBUG_DISABLE_CHECKS) {\n        const arButton = ab.links.menu.abCreateMenuButton({\n            arWebSlingerMenu: true,\n            label: 'enter ar',\n            arWebSlingerMenuReset: `@destroy(thisBot)`,\n            onClick: `@\n                os.enableAR();\n            `\n        })\n    }\n\n    if (device.supportsVR || DEBUG_DISABLE_CHECKS) {\n        const vrButton = ab.links.menu.abCreateMenuButton({\n            arWebSlingerMenu: true,\n            label: 'enter vr',\n            arWebSlingerMenuReset: `@destroy(thisBot)`,\n            onClick: `@\n                os.enableVR();\n            `\n        })\n    }\n} else {\n    // Device does not support WebXR.\n    ab.links.utils.abLogAndToast({ message: 'WebXR is not available on this device.'});\n}\n","arWebSlingerMenuReset":"@configBot.masks.menuPortal = null;","cursor":"pointer","onEnterVR":"@configBot.tags.vrEnabled = true;\nthisBot.xrSetup();","onExitVR":"@configBot.tags.vrEnabled = false;\nthisBot.xrTeardown();","onEnterXR":null,"onImmersiveModeEntered":null,"onImmersiveModeExit":null,"onImmseriveEnter":null,"onImmersiveExit":null,"setupXR":null,"xrSetup":"@configBot.masks.leftWristPortal = \"arWebSlinger\";\n\nmasks.mapPortalBeforeAR = configBot.tags.mapPortal;\n\n// Need to move out of the mapPortal if we are in it.\nif (configBot.tags.mapPortal) {\n    configBot.tags.mapPortal = null;\n\n    if (!configBot.tags.gridPortal) {\n        configBot.tags.gridPortal = masks.mapPortalBeforeAR;\n    }\n}\n\nmasks.arWebSlinger = true;\nmasks.onClick = `@ thisBot.onExitClick();`;\nmasks.label = \"X\";\nmasks.form = null;\nmasks.formOpacity = 1;\nmasks.draggable = false;\nmasks.color = \"clear\";\nmasks.scaleZ = 0.1;\nmasks.labelColor = \"#FFFFFF\";\nmasks.onPointerEnter = \"@ masks.scale = 1.1;\";\nmasks.onPointerExit = \"@ masks.scale = null;\";\n\nconst hexBot = getBot(\"transformer\", thisBot.id);\nhexBot.masks.color = \"clear\";","xrTeardown":"@if (masks.mapPortalBeforeAR) {\n    configBot.tags.mapPortal = masks.mapPortalBeforeAR;\n}\n\nclearTagMasks(thisBot);\n\nconfigBot.masks.leftWristPortal = null;\n\nconst hexBot = getBot(\"transformer\", thisBot.id);\nclearTagMasks(hexBot);","onAnyBotsRemoved":"@const { botIDs } = that;\n\nif (botIDs.includes(thisBot.id)) {\n    thisBot.abWebSlingerMenuReset();\n}"}}}}