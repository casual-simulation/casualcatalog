{"version":1,"state":{"96364161-483c-4cbb-9ac3-0774f946af1a":{"id":"96364161-483c-4cbb-9ac3-0774f946af1a","space":"shared","tags":{"system":"channel_toolbox.tools.channelConfigurator","onClick":"@thisBot.showChannelSetupMenu();","color":"#FCC400","cursor":"pointer","abVersion":"10.10","abIDOrigin":"channelConfigurator","onAnyBotsRemoved":"@const { botIDs } = that;\r\n\r\nif (botIDs.includes(thisBot.id)) {\r\n    shout(\"clearChannelSetupMenu\");\r\n}","onBotAdded":"@let waitTime = 0;\r\n\r\nwhile(!globalThis.ab?.links.bot_factory) {\r\n    if (waitTime >= 5000) {\r\n        return;\r\n    }\r\n    \r\n    await os.sleep(250);\r\n    waitTime += 250;\r\n}\r\n\r\nmasks.ready = true;\r\n\r\nthisBot.updateBillboardLabel();","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\r\n    destroy(thisBot.vars.billboardLabelBot);\r\n    thisBot.vars.billboardLabelBot = null;\r\n}\r\n\r\nthisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \r\n    bot: thisBot, \r\n    label: tags.channelSetupLabel,\r\n    color: tags.channelSetupLabelFloatingBackgroundColor,\r\n    dimension: configBot.tags.mapPortal ?? configBot.tags.gridPortal ?? 'home',\r\n    // botLabelMargin: 0,\r\n    labelColor: tags.channelSetupLabelColor,\r\n    space: 'tempLocal',\r\n})","channelSetupLabelFloatingBackgroundColor":"#FCC400","channelSetupLabelColor":"#292000","showChannelSetupMenu":"@shout('clearChannelSetupMenu');\r\n\r\nconfigBot.masks.menuPortal = 'channelSetupMenu';\r\n\r\nconst menuTags = {\r\n    clearChannelSetupMenu: `@destroy(thisBot);`,\r\n    channelSetupMenu: true,\r\n    channelConfigurator: getLink(thisBot)\r\n}\r\n\r\nconst channelNameButton = {\r\n    ...menuTags,\r\n    label: \"channel name: \" + (tags.chosenChannelName || ''),\r\n    onClick: `@\r\n        const instName = await os.showInput(links.channelConfigurator.tags.chosenChannelName || \"\", {\r\n            title: 'choose a name for your channel'\r\n        });\r\n\r\n        links.channelConfigurator.tags.chosenChannelName = instName;\r\n        links.channelConfigurator.tags.channelSetupLabel = instName;\r\n        links.channelConfigurator.updateBillboardLabel();\r\n        links.channelConfigurator.showChannelSetupMenu();\r\n    `,\r\n    channelSetupMenuSortOrder: 1\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(channelNameButton);\r\n\r\nconst biosButton = {\r\n    ...menuTags,\r\n    label: \"inst type: \" + (tags.chosenBIOS || ''),\r\n    dropdownSortOrder: 2,\r\n    dropdownOptions: [\r\n        {\r\n            label: \"free\",\r\n            ...menuTags,\r\n            onClick: `@\r\n                links.channelConfigurator.tags.chosenBIOS = \"free\";\r\n                links.channelConfigurator.showChannelSetupMenu();\r\n            `\r\n        },\r\n        {\r\n            label: \"studio\",\r\n            ...menuTags,\r\n            onClick: `@\r\n                links.channelConfigurator.tags.chosenBIOS = \"studio\";\r\n                links.channelConfigurator.showChannelSetupMenu();\r\n            `\r\n        },\r\n        {\r\n            label: \"local\",\r\n            ...menuTags,\r\n            onClick: `@\r\n                links.channelConfigurator.tags.chosenBIOS = \"local\";\r\n                links.channelConfigurator.showChannelSetupMenu();\r\n            `\r\n        }\r\n    ]\r\n}\r\n\r\nab.links.menu.abCreateMenuDropdown(biosButton);\r\n\r\n\r\nconst instNameButton = {\r\n    ...menuTags,\r\n    label: \"inst name: \" + (tags.chosenInstName || ''),\r\n    onClick: `@\r\n        const instName = await os.showInput(links.channelConfigurator.tags.chosenInstName || \"\", {\r\n            title: 'choose an inst name'\r\n        });\r\n\r\n        links.channelConfigurator.tags.chosenInstName = instName;\r\n        links.channelConfigurator.showChannelSetupMenu();\r\n    `,\r\n    channelSetupMenuSortOrder: 3\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(instNameButton);\r\n\r\n\r\nconst patternButton = {\r\n    ...menuTags,\r\n    label: \"pattern: \" + (tags.chosenPattern || \"\"),\r\n    onClick: `@\r\n        const patternName = await os.showInput(links.channelConfigurator.tags.chosenPattern || \"\", {\r\n            title: 'choose a pattern for this channel'\r\n        });\r\n\r\n        links.channelConfigurator.tags.chosenPattern = patternName;\r\n        links.channelConfigurator.showChannelSetupMenu();\r\n    `,\r\n    channelSetupMenuSortOrder: 4\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(patternButton);\r\n\r\nconst patternStudioButton = {\r\n    ...menuTags,\r\n    label: \"pattern studio: \" + (tags.chosenPatternStudio || \"\"),\r\n    onClick: `@\r\n        const patternName = await os.showInput(links.channelConfigurator.tags.chosenPatternStudio || \"\", {\r\n            title: 'what studio is this pattern in?'\r\n        });\r\n\r\n        links.channelConfigurator.tags.chosenPatternStudio = patternName;\r\n        links.channelConfigurator.showChannelSetupMenu();\r\n    `,\r\n    channelSetupMenuSortOrder: 5\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(patternStudioButton);\r\n\r\nconst editOnChannelButton = {\r\n    ...menuTags,\r\n    label: \"edit onChannelLoaded\",\r\n    formAddress: 'edit',\r\n    onClick: `@\r\n        configBot.tags.tagPortal = links.channelConfigurator.id + \".channel_onChannelLoaded\";\r\n    `,\r\n    channelSetupMenuSortOrder: 6\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(editOnChannelButton);\r\n\r\nconst createButton = {\r\n    ...menuTags,\r\n    label: \"publish channel to record\",\r\n    formAddress: 'publish',\r\n    onClick: `@\r\n        if (links.channelConfigurator.tags.chosenPattern && links.channelConfigurator.tags.chosenChannelName) {\r\n            links.channelConfigurator.createChannel();\r\n        } else {\r\n            os.toast(\"You must provide a channel name and pattern\");\r\n        }\r\n        \r\n    `,\r\n    channelSetupMenuSortOrder: 10,\r\n    \r\n}\r\n\r\n//PUBLISH ASK\r\nconst pubButton = {\r\n    ...menuTags,\r\n    label: \"publish channel as ask\",\r\n    formAddress: 'call_made',\r\n    onClick: `@\r\n        if (!links.channelConfigurator.tags.chosenPattern || !links.channelConfigurator.tags.chosenChannelName) {\r\n            os.toast(\"You must provide a channel name and pattern\");\r\n            links.channelConfigurator.showChannelSetupMenu();\r\n            return;\r\n        }\r\n        const confirm = await os.showConfirm({\r\n            title: \"confirm request\",\r\n            content: \"request \" + links.channelConfigurator.tags.chosenChannelName + \" to be published as a channel?\",\r\n            confirmText: \"request\",\r\n            cancelText: \"cancel\"\r\n        })\r\n        if (confirm) {\r\n            //request ask\r\n        }\r\n        links.channelConfigurator.showChannelSetupMenu();\r\n    `,\r\n    channelSetupMenuSortOrder: 11,\r\n}\r\n\r\n//TEST\r\nconst testButton = {\r\n    ...menuTags,\r\n    label: \"create test\",\r\n    formAddress: 'science',\r\n    onClick: `@\r\n        if (!links.channelConfigurator.tags.chosenPattern || !links.channelConfigurator.tags.chosenChannelName) {\r\n            os.toast(\"You must provide a channel name and pattern\");\r\n            links.channelConfigurator.showChannelSetupMenu();\r\n            return;\r\n        }\r\n        links.channelConfigurator.createTest();\r\n        shout(\"clearChannelSetupMenu\");\r\n    `,\r\n    channelSetupMenuSortOrder: 12,\r\n}\r\n\r\nif (!tags.chosenPattern || !tags.chosenChannelName) {\r\n    createButton.menuItemStyle = {\r\n        filter: `brightness(50%)`\r\n    }\r\n    pubButton.menuItemStyle = {\r\n        filter: `brightness(50%)`\r\n    }\r\n\r\n    testButton.menuItemStyle = {\r\n        filter: `brightness(50%)`\r\n    }\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(createButton);\r\nab.links.menu.abCreateMenuButton(pubButton);\r\nab.links.menu.abCreateMenuButton(testButton);\r\n","strokeColor":"#806401","onGridClick":"@shout(\"clearChannelSetupMenu\");","clearChannelSetupMenu":"@configBot.masks.menuPortal = null;","createChannel":"@shout('clearChannelSetupMenu');\r\n\r\nlet bios = tags.chosenBIOS;\r\nlet instName = tags.chosenInstName;\r\nlet pattern = tags.chosenPattern;\r\nlet patternStudio = tags.chosenPatternStudio ?? authBot.id;\r\nlet channelName = tags.chosenChannelName;\r\n\r\n//Create URL\r\nconst currentURL = new URL(configBot.tags.url);\r\nconst origin = currentURL.origin;\r\n\r\nlet newURL = new URL(origin);\r\n\r\nif (abRemember.tags.allowChannels) {\r\n    newURL.searchParams.append(\"channel\", channelName);\r\n}\r\n\r\nif (configBot.tags.comId) {\r\n    newURL.searchParams.append(\"comId\", configBot.tags.comId);\r\n}\r\n\r\ntags.channelURL = newURL.href;\r\n\r\n//create egg\r\nconst abArtifactShard = {\r\n    data: {\r\n        bios,\r\n        instName,\r\n        defaultPattern: pattern,\r\n        defaultPatternStudio: patternStudio,\r\n        channelName,\r\n        onChannelLoaded: tags.channel_onChannelLoaded\r\n    },\r\n    dependencies: [\r\n        {\r\n            askID: 'channel'\r\n        }\r\n    ]\r\n};\r\n                \r\nconst channelEgg = await ab.links.artifact.abCreateArtifactPromiseBot({\r\n                    abArtifactName: 'channel',\r\n                    abArtifactInstanceID: uuid(),\r\n                    abArtifactShard,\r\n                });\r\n\r\nconsole.log(`${tags.system}.${tagName}]: channel promise bot`, channelEgg);\r\n\r\n//Publish to studio\r\nif (!authBot) {\r\n    console.log(`${tags.system}.${tagName}]: no authbot`);\r\n    await os.requestAuthBotInBackground();\r\n}\r\n\r\nif (!authBot) {\r\n    console.log(`${tags.system}.${tagName}]: User not logged in.`);\r\n    destroy(channelEgg);\r\n    return;\r\n}\r\n\r\nconst studio = configBot.tags.studio ?? authBot.id;\r\nconfigBot.tags.selected_studioID = studio;\r\n\r\nconst publishAttempt = await ab.links.store.abPublishAB({ab: channelName, target: channelEgg, sourceEvent: 'channel_egg_publish'});\r\n\r\nif (tags.debug) {\r\n    console.log(`[${tags.system}.${tagName}] saveData publishAttempt 1:`, publishAttempt);\r\n}\r\n\r\nif (!publishAttempt.success) {\r\n    const permissions = await os.grantInstAdminPermission(studio);\r\n\r\n    if (tags.debug) {\r\n        console.log(`[${tags.system}.${tagName}] saveData permissions:`, permissions);\r\n    }\r\n\r\n    const secondPublishAttempt = await ab.links.store.abPublishAB({ab: channelName, target: channelEgg, sourceEvent: 'channel_egg_publish'});\r\n        \r\n    if (tags.debug) {\r\n        console.log(`[${tags.system}.${tagName}]  saveData publishAttempt 2`, secondPublishAttempt);\r\n    }\r\n\r\n    if (!secondPublishAttempt.success){\r\n        if (tags.debug) {\r\n            console.log(`[${tags.system}.${tagName}] Could not publish`, secondPublishAttempt);\r\n        }\r\n        os.toast(\"could not publish\");\r\n    } else {\r\n        os.toast(\"Publishing successful\");\r\n        ab.links.manifestation.abSetAwake({ awake: true });\r\n    }\r\n} else {\r\n    os.toast(\"Publishing successful\");\r\n}\r\n\r\n//delete egg\r\ndestroy(channelEgg);\r\n\r\nshout(\"abMenuRefresh\");","homeWorldBot":"true","channelConfigurator":"true","template_onChannelLoaded":"@//bios and inst handlers\r\nconst currentURL = new URL(configBot.tags.url);\r\nconst origin = currentURL.origin;\r\n\r\nlet newURL = new URL(origin);\r\n\r\nif (configBot.tags.comId) {\r\n    newURL.searchParams.append(\"comId\", configBot.tags.comId);\r\n}\r\n\r\nnewURL.searchParams.append(\"abStayAwake\", true);\r\n\r\nif (tags.bios == 'studio') {\r\n    if (tags.instName) {\r\n        newURL.searchParams.append(\"owner\", tags.defaultPatternStudio ?? 'player');\r\n        newURL.searchParams.append(\"inst\", tags.instName);\r\n        newURL.searchParams.append(\"gridPortal\", 'home');\r\n    } else {\r\n        newURL.searchParams.append(\"bios\", 'studio');\r\n    }\r\n} \r\nelse if (tags.bios == 'local') {\r\n    if (tags.instName) {\r\n        newURL.searchParams.append(\"staticInst\", tags.instName);\r\n        newURL.searchParams.append(\"gridPortal\", 'home');\r\n    } else {\r\n        newURL.searchParams.append(\"bios\", 'local');\r\n    }\r\n} \r\nelse if (tags.bios == 'free') {\r\n    if (tags.instName) {\r\n        newURL.searchParams.append(\"owner\", 'public');\r\n        newURL.searchParams.append(\"inst\", tags.instName);\r\n        newURL.searchParams.append(\"gridPortal\", 'home'); \r\n    } else {\r\n        newURL.searchParams.append(\"bios\", 'free');\r\n    }\r\n}\r\n\r\n//Put code here that determines the conditions in which a pattern gets loaded\r\nif (tags.defaultPattern) {\r\n    newURL.searchParams.append(\"pattern\", tags.defaultPattern);\r\n}\r\n\r\nif (tags.defaultPatternStudio) {\r\n    newURL.searchParams.append(\"studio\", tags.defaultPatternStudio);\r\n}\r\n\r\nos.goToURL(newURL.href);","channelURL":"https://dev.auxplayer.com/?channel=erTestChannel","onABArtifactCollectShards":"@const shard: ABArtifactShard = {\r\n    data: {\r\n        bios: tags.chosenBIOS,\r\n        instName: tags.chosenInstName,\r\n        defaultPattern: tags.chosenPattern,\r\n        defaultPatternStudio: tags.chosenPatternStudio,\r\n        channelName: tags.chosenChannelName,\r\n        onChannelLoaded: tags.channel_onChannelLoaded,\r\n        channelSetupLabel: tags.channelSetupLabel,\r\n        dimensionData: {\r\n            [ab.links.remember.tags.abActiveDimension]: tags[ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension + 'X']: tags[ab.links.remember.tags.abActiveDimension + 'X'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Y']: tags[ab.links.remember.tags.abActiveDimension + 'Y'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Z']: tags[ab.links.remember.tags.abActiveDimension + 'Z'],\r\n        }\r\n    },\r\n    dependencies: [\r\n        {\r\n            askID: 'channelConfigurator'\r\n        }\r\n    ]\r\n}\r\n\r\nreturn shard;","onABArtifactReconstitute":"@const data = that.data;\r\n\r\ntags.chosenBIOS = data.bios;\r\ntags.chosenInstName = data.instName;\r\ntags.chosenPattern = data.defaultPattern;\r\ntags.chosenPatternStudio = data.defaultPatternStudio;\r\ntags.chosenChannelName = data.channelName;\r\ntags.channel_onChannelLoaded = data.onChannelLoaded ?? tags.template_onChannelLoaded;\r\ntags.channelSetupLabel = data.channelSetupLabel ?? \"configure channel\";\r\n\r\nif (data.dimensionData) {\r\n    for (const tagName in data.dimensionData) {\r\n        tags[tagName] = data.dimensionData[tagName];\r\n    }\r\n}\r\n\r\nif (data.eggParameters) {\r\n    const dimension = data.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = data.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = data.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags.dimension = dimension;\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n\r\n    tags.chosenBIOS = 'free';\r\n    tags.channel_onChannelLoaded = tags.template_onChannelLoaded;\r\n    tags.channelSetupLabel = \"configure channel\";\r\n    thisBot.showChannelSetupMenu();\r\n}\r\n\r\nthisBot.updateBillboardLabel();","onABStripArtifactInstanceDataFromBotData":"@const { data } = that;\r\n\r\ndelete data.tags.chosenBIOS;\r\ndelete data.tags.chosenPattern;\r\ndelete data.tags.chosenPatternStudio;\r\ndelete data.tags.chosenInstName;\r\ndelete data.tags.chosenChannelName;\r\ndelete data.tags.channel_onChannelLoaded;\r\ndelete data.tags.channelSetupLabel;\r\ndelete data.tags[data.tags.dimension];\r\ndelete data.tags[data.tags.dimension + 'X'];\r\ndelete data.tags[data.tags.dimension + 'Y'];\r\ndelete data.tags[data.tags.dimension + 'Z'];\r\ndelete data.tags.dimension;","abArtifactName":"channelConfigurator","artifact":"🔗78e41503-c933-4f8a-817a-ba97bf8d5d27","createTest":"@const dimension = configBot.tags.mapPortal ? \"map\" : \"grid\";\r\n\r\nlet gridInfo;\r\nif (dimension == \"map\") {\r\n    gridInfo = {    \r\n        \"dimension\":tags.dimension,\r\n        \"position\":\r\n            {\r\n                \"x\":tags[tags.dimension + \"X\"] + ((Math.floor(Math.random() * 5) + 2) / 10000),\r\n                \"y\":tags[tags.dimension + \"Y\"] + ((Math.floor(Math.random() * 5) + 2) / 10000)\r\n            }\r\n    }\r\n} else {\r\n    gridInfo = {\r\n        \"dimension\":tags.dimension,\r\n        \"position\":\r\n            {\r\n                \"x\":tags[tags.dimension + \"X\"] + Math.floor(Math.random() * 5) + 2,\r\n                \"y\":tags[tags.dimension + \"Y\"] + Math.floor(Math.random() * 5) + 2\r\n            }\r\n    }\r\n}\r\n\r\nab.links.search.onLookupAskID({\r\n    askID: \"instCreatorWizard\",\r\n    sourceEvent: 'tool',\r\n    eggParameters: {\r\n        gridInformation: gridInfo,\r\n        initializationInfo: {\r\n            pattern: null,\r\n            studio: null,\r\n            linkTo: thisBot.id,\r\n            channel: tags.chosenChannelName,\r\n            bios: 'local',\r\n            instName: 'channel-redirect',\r\n            label: tags.chosenChannelName,\r\n            completeOnLoad: true\r\n        }\r\n    },\r\n});"}}}}