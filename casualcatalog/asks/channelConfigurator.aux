{"version":1,"state":{"80bc5428-14dc-4709-92b6-056fbb0bf624":{"id":"80bc5428-14dc-4709-92b6-056fbb0bf624","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","system":"channel_toolbox.tools.channelConfigurator","onClick":"@thisBot.showChannelSetupMenu();","label":null,"color":"#FCC400","cursor":"pointer","onEggHatch":"@if (that.eggParameters) {\n    const dimension = that.eggParameters.gridInformation?.dimension ?? 'home';\n    const dimensionX = that.eggParameters.gridInformation?.position?.x ?? 0;\n    const dimensionY = that.eggParameters.gridInformation?.position?.y ?? 0;\n\n    tags[dimension] = true;\n    tags[dimension + 'X'] = dimensionX;\n    tags[dimension + 'Y'] = dimensionY;\n\n    tags.chosenBIOS = null;\n    tags.chosenInst = null;\n    tags.chosenPattern = null;\n    tags.chosenChannelName = null;\n    tags.chosenPatternStudio = null;\n    tags.channel_onChannelLoaded = tags.template_onChannelLoaded;\n\n    tags.chosenBIOS = public;\n    thisBot.showChannelSetupMenu();\n}","abHelloWorld":null,"abVersion":"10.9","abIDOrigin":"abHelloWorld","home":true,"homeX":-5,"homeY":-7,"onAnyBotsRemoved":"@const { botIDs } = that;\r\n\r\nif (botIDs.includes(thisBot.id)) {\r\n    shout(\"clearChannelSetupMenu\");\r\n}","onBotAdded":"@let waitTime = 0;\r\n\r\nwhile(!globalThis.ab?.links.bot_factory) {\r\n    if (waitTime >= 5000) {\r\n        return;\r\n    }\r\n    \r\n    await os.sleep(250);\r\n    waitTime += 250;\r\n}\r\n\r\nmasks.ready = true;\r\n\r\nthisBot.updateBillboardLabel();","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\r\n    destroy(thisBot.vars.billboardLabelBot);\r\n    thisBot.vars.billboardLabelBot = null;\r\n}\r\n\r\nthisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \r\n    bot: thisBot, \r\n    label: tags.channelSetupLabel,\r\n    color: tags.channelSetupLabelFloatingBackgroundColor,\r\n    dimension: configBot.tags.mapPortal ?? configBot.tags.gridPortal ?? 'home',\r\n    // botLabelMargin: 0,\r\n    labelColor: tags.channelSetupLabelColor,\r\n    space: 'tempLocal',\r\n})","channelSetupLabel":"configure channel","channelSetupLabelFloatingBackgroundColor":"#FCC400","channelSetupLabelColor":"#292000","showChannelSetupMenu":"@shout('clearChannelSetupMenu');\r\n\r\nconfigBot.masks.menuPortal = 'channelSetupMenu';\r\n\r\nconst menuTags = {\r\n    clearChannelSetupMenu: `@destroy(thisBot);`,\r\n    channelSetupMenu: true,\r\n    channelConfigurator: getLink(thisBot)\r\n}\r\n\r\nconst channelNameButton = {\r\n    ...menuTags,\r\n    label: \"channel name: \" + (tags.chosenChannelName || ''),\r\n    onClick: `@\r\n        const instName = await os.showInput(links.channelConfigurator.tags.chosenChannelName || \"\", {\r\n            title: 'choose a name for your channel'\r\n        });\r\n\r\n        links.channelConfigurator.tags.chosenChannelName = instName;\r\n        links.channelConfigurator.showChannelSetupMenu();\r\n    `,\r\n    channelSetupMenuSortOrder: 1\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(channelNameButton);\r\n\r\nconst biosButton = {\r\n    ...menuTags,\r\n    label: \"BIOS: \" + (tags.chosenBIOS || ''),\r\n    dropdownSortOrder: 2,\r\n    dropdownOptions: [\r\n        {\r\n            label: \"public\",\r\n            ...menuTags,\r\n            onClick: `@\r\n                links.channelConfigurator.tags.chosenBIOS = \"public\";\r\n                links.channelConfigurator.showChannelSetupMenu();\r\n            `\r\n        },\r\n        {\r\n            label: \"private\",\r\n            ...menuTags,\r\n            onClick: `@\r\n                links.channelConfigurator.tags.chosenBIOS = \"private\";\r\n                links.channelConfigurator.showChannelSetupMenu();\r\n            `\r\n        },\r\n        {\r\n            label: \"local\",\r\n            ...menuTags,\r\n            onClick: `@\r\n                links.channelConfigurator.tags.chosenBIOS = \"local\";\r\n                links.channelConfigurator.showChannelSetupMenu();\r\n            `\r\n        },\r\n        {\r\n            label: \"manual\",\r\n            ...menuTags,\r\n            onClick: `@\r\n                links.channelConfigurator.tags.chosenBIOS = \"manual\";\r\n                links.channelConfigurator.showChannelSetupMenu();\r\n            `\r\n        }\r\n    ]\r\n}\r\n\r\nab.links.menu.abCreateMenuDropdown(biosButton);\r\n\r\n\r\nconst instNameButton = {\r\n    ...menuTags,\r\n    label: \"inst name: \" + (tags.chosenInstName || ''),\r\n    onClick: `@\r\n        const instName = await os.showInput(links.channelConfigurator.tags.chosenInstName || \"\", {\r\n            title: 'choose an inst name'\r\n        });\r\n\r\n        links.channelConfigurator.tags.chosenInstName = instName;\r\n        links.channelConfigurator.showChannelSetupMenu();\r\n    `,\r\n    channelSetupMenuSortOrder: 3\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(instNameButton);\r\n\r\n\r\nconst patternButton = {\r\n    ...menuTags,\r\n    label: \"pattern: \" + (tags.chosenPattern || \"\"),\r\n    onClick: `@\r\n        const patternName = await os.showInput(links.channelConfigurator.tags.chosenPattern || \"\", {\r\n            title: 'choose a pattern for this channel'\r\n        });\r\n\r\n        links.channelConfigurator.tags.chosenPattern = patternName;\r\n        links.channelConfigurator.showChannelSetupMenu();\r\n    `,\r\n    channelSetupMenuSortOrder: 4\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(patternButton);\r\n\r\nconst patternStudioButton = {\r\n    ...menuTags,\r\n    label: \"pattern studio: \" + (tags.chosenPatternStudio || \"\"),\r\n    onClick: `@\r\n        const patternName = await os.showInput(links.channelConfigurator.tags.chosenPatternStudio || \"\", {\r\n            title: 'what studio is this pattern in?'\r\n        });\r\n\r\n        links.channelConfigurator.tags.chosenPatternStudio = patternName;\r\n        links.channelConfigurator.showChannelSetupMenu();\r\n    `,\r\n    channelSetupMenuSortOrder: 5\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(patternStudioButton);\r\n\r\nconst editOnChannelButton = {\r\n    ...menuTags,\r\n    label: \"edit onChannelLoaded\",\r\n    onClick: `@\r\n        configBot.tags.tagPortal = links.channelConfigurator.id + \".channel_onChannelLoaded\";\r\n    `,\r\n    channelSetupMenuSortOrder: 5\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(editOnChannelButton);\r\n\r\nconst createButton = {\r\n    ...menuTags,\r\n    label: \"publish channel\",\r\n    onClick: `@\r\n        links.channelConfigurator.createChannel();\r\n    `,\r\n    channelSetupMenuSortOrder: 10\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(createButton);","formOpacity":null,"strokeColor":"#806401","onGridClick":"@shout(\"clearChannelSetupMenu\");","clearChannelSetupMenu":"@configBot.masks.menuPortal = null;","createChannel":"@shout('clearChannelSetupMenu');\r\n\r\nlet bios = tags.chosenBIOS;\r\nlet instName = tags.chosenInstName;\r\nlet pattern = tags.chosenPattern;\r\nlet patternStudio = tags.chosenPatternStudio;\r\nlet channelName = tags.chosenChannelName;\r\n\r\n//Create URL\r\nconst currentURL = new URL(configBot.tags.url);\r\nconst origin = currentURL.origin;\r\n\r\nlet newURL = new URL(origin);\r\n\r\nif (abRemember.tags.allowChannels) {\r\n    newURL.searchParams.append(\"channel\", channelName);\r\n}\r\n\r\nif (configBot.tags.comId) {\r\n    newURL.searchParams.append(\"comId\", configBot.tags.comId);\r\n}\r\n\r\ntags.channelURL = newURL.href;\r\n\r\n//create egg\r\nconst abArtifactShard = {\r\n    data: {\r\n        bios,\r\n        instName,\r\n        defaultPattern: pattern,\r\n        defaultPatternStudio: patternStudio,\r\n        channelName,\r\n        onChannelLoaded: tags.channel_onChannelLoaded\r\n    },\r\n    dependencies: [\r\n        {\r\n            askID: 'channel'\r\n        }\r\n    ]\r\n};\r\n                \r\nconst channelEgg = ab.links.artifact.abCreateArtifactPromiseBot({\r\n                    abArtifactName: 'channel',\r\n                    abArtifactInstanceID: uuid(),\r\n                    abArtifactShard,\r\n                });\r\n\r\n//Publish to studio\r\nif (!authBot) {\r\n    console.log(\"${tags.system}.${tagName}]: no authbot\");\r\n    await os.requestAuthBotInBackground();\r\n}\r\n\r\nif (!authBot) {\r\n    console.log(\"${tags.system}.${tagName}]: User not logged in.\");\r\n    destroy(channelEgg);\r\n    return;\r\n}\r\n\r\nconst studio = configBot.tags.studio ?? authBot.id;\r\nconfigBot.tags.selected_studioID = studio;\r\n\r\nconst publishAttempt = await ab.links.store.abPublishAB({ab: channelName, target: channelEgg, sourceEvent: 'channel_egg_publish'});\r\n\r\nif (tags.debug) {\r\n    console.log(`[${tags.system}.${tagName}] saveData publishAttempt 1:`, publishAttempt);\r\n}\r\n\r\nif (!publishAttempt.success) {\r\n    const permissions = await os.grantInstAdminPermission(studio);\r\n\r\n    if (tags.debug) {\r\n        console.log(`[${tags.system}.${tagName}] saveData permissions:`, permissions);\r\n    }\r\n\r\n    const secondPublishAttempt = await ab.links.store.abPublishAB({ab: channelName, target: channelEgg, sourceEvent: 'channel_egg_publish'});\r\n        \r\n    if (tags.debug) {\r\n        console.log(`[${tags.system}.${tagName}]  saveData publishAttempt 2`, secondPublishAttempt);\r\n    }\r\n\r\n    if (!secondPublishAttempt.success){\r\n        if (tags.debug) {\r\n            console.log(`[${tags.system}.${tagName}] Could not publish`, secondPublishAttempt);\r\n        }\r\n    } else {\r\n        ab.links.manifestation.abSetAwake({ awake: true });\r\n    }\r\n}\r\n\r\n//TODO: Submit official request\r\n\r\n//delete egg\r\ndestroy(channelEgg);\r\n\r\nshout(\"abMenuRefresh\");","homeWorldBot":"true","channelConfigurator":"true","template_onChannelLoaded":"ðŸ“„`@//Put code here that determines the conditions in which a pattern gets loaded\r\n    ab.links.search.onLookupABEggs(\r\n        {   \r\n            abID: tags.defaultPattern || '[pattern name here]',\r\n            recordKey: tags.defaultPatternStudio ?? configBot.tags.studio ?? authBot?.id ?? '[pattern studio id here]'\r\n            initialBoot,\r\n            autoHatch,\r\n            sourceEvent: 'channel' \r\n        }\r\n    )\r\n `"}}}}