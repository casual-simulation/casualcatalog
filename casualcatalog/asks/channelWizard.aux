{"version":1,"state":{"87fd4b37-691f-4643-82af-ad5697b29393":{"id":"87fd4b37-691f-4643-82af-ad5697b29393","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","system":"studio_toolbox.tool.channel wizard","channelWizard":"true","color":"gold","formOpacity":".4","strokeColor":"gold","label":"channel wizard","labelColor":"gold","onGridClick":"@shout(\"clearChannelWizardMenu\");","saveContext":"@if (!that) {\r\n    return;\r\n}\r\n\r\nconst launcherBot = getBot(\"system\", system => system.includes(\"channels.launchers.\"));\r\nconst contextMap = {...launcherBot.tags.contextMap};\r\n\r\ncontextMap[that.context] = that.data;\r\n\r\nlauncherBot.tags.contextMap = 'ðŸ§¬' + contextMap;","saveChannelConfig":"@const launcherBot = getBot(\"system\", system => system.includes(\"channels.launchers.\"));\r\nconst channelID = launcherBot?.tags?.channelID;\r\n\r\nlinks.channelLoader.saveChannel(channelID)","onCreate":"@tags.abIgnore = true;","editChannel":"@//make sure the user is logged in\r\nawait os.requestAuthBotInBackground();\r\n\r\nif (!authBot) {\r\n    return;\r\n}\r\n\r\nshout(\"clearChannelEditorMenu\");\r\nconfigBot.tags.menuPortal = \"channelEditorMenu\";\r\n\r\n//Find installed channel\r\nconst launcherBot = getBot(\"system\", system => system?.includes(\"channels.launchers.\"));\r\n\r\nif (!launcherBot) {\r\n    os.toast(\"no active channel\");\r\n    return;\r\n}\r\nconst saveChannelConfig = {\r\n    label: \"save channel configuration\",\r\n    onClick: `@\r\n        links.channelEditor.saveChannelConfig();\r\n    `,\r\n    channelEditor: getLink(thisBot),\r\n    channelEditorMenu: true,\r\n    clearChannelEditorMenu: `@destroy(this);`\r\n}\r\n\r\nawait links.menu.abCreateMenuButton(saveChannelConfig);\r\n\r\nconst newConfigMenuItem = {\r\n    label: \"add new context\",\r\n    onClick: `@\r\n        const newContextName = await os.showInput(null, {title: \"context\"});\r\n        links.channelEditor.generateConfig(${newContextName});\r\n    `,\r\n    channelEditor: getLink(thisBot),\r\n    channelEditorMenu: true,\r\n    clearChannelEditorMenu: `@destroy(this);`\r\n}\r\n\r\nawait links.menu.abCreateMenuButton(newConfigMenuItem);\r\n\r\nconst contextMap = {...launcherBot.tags.contextMap};\r\nfor (const context of contextMap) {\r\n    const contextMenuItem = {\r\n        label: \"edit context: \" + context,\r\n        onClick: `@\r\n            links.channelEditor.generateConfig(${context});\r\n        `,\r\n        channelEditor: await getLink(thisBot),\r\n        channelEditorMenu: true,\r\n        clearChannelEditorMenu: `@destroy(this);`\r\n    }\r\n    await links.menu.abCreateMenuButton(contextMenuItem);\r\n}","generateConfigMenu":"@if (!that) {\r\n    return;\r\n}\r\n\r\n//make sure the user is logged in\r\nawait os.requestAuthBotInBackground();\r\n\r\nif (!authBot) {\r\n    return;\r\n}\r\n\r\nconst launcherBot = getBot(\"system\", system => system.includes(\"channels.launchers.\"));\r\nconst contextMap = {...launcherBot.tags.contextMap};\r\nconst contextInfo = {...contextMap[that]};\r\n\r\nif (!contextInfo) {\r\n    contextInfo = {\r\n        \"studio\": null,\r\n        \"pattern\": null,\r\n        \"bios\": \"free\",\r\n        \"inst\": null,\r\n        \"sideload\": false\r\n    }\r\n}\r\n\r\nshout(\"clearChannelEditorMenu\");\r\nconfigBot.tags.menuPortal = \"channelEditorMenu\";\r\n\r\nvars.configMenuData = contextInfo;\r\n\r\nconst contextMenuItem = {\r\n    label: \"context: \" + context,\r\n    channelEditor: await getLink(thisBot),\r\n    channelEditorMenu: true,\r\n    clearChannelEditorMenu: `@destroy(this);`\r\n}\r\n\r\nconst biosMenuItem = {\r\n    label: \"BIOS: \",\r\n    onClick: `@\r\n        const newBIOS = await os.showInput(null, {\r\n            title: 'BIOS',\r\n            type: 'list',\r\n            placeholder: 'bios',\r\n            items: [\r\n                {\r\n                    label: 'Free',\r\n                    value: 'free'\r\n                },\r\n                {\r\n                    label: 'Local',\r\n                    value: 'local'\r\n                },\r\n                {\r\n                    label: 'Studio',\r\n                    value: 'studio'\r\n                }\r\n            ]\r\n        });\r\n        if (newBIOS) {\r\n            links.channelEditor.vars.configMenuData[\"bios\"] = newBIOS.value;\r\n            tags.label = \"BIOS: \" + newBIOS.value;\r\n        }\r\n    `,\r\n    channelEditor: await getLink(thisBot),\r\n    channelEditorMenu: true,\r\n    clearChannelEditorMenu: `@destroy(this);`\r\n}\r\n\r\nconst sideLoadMenuItem = {\r\n    label: \"sideload: \",\r\n    onClick: `@\r\n        const newSideload = await os.showInput(false, {\r\n            title: 'sideload',\r\n            type: 'list',\r\n            placeholder: 'inst',\r\n            items: [\r\n                {\r\n                    label: 'true',\r\n                    value: true\r\n                },\r\n                {\r\n                    label: 'false',\r\n                    value: false\r\n                }\r\n            ]\r\n        });\r\n        links.channelEditor.vars.configMenuData[\"sideload\"] = newSideload.value;\r\n        tags.label = \"sideload: \" + newSideload.value;\r\n        \r\n    `,\r\n    channelEditor: await getLink(thisBot),\r\n    channelEditorMenu: true,\r\n    clearChannelEditorMenu: `@destroy(this);`\r\n}\r\n\r\nconst instMenuItem = {\r\n    label: \"inst: \" + vars.configMenuData[\"inst\"],\r\n    onClick: `@\r\n        const newInst = await os.showInput(null, {\r\n            title: 'inst',\r\n        });\r\n\r\n        if (newInst) {\r\n           links.channelEditor.vars.configMenuData[\"inst\"] = newInst;\r\n            tags.label = \"inst: \" + newInst; \r\n        }\r\n    `,\r\n    channelEditor: await getLink(thisBot),\r\n    channelEditorMenu: true,\r\n    clearChannelEditorMenu: `@destroy(this);`\r\n}\r\n\r\nconst patternMenuItem = {\r\n    label: \"pattern: \" + vars.configMenuData[\"pattern\"],\r\n    onClick: `@\r\n        const newPattern = await os.showInput(null, {\r\n            title: 'pattern',\r\n        });\r\n\r\n        if (newPattern) {\r\n            links.channelEditor.vars.configMenuData[\"pattern\"] = newPattern;\r\n            tags.label = \"pattern: \" + newPattern; \r\n        }\r\n    `,\r\n    channelEditor: await getLink(thisBot),\r\n    channelEditorMenu: true,\r\n    clearChannelEditorMenu: `@destroy(this);`\r\n}\r\n\r\nconst studioMenuItem = {\r\n    label: \"studio: \" + vars.configMenuData[\"studio\"],\r\n    onClick: `@\r\n        const newStudio = await os.showInput(null, {\r\n            title: 'studio',\r\n        });\r\n\r\n        if (newStudio) {\r\n            links.channelEditor.vars.configMenuData[\"studio\"] = newStudio;\r\n            tags.label = \"studio: \" + newStudio; \r\n        }\r\n    `,\r\n    channelEditor: getLink(thisBot),\r\n    channelEditorMenu: true,\r\n    clearChannelEditorMenu: `@destroy(this);`\r\n}\r\n\r\nconst saveMenuItem = {\r\n    label: \"save context configuration\",\r\n    onClick: `@\r\n        links.channelEditor.saveContext({'context': ${context}, 'data': ${vars.configMenuData}});\r\n        shout(\"clearChannelEditorMenu\");\r\n    `,\r\n    channelEditor: getLink(thisBot),\r\n    channelEditorMenu: true,\r\n    clearChannelEditorMenu: `@destroy(this);`\r\n}\r\n\r\nconst removeMenuItem = {\r\n    label: \"delete context\",\r\n    onClick: `@\r\n        links.channelEditor.deleteContext(${context});\r\n        shout(\"clearChannelEditorMenu\");\r\n    `,\r\n    channelEditor: getLink(thisBot),\r\n    channelEditorMenu: true,\r\n    clearChannelEditorMenu: `@destroy(this);`\r\n}\r\n\r\nawait links.menu.abCreateMenuButton(contextMenuItem);\r\nawait links.menu.abCreateMenuButton(biosMenuItem);\r\nawait links.menu.abCreateMenuButton(sideLoadMenuItem);\r\nawait links.menu.abCreateMenuButton(instMenuItem);\r\nawait links.menu.abCreateMenuButton(patternMenuItem);\r\nawait links.menu.abCreateMenuButton(studioMenuItem);\r\nawait links.menu.abCreateMenuButton(saveMenuItem);\r\nawait links.menu.abCreateMenuButton(removeMenuItem);","deleteContext":"@if (!that) {\r\n    return;\r\n}\r\n\r\nconst launcherBot = getBot(\"system\", system => system.includes(\"channels.launchers.\"));\r\nconst contextMap = {...launcherBot.tags.contextMap};\r\n\r\ndelete contextMap[that.context];\r\n\r\nlauncherBot.tags.contextMap = 'ðŸ§¬' + contextMap;","initializeChannelMenu":"@//make sure the user is logged in\r\nawait os.requestAuthBotInBackground();\r\n\r\nif (!authBot) {\r\n    return;\r\n}\r\n\r\nshout(\"clearChannelCreatorMenu\");\r\nconfigBot.tags.menuPortal = \"channelCreatorMenu\";\r\n\r\nconst channelIDMenuItem = {\r\n    label: \"channelID: \",\r\n    onClick: `@\r\n        const newChannelID = await os.showInput(null, {\r\n            title: \"channelID\"\r\n        });\r\n        if (newChannelID) {\r\n            links.channelCreator.tags.channelID = newChannelID;\r\n            tags.label = \"channelID: \" + newChannelID;\r\n        }\r\n    `,\r\n    channelCreator: await getLink(thisBot),\r\n    channelCreatorMenu: true,\r\n    clearChannelCreatorMenu: `@destroy(this);`\r\n}\r\n\r\nconst biosMenuItem = {\r\n    label: \"BIOS: \",\r\n    onClick: `@\r\n        const newBIOS = await os.showInput(null, {\r\n            title: 'BIOS',\r\n            type: 'list',\r\n            placeholder: 'bios',\r\n            items: [\r\n                {\r\n                    label: 'Free',\r\n                    value: 'free'\r\n                },\r\n                {\r\n                    label: 'Local',\r\n                    value: 'local'\r\n                },\r\n                {\r\n                    label: 'Studio',\r\n                    value: 'studio'\r\n                }\r\n            ]\r\n        });\r\n        if (newBIOS) {\r\n            links.channelCreator.tags.biosSetting = newBIOS.value;\r\n            tags.label = \"BIOS: \" + newBIOS.value;\r\n        }\r\n    `,\r\n    channelCreator: await getLink(thisBot),\r\n    channelCreatorMenu: true,\r\n    clearChannelCreatorMenu: `@destroy(this);`\r\n}\r\n\r\nconst sideLoadMenuItem = {\r\n    label: \"sideload: \",\r\n    onClick: `@\r\n        const newSideload = await os.showInput(false, {\r\n            title: 'sideload',\r\n            type: 'list',\r\n            placeholder: 'inst',\r\n            items: [\r\n                {\r\n                    label: 'true',\r\n                    value: true\r\n                },\r\n                {\r\n                    label: 'false',\r\n                    value: false\r\n                }\r\n            ]\r\n        });\r\n        links.channelCreator.tags.sideloadSetting = newSideload.value;\r\n        tags.label = \"sideload: \" + newSideload.value;\r\n        \r\n    `,\r\n    channelCreator: await getLink(thisBot),\r\n    channelCreatorMenu: true,\r\n    clearChannelCreatorMenu: `@destroy(this);`\r\n}\r\n\r\nconst instMenuItem = {\r\n    label: \"inst: \",\r\n    onClick: `@\r\n        const newInst = await os.showInput(null, {\r\n            title: 'inst',\r\n        });\r\n\r\n        if (newInst) {\r\n           links.channelCreator.tags.instSetting = newInst;\r\n            tags.label = \"inst: \" + newInst; \r\n        }\r\n    `,\r\n    channelCreator: await getLink(thisBot),\r\n    channelCreatorMenu: true,\r\n    clearChannelCreatorMenu: `@destroy(this);`\r\n}\r\n\r\nconst patternMenuItem = {\r\n    label: \"pattern: \",\r\n    onClick: `@\r\n        const newPattern = await os.showInput(null, {\r\n            title: 'pattern',\r\n        });\r\n\r\n        if (newPattern) {\r\n            links.channelCreator.tags.patternSetting = newPattern;\r\n            tags.label = \"pattern: \" + newPattern; \r\n        }\r\n    `,\r\n    channelCreator: await getLink(thisBot),\r\n    channelCreatorMenu: true,\r\n    clearChannelCreatorMenu: `@destroy(this);`\r\n}\r\n\r\nconst studioMenuItem = {\r\n    label: \"studio: \",\r\n    onClick: `@\r\n        const newStudio = await os.showInput(null, {\r\n            title: 'studio',\r\n        });\r\n\r\n        if (newStudio) {\r\n            links.channelCreator.tags.studioSetting = newStudio;\r\n            tags.label = \"studio: \" + newStudio; \r\n        }\r\n    `,\r\n    channelCreator: getLink(thisBot),\r\n    channelCreatorMenu: true,\r\n    clearChannelCreatorMenu: `@destroy(this);`\r\n}\r\n\r\nconst createMenuItem = {\r\n    label: \"create channel\",\r\n    onClick: `@\r\n        links.channelCreator.createChannel();\r\n    `,\r\n    channelCreator: getLink(thisBot),\r\n    channelCreatorMenu: true,\r\n    clearChannelCreatorMenu: `@destroy(this);`\r\n}\r\n\r\nawait links.menu.abCreateMenuButton(channelIDMenuItem);\r\nawait links.menu.abCreateMenuButton(biosMenuItem);\r\nawait links.menu.abCreateMenuButton(sideLoadMenuItem);\r\nawait links.menu.abCreateMenuButton(instMenuItem);\r\nawait links.menu.abCreateMenuButton(patternMenuItem);\r\nawait links.menu.abCreateMenuButton(studioMenuItem);\r\nawait links.menu.abCreateMenuButton(createMenuItem);","createChannel":"@if (!tags.channelID) {\r\n    os.toast(\"User must provide channel ID\");\r\n    return;\r\n}\r\n\r\nconst channelID = '@' + tags.channelID;\r\nlet patternSetting = tags.patternSetting;\r\nlet studioSetting = tags.studioSetting;\r\n\r\nif (!patternSetting && !studioSetting) {\r\n    patternSetting = \"casualTutorial\";\r\n    studioSetting = \"AB\";\r\n} else if (patternSetting && !studioSetting) {\r\n    studioSetting == authBot.id;\r\n} else if (!patternSetting && studioSetting) {\r\n    os.toast(\"user must provide pattern\");\r\n    return;\r\n}\r\n\r\nconst biosSettings = tags.biosSetting ?? \"free\";\r\nconst sideloadSetting = tags.sideloadSetting ?? false;\r\nconst instSetting = tags.instSetting ?? null;\r\n\r\nlinks.channelLoader.createChannel({\r\n        'channelID': channelID,\r\n        'patternSetting': patternSetting,\r\n        'studioSetting': studioSetting,\r\n        'biosSettings': biosSettings,\r\n        'sideloadSetting': sideloadSetting,\r\n        'instSetting': instSetting\r\n    })","onClick":"@configBot.tags.menuPortal = \"channelWizardMenu\";\r\n\r\nconst channelCreatorMenu = {\r\n    \"channelWizardMenu\": true,\r\n    \"clearChannelWizardMenu\": `@destroy(thisBot);`,\r\n    \"label\": \"create channel\",\r\n    \"channelWizard\": await getLink(thisBot),\r\n    \"onClick\": `@   \r\n        shout(\"clearChannelWizardMenu\");\r\n        links.channelWizard.initializeChannelMenu();\r\n    `\r\n}\r\n\r\nconst channelEditorMenu = {\r\n    \"channelWizardMenu\": true,\r\n    \"clearChannelWizardMenu\": `@destroy(thisBot);`,\r\n    \"label\": \"edit channel\",\r\n    \"channelWizard\": await getLink(thisBot),\r\n    \"onClick\": `@   \r\n        shout(\"clearChannelWizardMenu\");\r\n        links.channelWizard.editChannel();\r\n    `\r\n}\r\n\r\nlinks.menu.abCreateMenuButton(channelCreatorMenu);\r\nlinks.menu.abCreateMenuButton(channelEditorMenu);","channelLoader":"ðŸ”—a9b6aa0d-b357-4de6-9bef-85348ab1d0e0","menu":"ðŸ”—b30c6c5d-a4f7-4266-ba38-393dc95e1ecb","abVersion":"10.5","abIgnore":true,"onEggHatch":"@if (that.eggParameters) {\r\n    const dimension = that.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = that.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = that.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n}"}}}}