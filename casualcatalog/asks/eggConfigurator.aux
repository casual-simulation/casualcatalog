{"version":1,"state":{"5edd22f6-034c-4f5b-a89f-d422cbf3fc05":{"id":"5edd22f6-034c-4f5b-a89f-d422cbf3fc05","space":"shared","tags":{"system":"egg_toolbox.tools.eggConfigurator","clearEggSetupMenu":"@configBot.masks.menuPortal = null;","onABArtifactCollectShards":"@const shard: ABArtifactShard = {\r\n    data: {\r\n        eggName: tags.chosenEggName,\r\n        eggStudio: tags.chosenStudio,\r\n        eggVersionHistory: tags.chosenEggVersionHistory,\r\n        eggSetupLabel: tags.channelSetupLabel,\r\n        eggConfigConfirmed: tags.eggConfigConfirmed,\r\n        dimensionData: {\r\n            [ab.links.remember.tags.abActiveDimension]: tags[ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension + 'X']: tags[ab.links.remember.tags.abActiveDimension + 'X'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Y']: tags[ab.links.remember.tags.abActiveDimension + 'Y'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Z']: tags[ab.links.remember.tags.abActiveDimension + 'Z'],\r\n        }\r\n    },\r\n    dependencies: [\r\n        {\r\n            askID: 'eggConfigurator'\r\n        }\r\n    ]\r\n}\r\n\r\nreturn shard;","onABArtifactReconstitute":"@const data = that.data;\r\n\r\ntags.chosenEggName = data.eggName;\r\ntags.chosenStudio = data.eggStudio;\r\ntags.chosenEggVersionHistory = data.eggVersionHistory;\r\ntags.eggSetupLabel = data.eggSetupLabel ?? \"configure egg\";\r\ntags.eggConfigConfirmed = data.eggConfigConfirmed ?? false;\r\ntags.chosenVersionNumber = 'current';\r\n\r\nif (data.dimensionData) {\r\n    for (const tagName in data.dimensionData) {\r\n        tags[tagName] = data.dimensionData[tagName];\r\n    }\r\n}\r\n\r\nif (data.eggParameters) {\r\n    const dimension = data.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = data.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = data.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags.dimension = dimension;\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n\r\n    tags.eggSetupLabel = \"configure egg\";\r\n    thisBot.showEggSetupMenu();\r\n}\r\n\r\nthisBot.updateBillboardLabel();","onABStripArtifactInstanceDataFromBotData":"@const { data } = that;\r\n\r\ndelete data.tags.chosenEggName;\r\ndelete data.tags.eggSetupLabel;\r\ndelete data.tags.chosenStudio;\r\ndelete data.tags.chosenEggVersionHistory;\r\ndelete data.tags.eggConfigConfirmed;\r\ndelete data.tags[data.tags.dimension];\r\ndelete data.tags[data.tags.dimension + 'X'];\r\ndelete data.tags[data.tags.dimension + 'Y'];\r\ndelete data.tags[data.tags.dimension + 'Z'];\r\ndelete data.tags.dimension;","onAnyBotsRemoved":"@const { botIDs } = that;\r\n\r\nif (botIDs.includes(thisBot.id)) {\r\n    shout(\"clearEggSetupMenu\");\r\n}","onBotAdded":"@let waitTime = 0;\r\n\r\nwhile(!globalThis.ab?.links.bot_factory) {\r\n    if (waitTime >= 5000) {\r\n        return;\r\n    }\r\n    \r\n    await os.sleep(250);\r\n    waitTime += 250;\r\n}\r\n\r\nmasks.ready = true;\r\n\r\nthisBot.updateBillboardLabel();","onClick":"@thisBot.showEggSetupMenu();","onGridClick":"@shout(\"clearEggSetupMenu\");\r\nshout('clearEggTestMenu');","showEggSetupMenu":"@shout('clearEggSetupMenu');\r\n\r\nconfigBot.tags.menuPortal = 'eggSetupMenu';\r\n\r\nconst menuTags = {\r\n    clearEggSetupMenu: `@destroy(thisBot);`,\r\n    eggSetupMenu: true,\r\n    eggConfigurator: getLink(thisBot)\r\n}\r\n\r\n//EGG NAME\r\nconst eggNameButton = {\r\n    ...menuTags,\r\n    label: tags.eggConfigConfirmed ? tags.chosenEggName : \"egg name: \" + (tags.chosenEggName || ''),\r\n    color: ab.links.personality.tags.abBaseMenuColor,\r\n    onClick: tags.eggConfigConfirmed ? null : `@\r\n        const instName = await os.showInput(links.eggConfigurator.tags.chosenEggName || \"\", {\r\n            title: 'choose a name for your egg'\r\n        });\r\n\r\n        links.eggConfigurator.tags.chosenEggName = instName;\r\n        links.eggConfigurator.tags.eggSetupLabel = instName;\r\n        links.eggConfigurator.updateBillboardLabel();\r\n        links.eggConfigurator.showEggSetupMenu();\r\n    `,\r\n    eggSetupMenuSortOrder: 1\r\n}\r\n\r\n//STUDIO\r\nconst studioButton = {\r\n    ...menuTags,\r\n    label: tags.eggConfigConfirmed ? tags.chosenStudio : \"studio: \" + (tags.chosenStudio || ''),\r\n    color: ab.links.personality.tags.abBaseMenuColor,\r\n    onClick: tags.eggConfigConfirmed ? null : `@\r\n        const studioName = await os.showInput(links.eggConfigurator.tags.chosenStudio || \"\", {\r\n            title: 'provide a studio'\r\n        });\r\n\r\n        links.eggConfigurator.tags.chosenStudio = studioName;\r\n        links.eggConfigurator.showEggSetupMenu();\r\n    `,\r\n    eggSetupMenuSortOrder: 2\r\n}\r\n\r\n//CREATE\r\nconst createButton = {\r\n    ...menuTags,\r\n    label: \"create egg\",\r\n    onClick: `@\r\n        if (links.eggConfigurator.tags.chosenEggName) {\r\n            if (!links.eggConfigurator.tags.chosenStudio) {\r\n                links.eggConfigurator.tags.chosenStudio = authBot.id;\r\n            }\r\n            links.eggConfigurator.publishEggConfigurator();\r\n        } else {\r\n            os.toast(\"You must provide an egg name\");\r\n        }\r\n    `,\r\n    eggSetupMenuSortOrder: 10,\r\n}\r\n\r\nif (!tags.chosenEggName) {\r\n    createButton.menuItemStyle = {\r\n        filter: `brightness(50%)`\r\n    }\r\n}\r\n\r\n//TEST\r\nconst testButton = {\r\n    ...menuTags,\r\n    label: \"test\",\r\n    onClick: `@\r\n        links.eggConfigurator.showTestMenu();\r\n        shout(\"clearEggSetupMenu\");\r\n    `,\r\n    eggSetupMenuSortOrder: 10,\r\n}\r\n\r\nif (!tags.eggConfigConfirmed) {\r\n    ab.links.menu.abCreateMenuButton(eggNameButton);\r\n    ab.links.menu.abCreateMenuButton(studioButton);\r\n    ab.links.menu.abCreateMenuButton(createButton);\r\n} else {\r\n    ab.links.menu.abCreateMenuText(eggNameButton);\r\n    ab.links.menu.abCreateMenuText(studioButton);\r\n    ab.links.menu.abCreateMenuButton(testButton);\r\n}\r\n","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\r\n    destroy(thisBot.vars.billboardLabelBot);\r\n    thisBot.vars.billboardLabelBot = null;\r\n}\r\n\r\nthisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \r\n    bot: thisBot, \r\n    label: tags.eggSetupLabel,\r\n    color: tags.eggSetupLabelFloatingBackgroundColor,\r\n    dimension: configBot.tags.mapPortal ?? configBot.tags.gridPortal ?? 'home',\r\n    // botLabelMargin: 0,\r\n    labelColor: tags.eggSetupLabelColor,\r\n    space: 'tempLocal',\r\n})","abArtifactName":"eggConfigurator","artifact":"ðŸ”—78e41503-c933-4f8a-817a-ba97bf8d5d27","eggConfigurator":"true","form":"egg","eggSetupLabelColor":"black","eggSetupLabelFloatingBackgroundColor":"white","cursor":"pointer","publishEggConfigurator":"@console.log(\"[Egg Configurator]: publish, WIP\");\r\n\r\n//publish egg\r\n\r\n\r\n//setup menus\r\ntags.eggConfigConfirmed = true;\r\nthisBot.showEggSetupMenu();","abIDOrigin":"eggConfigurator","showTestMenu":"@shout('clearEggTestMenu');\r\n\r\nconfigBot.tags.menuPortal = 'eggTestMenu';\r\n\r\nconst menuTags = {\r\n    clearEggTestMenu: `@destroy(thisBot);`,\r\n    eggTestMenu: true,\r\n    eggConfigurator: getLink(thisBot)\r\n}\r\n\r\n//HATCH\r\nconst hatchButton = {\r\n    ...menuTags,\r\n    label: \"create test\",\r\n    onClick: `@\r\n        links.eggConfigurator.hatchEggConfig();\r\n    `,\r\n    eggTestMenuSortOrder: 1,\r\n}\r\n\r\n//VERSION\r\nif (tags.chosenEggName && authBot && tags.eggConfigConfirmed) {\r\n    let dataResponse = await os.getData(tags.chosenStudio ?? authBot.id, tags.chosenEggName);\r\n\r\n    if (!dataResponse.success) {\r\n        if(dataResponse.errorCode && dataResponse.errorCode == 'not_authorized') {\r\n            await os.grantInstAdminPermission(tags.chosenStudio ?? authBot.id);\r\n            dataResponse = await os.getData(tags.chosenStudio ?? authBot.id, tags.chosenEggName);\r\n        }\r\n    }\r\n\r\n    if (dataResponse.success && !tags.chosenStudio) {\r\n        tags.chosenStudio = tags.chosenStudio ?? authBot.id;\r\n    }\r\n\r\n    if(dataResponse.success) {\r\n        const dropdownOuterButton = {\r\n            ...menuTags,\r\n            dropdownSortOrder: 4,\r\n            label: \"version: \" + (tags.chosenVersionNumber || '')\r\n        }\r\n\r\n        const dropdownOptions = [];\r\n        const reversedArr = dataResponse.data?.eggVersionHistory?.reverse();\r\n        for (let i = 0; i < reversedArr.length; ++i) {\r\n            if (i > 7) {\r\n                return;\r\n            }\r\n\r\n            //Make a button\r\n            const versionButton = {\r\n                ...menuTags,\r\n                label: i == 0 ? \" (current)\" : \"version \" + (i + 1),\r\n                versionUrl: reversedArr[i],\r\n                versionIndex: i == 0 ? \"current\" : i + 1,\r\n                onClick: `@\r\n\r\n                    links.eggConfigurator.tags.chosenVersionNumber = tags.versionIndex;\r\n                    links.eggConfigurator.showTestMenu();\r\n                `\r\n            }\r\n\r\n            dropdownOptions.push(versionButton);\r\n        }\r\n\r\n        dropdownOuterButton.dropdownOptions = dropdownOptions;\r\n\r\n        ab.links.menu.abCreateMenuDropdown(dropdownOuterButton)\r\n    }\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(hatchButton);\r\n","chosenVersionNumber":"current","hatchEggConfig":"@//TODO: randomize this near it\r\nconst dimension = configBot.tags.mapPortal ? \"map\" : \"grid\";\r\n\r\nlet gridInfo;\r\nif (dimension == \"map\") {\r\n    gridInfo = {    \r\n        \"dimension\":tags.dimension,\r\n        \"position\":\r\n            {\r\n                \"x\":tags[tags.dimension + \"X\"] + ((Math.floor(Math.random() * 5) + 2) / 10000),\r\n                \"y\":tags[tags.dimension + \"Y\"] + ((Math.floor(Math.random() * 5) + 2) / 10000)\r\n            }\r\n    }\r\n} else {\r\n    gridInfo = {\r\n        \"dimension\":tags.dimension,\r\n        \"position\":\r\n            {\r\n                \"x\":tags[tags.dimension + \"X\"] + Math.floor(Math.random() * 5) + 2,\r\n                \"y\":tags[tags.dimension + \"Y\"] + Math.floor(Math.random() * 5) + 2\r\n            }\r\n    }\r\n}\r\n\r\nab.links.search.onLookupAskID({\r\n    askID: \"instCreatorWizard\",\r\n    sourceEvent: 'tool',\r\n    eggParameters: {\r\n        gridInformation: gridInfo,\r\n        initializationInfo: {\r\n            pattern: tags.chosenEggName,\r\n            studio: tags.chosenStudio,\r\n            linkTo: thisBot.id\r\n        }\r\n    },\r\n});"}}}}