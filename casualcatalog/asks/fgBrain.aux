{"version":1,"state":{"b5c2e9e1-32ed-4a1b-93cb-a2786609e334":{"id":"b5c2e9e1-32ed-4a1b-93cb-a2786609e334","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","abIDOrigin":"fgBrain","brainDimension":"home","color":"pink","copyNeurons":"@function getNeuronInfo (neuronBot){\r\n    let nbTopic = getTag(neuronBot, \"topic\");\r\n    let nbLinkedTopics = [];\r\n    let nbStemConnected = false;\r\n    let nbLineTo = [...new Set(getTag(neuronBot, \"lineTo\"))];\r\n    let idCheck = links.altBrain ? links.altBrain.id : thisBot.id;\r\n    let nbDetails = getTag(neuronBot, \"details\");\r\n    \r\n    for(const line of nbLineTo){\r\n        let lineBot = getBot(byID(line));\r\n        if(lineBot){\r\n            if(lineBot.id == idCheck){\r\n                nbStemConnected = true;\r\n            }\r\n            else {\r\n                nbLinkedTopics.push(getTag(lineBot, \"topic\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    let nbInfo = {\r\n        topic: nbTopic,\r\n        linkedTopics: nbLinkedTopics,\r\n        stemConnected: nbStemConnected,\r\n        details: nbDetails\r\n    };\r\n\r\n    // setTag(neuronBot, \"stemConnected\", nbInfo.stemConnected);\r\n    // setTag(neuronBot, \"linkedTopics\", nbInfo.linkedTopics);\r\n\r\n    return nbInfo;\r\n}\r\n\r\nconst neuronArray = [];\r\n\r\nif (links.neurons != null) {\r\n    if (Array.isArray(links.neurons)) {\r\n        for (const neuron of links.neurons) {\r\n            neuron ? neuronArray.push(getNeuronInfo(neuron)) : null;\r\n        }\r\n    }\r\n    else {\r\n        neuronArray.push(links.neurons.tags.topic);\r\n    }\r\n}\r\n\r\nconsole.log(\"neuronArray\", neuronArray);\r\n\r\nreturn neuronArray;","createFGBNeurons":"@// thisBot.importForceGraph();\r\nconsole.log(\"createFGBNeurons: \", that);\r\n\r\nconst dimension = that.dimension ? that.dimension : tags.brainDimension;\r\nconst neuronMods = that.neuronMods ? that.neuronMods : tags.defaultNeurons;\r\nconst tempNeurons = that.tempNeurons;\r\nconst neuronsColor = that.neuronsColor;\r\nconst neurons = [];\r\n\r\nfunction getRandomHexColor() {\r\n    return '#' + Math.floor(Math.random() * 0xFFFFFF).toString(16).padStart(6, '0');\r\n};\r\n\r\nfor (const modSet in neuronMods) {\r\n    let visible = true;\r\n    if (thisBot.tags.hidden == true) {\r\n        visible = false;\r\n    }\r\n    else if (thisBot.tags.hidden == false) {\r\n        visible = true;\r\n    }\r\n    console.log(\"FGBNeuron visible:\", visible);\r\n\r\n    let baseNeuron = {\r\n        space: tempNeurons ? \"tempLocal\" : \"shared\",\r\n        [dimension]: visible,\r\n        system: \"fgbNeuron\",\r\n        brainDimension: dimension,\r\n        toggleNeuronVisibility: `@ if(that == \"show\"){ tags[tags.brainDimension] = true } else if(that == \"hide\"){ tags[tags.brainDimension] = false }`,\r\n        home: tags.debugMode ? true : false,\r\n        fgbNeuron: true,\r\n        stemID: links.altBrain ? links.altBrain.id : thisBot.id,\r\n        forceGraph: 'fgb' + thisBot.id,\r\n        onCreate: `@\r\n        if(!tags.lineTo){\r\n            await os.sleep(100);\r\n            const connections = [];\r\n            if(tags.stemConnected){\r\n                connections.push(tags.stemID)\r\n            }\r\n            for(const topic of tags.linkedTopics){\r\n                let topicBot = getBot(byTag(\"topic\", topic));\r\n                topicBot.id ? connections.push(topicBot.id) : null;\r\n            }\r\n            tags.lineTo = connections;\r\n        }\r\n        `,\r\n        form: \"circle\",\r\n        orientationMode: \"billboard\",\r\n        labelPosition: \"floatingBillboard\",\r\n        labelWordWrapMode: \"none\",\r\n        onPointerEnter: `@ \r\n            let tipID = await os.tip(tags.details, null, null, 120);\r\n            masks.tipID = tipID;\r\n        `,\r\n        onPointerExit: `@ os.hideTips(masks.tipID);`\r\n    };\r\n\r\n    baseNeuron[dimension] = visible;\r\n\r\n    for (const mod in neuronMods[modSet]) {\r\n        baseNeuron[mod] = neuronMods[modSet][mod];\r\n    };\r\n\r\n    baseNeuron.label = baseNeuron.topic ? baseNeuron.topic : \"undefined\";\r\n    baseNeuron.color = neuronsColor ? neuronsColor : getRandomHexColor();\r\n\r\n    neurons.push(baseNeuron);\r\n}\r\n\r\nconsole.log(\"FGBNeurons\", neurons);\r\nlet newNeurons = create(neurons);\r\n\r\n// let existingNeurons = links.neurons;\r\n\r\n// if(existingNeurons){\r\n//     if(Array.isArray(existingNeurons)){\r\n//         let foundBots = []\r\n//     }\r\n//     else{\r\n//         let foundBot = getBot(byID(existingNeurons.id));\r\n//         if(foundBot){\r\n\r\n//         }\r\n//     }\r\n\r\n//     existingNeurons = Array.isArray(existingNeurons) ? existingNeurons.concat(newNeurons) : [existingNeurons].concat(newNeurons);\r\n// }\r\n// else {\r\n//     const neuronsLink = getLink(newNeurons);\r\n//     tags.neurons = neuronsLink;\r\n// }\r\n\r\nthat.delayLinking == true ? null : thisBot.resetNeuronsLink();\r\n\r\nawait os.sleep(150);\r\nsimManager.start(tags.forceGraph);","debugMode":false,"defaultNeurons":"ðŸ§¬[\r\n    {\r\n        \"topic\": \"summer\",\r\n        \"linkedTopics\": [],\r\n        \"stemConnected\": true,\r\n        \"details\": \"Summer is hot.\"\r\n    },\r\n    {\r\n        \"topic\": \"gardening\",\r\n        \"linkedTopics\": [],\r\n        \"stemConnected\": true,\r\n        \"details\": \"Gardening involves growing plants.\"\r\n    },\r\n    {\r\n        \"topic\": \"michigan\",\r\n        \"linkedTopics\": [],\r\n        \"stemConnected\": true,\r\n        \"details\": \"Michigan borders Canada.\"\r\n    },\r\n    {\r\n        \"topic\": \"veggies\",\r\n        \"linkedTopics\": [\"summer\", \"gardening\", \"michigan\"],\r\n        \"stemConnected\": false,\r\n        \"details\": \"Vegetables includes carrots and potatoes.\"\r\n    },\r\n    {\r\n        \"topic\": \"tomatoes\",\r\n        \"linkedTopics\": [\"veggies\"],\r\n        \"stemConnected\": false,\r\n        \"details\": \"Tomatoes are often considered fruits instead of veggies.\"\r\n    },\r\n    {\r\n        \"topic\": \"squash\",\r\n        \"linkedTopics\": [\"veggies\"],\r\n        \"stemConnected\": false,\r\n        \"details\": \"Squash can be used for a lot of things, including being made into gourd bottles.\"\r\n    }\r\n]","fgFX":"0.01","fgFY":"0.01","fgFZ":"0.01","homeX":0,"homeY":0,"importForceGraph":"@console.log(\"importing msForceGraphTool\")\r\n\r\n// const forceGraphToolBot = getBot(byTag('abIDOrigin', 'msForceGraphTool'))\r\nconst forceGraphToolBot = getBot(byTag(\"system\", \"ms-forceGraph.init\"))\r\n\r\nconsole.log(\"forceGraphTool bot found: \", !!forceGraphToolBot, forceGraphToolBot);\r\n\r\nif (!forceGraphToolBot) {\r\n    // await shout(\"hatch\", {abID: \"msForceGraphTool\", recordKey: \"6db28ddc-1835-4fb4-8ed3-5ccf26c02217\", autoHatch: true, eggParameters: {defaultBots: false, abIgnore: true}});\r\n\r\n    ab.links.search.onLookupAskID({\r\n        askID: \"fgTool\",\r\n        eggParameters: {\r\n            toolboxBot: tags.toolbox ?? \"\",\r\n            gridInformation: tags.gridInformation,\r\n            defaultBots: false\r\n        },\r\n    })\r\n}","label":"Brainstem","mergeNeurons":"@const topicsToMerge = Array.isArray(that.topics) ? that.topics : [];\r\n\r\nconsole.log(\"Merging Neurons\", topicsToMerge);\r\n\r\n// console.log(`name: ${that.name}`)\r\n// console.log(\"topicsToMerge\", topicsToMerge)\r\n\r\nlet botsToMerge = [];\r\nlet lineTo = [];\r\nlet lineFrom = [];\r\nlet linkedTopics = [];\r\nlet details = \"\";\r\n\r\nlet neuronBots = links.neurons;\r\n\r\nfor (const bot of neuronBots) {\r\n    if (topicsToMerge.includes(bot.tags.topic)) {\r\n        botsToMerge.push(bot.id);\r\n        lineTo = lineTo.concat(bot.tags.lineTo);\r\n        linkedTopics.concat(bot.tags.linkedTopics);\r\n        if (!details.includes(bot.tags.details)) {\r\n            details.length > 0 ? details += \" \" : null;\r\n            details += bot.tags.details;\r\n        }\r\n    }\r\n}\r\n\r\nfor (const bot of links.neurons) {\r\n    if (botsToMerge.some(i => bot.tags.lineTo.includes(i))) {\r\n        lineFrom.push(bot.id);\r\n        if (!details.includes(bot.tags.details)) {\r\n            details.length > 0 ? details += \" \" : null;\r\n            details += bot.tags.details;\r\n        }\r\n    }\r\n}\r\n\r\nbotsToMerge = [...new Set(botsToMerge)];\r\nlineTo = [...new Set(lineTo)];\r\nlineFrom = [...new Set(lineFrom)];\r\nlinkedTopics = [...new Set(linkedTopics)];\r\n\r\n// console.log(\"botsToMerge\", botsToMerge)\r\n// console.log(\"lineTo\", lineTo)\r\n// console.log(\"lineFrom\", lineFrom)\r\n// console.log(\"stemConnected\", lineTo.includes(thisBot.id))\r\n// console.log(\"linkedTopics\", linkedTopics)\r\n\r\nlet mergedMods = [{\r\n    \"topic\": that.name,\r\n    \"lineTo\": lineTo,\r\n    \"stemConnected\": lineTo.includes(thisBot.id) ? true : false,\r\n    \"linkedTopics\": linkedTopics,\r\n    \"details\": details\r\n}]\r\n\r\n// console.log(\"mergedMods\", mergedMods)\r\n\r\nthisBot.createFGBNeurons({ dimension: 'home', neuronMods: mergedMods, tempNeurons: true, delayLinking: true })\r\nlet newNeuronBot = getBot(byTag(\"label\", that.name));\r\n// console.log(\"newNeuronBot\", newNeuronBot)\r\n\r\nfor (const bot of lineFrom) {\r\n    let neuronBot = getBot(byID(bot));\r\n    let botLineTo = [...new Set(neuronBot.tags.lineTo)];\r\n    // console.log(\"botLineTo\", botLineTo);\r\n    let botLinkedTopics = [...new Set(neuronBot.tags.linkedTopics)];\r\n    botLinkedTopics = botLinkedTopics.filter(e => !topicsToMerge.includes(e));\r\n    botLinkedTopics.push(that.name);\r\n    // console.log(\"lineFrom linkedTopics\", botLinkedTopics);\r\n    botLineTo = botLineTo.filter(e => !botsToMerge.includes(e));\r\n    botLineTo.push(newNeuronBot.id);\r\n    // console.log(\"botLineTo\", botLineTo);\r\n    setTag(neuronBot, \"lineTo\", botLineTo);\r\n    setTag(neuronBot, \"linkedTopics\", botLinkedTopics);\r\n}\r\n\r\ndestroy(botsToMerge);\r\n\r\nthisBot.resetNeuronsLink();","onEggHatch":"@// const forceGraphToolBot = getBot(byTag('abIDOrigin', 'msForceGraphTool'))\r\n\r\n// if(!forceGraphToolBot){\r\n//     shout(\"hatch\", {abID: \"msForceGraphTool\", recordKey: \"6db28ddc-1835-4fb4-8ed3-5ccf26c02217\", autoHatch: true, eggParameters: {defaultBots: false, abIgnore: true}});\r\n// }\r\n\r\nthisBot.importForceGraph();\r\n\r\nthisBot.tags.forceGraph = 'fgb' + thisBot.id;\r\n\r\nconst eggParameters = that.eggParameters;\r\nconsole.log(\"FGB eggParameters:\", eggParameters);\r\n\r\nlet brainDimension: String = 'fgbDimension ' + thisBot.id;\r\nlet exampleNeurons: Boolean = true;\r\nlet customNeurons: Object = [];\r\nlet hatcher = null;\r\nlet altBrain = null;\r\nlet neuronCopyHolder = null;\r\nlet fgSettings = null;\r\n\r\nif (eggParameters) {\r\n    const dimension = that.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = that.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = that.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n\r\n    typeof eggParameters.brainDimension == \"string\" ? brainDimension = eggParameters.brainDimension : null;\r\n    eggParameters.exampleNeurons == false ? exampleNeurons = false : null;\r\n    Array.isArray(eggParameters.customNeurons) ? customNeurons = eggParameters.customNeurons : null;\r\n    tags.debugMode = eggParameters.debugMode == true ? true : false;\r\n    eggParameters.hatcher ? hatcher = eggParameters.hatcher : null;\r\n    eggParameters.altBrain ? altBrain = eggParameters.altBrain : null;\r\n    eggParameters.neuronCopyHolder ? neuronCopyHolder = eggParameters.neuronCopyHolder : null;\r\n    eggParameters.fgSettings ? fgSettings = eggParameters.fgSettings : null;\r\n}\r\n\r\nif(tags.debugMode == true){\r\n    brainDimension = 'home';\r\n    exampleNeurons = true;   \r\n}\r\n\r\nlet tries = 0;\r\nwhile(!getBot(byTag(\"system\", \"ms-forceGraph.botManager\"))){\r\n    if(tries > 100){\r\n        console.error(\"Could not find forcegraph system in time.\");\r\n        break;\r\n    }\r\n    else {\r\n        tries++;\r\n        await os.sleep(100);\r\n    }\r\n}\r\nawait os.sleep(100);\r\n\r\nthisBot.tags.brainDimension = brainDimension;\r\ntags.debugMode ? tags.home = true : tags.home = false;\r\nexampleNeurons == true ? thisBot.createFGBNeurons({ dimension: brainDimension, neuronMods: tags.defaultNeurons, tempNeurons: tags.debugMode}) : null;\r\ncustomNeurons.length > 0 ? thisBot.createFGBNeurons({ dimension: brainDimension, neuronMods: customNeurons}) : null;\r\n\r\nhatcher ? whisper(hatcher, \"linkBrain\", thisBot) : null;\r\nconsole.log(\"sending brain link request\");\r\n\r\nif(altBrain){\r\n    tags.transformer = altBrain;\r\n    tags.altBrain = getLink(altBrain);\r\n    tags[brainDimension+\"X\"] = 0;\r\n    tags[brainDimension+\"Y\"] = 0;\r\n    tags[brainDimension+\"Z\"] = -1;\r\n    tags.scale = 0.5;\r\n    tags.pointable = false;\r\n    tags[brainDimension] = false;\r\n    tags.forceGraph = null;\r\n    thisBot.tags.hidden = true;\r\n    setTag(links.altBrain, \"forceGraph\", 'fgb' + thisBot.id);\r\n    \r\n    let settingsTries = 0;\r\n    while(!globalThis.simContainer['fgb' + thisBot.id]){\r\n        settingsTries++;\r\n        if(settingsTries>100){ console.error(\"FGB Sim not established within time limit.\"); break; }\r\n        await os.sleep(100)\r\n        settingsTries++;\r\n    }\r\n    setTag(links.altBrain, \"fgSettings\", fgSettings);\r\n}\r\nelse {\r\n    thisBot.tags[brainDimension] = true;\r\n    tags.fgSettings = fgSettings;\r\n}\r\n\r\nif(neuronCopyHolder){\r\n    tags.neuronCopyHolder = getLink(neuronCopyHolder);\r\n}","resetNeuronsLink":"@let allNeurons = [];\r\n\r\ngetBots(b=>{\r\n    b.tags.fgbNeuron == true ? allNeurons.push(b) : null;\r\n})\r\n\r\nconst neuronsLink = getLink(allNeurons);\r\ntags.neurons = neuronsLink;\r\n\r\nawait os.sleep(120);\r\n\r\nlet neuronCopy = thisBot.copyNeurons();\r\n\r\nif(links.neuronCopyHolder){\r\n    setTag(links.neuronCopyHolder, \"neuronCopy\", neuronCopy);\r\n};","retrieveInformation":"@const informationArray = [];\r\n\r\nif (links.neurons != null) {\r\n    if (Array.isArray(links.neurons)) {\r\n        for (const neuron of links.neurons) {\r\n            neuron ? informationArray.push({ topic: neuron.tags.topic, details: neuron.tags.details }) : null;\r\n        }\r\n    }\r\n    else {\r\n        informationArray.push({ topic: links.neurons.tags.topic, details: links.neurons.tags.details });\r\n    }\r\n}\r\n\r\n\r\nreturn informationArray;","system":"forceGraphBrain.brainstem","toggleNeurons":"@// tags[tags.brainDimension] ? setTag(links.neurons, tags.brainDimension, false) : setTag(links.neurons, tags.brainDimension, true);\r\n\r\n// if(tags[tags.brainDimension] == true){\r\n//     tags[tags.brainDimension] = false;\r\n//     setTag(links.neurons, tags.brainDimension, false);\r\n// }\r\n// else {\r\n//     tags[tags.brainDimension] = true;\r\n//     setTag(links.neurons, tags.brainDimension, true);\r\n// }\r\n\r\nconsole.log(\"neuron toggle\")\r\n\r\nif (that == \"show\") {\r\n    thisBot.tags.hidden = false;\r\n    whisper(links.neurons, \"toggleNeuronVisibility\", \"show\");\r\n}\r\nelse if (that == \"hide\") {\r\n    thisBot.tags.hidden = true;\r\n    whisper(links.neurons, \"toggleNeuronVisibility\", \"hide\");\r\n}\r\nelse {\r\n    if (thisBot.tags.hidden == true) {\r\n        thisBot.tags.hidden = false;\r\n        whisper(links.neurons, \"toggleNeuronVisibility\", \"show\");\r\n    }\r\n    else {\r\n        thisBot.tags.hidden = true;\r\n        whisper(links.neurons, \"toggleNeuronVisibility\", \"hide\");\r\n    }\r\n}","updateNeurons":"@const neuronUpdates = that;\r\n\r\n// console.log(\"neurons: \", links.neurons, \"neuron updates: \", neuronUpdates);\r\n\r\nfor(const update of neuronUpdates){\r\n\r\n    // console.log(\"neuron update: \", update);\r\n    if(Array.isArray(links.neurons)){\r\n        for(const neuron of links.neurons){\r\n            if(neuron.tags.topic == update.topic){\r\n                setTag(neuron, \"details\", update.details);\r\n            }\r\n        }\r\n    }\r\n    else if(links.neurons && links.neurons.tags.topic == update.topic){\r\n        setTag(neuron, \"details\", update.details);\r\n    }\r\n}","fgBrain":"true","abVersion":"10.9","home":false,"onClick":"@\n    configBot.tags.gridPortal = \"home\";\n","transformer":"182bf145-7990-4e1f-8fd5-34f7175a01bd","altBrain":null,"homeZ":-1,"scale":0.5,"pointable":false,"hidden":true,"neuronCopyHolder":null,"forceGraph":null,"neurons":null}}}}