{"version":1,"state":{"20f787b2-f585-4c42-a1bc-a45df1b63913":{"id":"20f787b2-f585-4c42-a1bc-a45df1b63913","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","abIDOrigin":"msForceGraphTool","abIDStudio":"6db28ddc-1835-4fb4-8ed3-5ccf26c02217","autoStart":"false","experimentalSettings":"true","newSim":"@// checks to make sure that the simContainer global variable exists, and creates it if it doesn't\r\nglobalThis.simContainer ? null : globalThis.simContainer = {};\r\n\r\n// sets up variables for create a force graph sim using d3-force-3d\r\nlet {\r\n    simName,\r\n    nodes = [],\r\n    dimensions = 3,\r\n    gravity = true,\r\n    gravityPos = { 'x': 0, 'y': 0, 'z': 0 },\r\n    gravityRadius = 0,\r\n    gravityStrength = 0.05,\r\n    collision = true,\r\n    collisionRadius = 1,\r\n    charge = true,\r\n    chargeStrength = -1,\r\n    links = [],\r\n    linkDistance = 5\r\n} = that;\r\n\r\n// simName = simName.trim()\r\n\r\nif (tags.experimentalSettings == true) {\r\n    getBots((bot) => {\r\n        if (bot.tags.forceGraph == simName) {\r\n            if (bot.tags.fgDimensions) {\r\n                if (Number.isInteger(bot.tags.fgDimensions)) {\r\n                    if (Number(bot.tags.fgDimensions) > 0 && Number(bot.tags.fgDimensions) < 4) {\r\n                        dimensions = Number(bot.tags.fgDimensions)\r\n                    }\r\n                }\r\n            }\r\n            if (bot.tags.fgGravity == false) {\r\n                gravity = false\r\n            }\r\n            if (Number(bot.tags.fgGravityX) || Number(bot.tags.fgGravityX) == 0) {\r\n                gravityPos.x = Number(bot.tags.fgGravityX)\r\n            }\r\n            if (Number(bot.tags.fgGravityY) || Number(bot.tags.fgGravityY) == 0) {\r\n                gravityPos.y = Number(bot.tags.fgGravityY)\r\n            }\r\n            if (Number(bot.tags.fgGravityZ) || Number(bot.tags.fgGravityZ) == 0) {\r\n                gravityPos.z = Number(bot.tags.fgGravityZ)\r\n            }\r\n            if (typeof bot.tags.fgGravityPosition == 'object') {\r\n                if (Array.isArray(bot.tags.fgGravityPosition)) {\r\n                    Number(bot.tags.fgGravityPosition[0]) || Number(bot.tags.fgGravityPosition[0]) == 0 ? gravityPos.x = Number(bot.tags.fgGravityPosition[0]) : null\r\n                    Number(bot.tags.fgGravityPosition[1]) || Number(bot.tags.fgGravityPosition[1]) == 0 ? gravityPos.y = Number(bot.tags.fgGravityPosition[1]) : null\r\n                    Number(bot.tags.fgGravityPosition[2]) || Number(bot.tags.fgGravityPosition[2]) == 0 ? gravityPos.z = Number(bot.tags.fgGravityPosition[2]) : null\r\n                }\r\n                else {\r\n                    Number(bot.tags.fgGravityPosition.x) || Number(bot.tags.fgGravityPosition.x) == 0 ? gravityPos.x = Number(bot.tags.fgGravityPosition.x) : null\r\n                    Number(bot.tags.fgGravityPosition.y) || Number(bot.tags.fgGravityPosition.y) == 0 ? gravityPos.y = Number(bot.tags.fgGravityPosition.y) : null\r\n                    Number(bot.tags.fgGravityPosition.z) || Number(bot.tags.fgGravityPosition.z) == 0 ? gravityPos.z = Number(bot.tags.fgGravityPosition.z) : null\r\n                }\r\n            }\r\n            if (Number(bot.tags.fgGravityRadius) || Number(bot.tags.fgGravityRadius)) {\r\n                gravityRadius = Number(bot.tags.fgGravityRadius)\r\n            }\r\n            if (Number(bot.tags.fgGravityStrength) || Number(bot.tags.fgGravityStrength) == 0) {\r\n                gravityStrength = Number(bot.tags.fgGravityStrength)\r\n            }\r\n            if (bot.tags.fgCollision == false) {\r\n                collision = false\r\n            }\r\n            if (Number(bot.tags.fgCollisionRadius) || Number(bot.tags.fgCollisionRadius) == 0) {\r\n                collisionRadius = Number(bot.tags.fgCollisionRadius)\r\n            }\r\n            if (bot.tags.fgCharge == false) {\r\n                charge = false\r\n            }\r\n            if (Number(bot.tags.fgChargeStrength) || Number(bot.tags.fgChargeStrength) == 0) {\r\n                chargeStrength = Number(bot.tags.fgChargeStrength)\r\n            }\r\n        }\r\n    })\r\n\r\n    let settings = {\r\n        dimensions,\r\n        gravity,\r\n        gravityPos,\r\n        gravityRadius,\r\n        gravityStrength,\r\n        collision,\r\n        collisionRadius,\r\n        charge,\r\n        chargeStrength\r\n    };\r\n\r\n    console.log(`${simName} settings`, settings)\r\n}\r\n\r\n// creates the sim in a paused state\r\nlet newSim = tags.autoStart == true ? d3.forceSimulation(nodes, dimensions) : d3.forceSimulation(nodes, dimensions).stop();\r\n\r\n// creates a radial force that mimics gravity by giving the force a center of (0,0,0) and a radius of 0\r\nif (gravity) {\r\n    newSim.force('radialGravity', d3.forceRadial(gravityRadius, gravityPos.x, gravityPos.y, gravityPos.z).strength(gravityStrength));\r\n    newSim.gravitySwitch = true\r\n}\r\nelse {\r\n    newSim.force('radialGravity', d3.forceRadial(gravityRadius, gravityPos.x, gravityPos.y, gravityPos.z).strength(0));\r\n    newSim.gravitySwitch = false\r\n}\r\nnewSim.gravityStrength = gravityStrength\r\n\r\n// creates collision between nodes with the given radius\r\nif (collision) {\r\n    newSim.force('collision', d3.forceCollide(collisionRadius));\r\n    newSim.collisionSwitch = true\r\n}\r\nelse {\r\n    newSim.force('collision', d3.forceCollide(0));\r\n    newSim.collisionSwitch = false\r\n}\r\nnewSim.collisionRadius = collisionRadius\r\n\r\n// creates the repelling charge force that makes nodes push each other away\r\nif (charge) {\r\n    newSim.force('charge', d3.forceManyBody().strength(chargeStrength));\r\n    newSim.chargeSwitch = true\r\n}\r\nelse {\r\n    newSim.force('charge', d3.forceManyBody().strength(0));\r\n    newSim.chargeSwitch = false\r\n}\r\nnewSim.chargeStrength = chargeStrength\r\n\r\n// sets the newly created sim as a global variable\r\nsimContainer[simName] = newSim;\r\n\r\n// console.log(`new sim ${simName} created`);\r\nconsole.log('sim container: ', simContainer);\r\n\r\ntags.autoStart == true ? simManager.start(simName) : null","onBeforeInitialize":"@// sets this bot to the simManager global variable\r\nglobalThis.simManager = thisBot;","start":"@// starts a simulation, usually whenever a node is being dragged, using the provided sim name when called\r\n\r\nlet simName = that;\r\n\r\nconsole.log(`starting force graph '${simName}'`);\r\n\r\n// sets the sim's alpha (analogous to a countdown timer) to the maximum value of one before having the sim resume if stopped\r\nsimContainer[simName].alpha(1);\r\nsimContainer[simName].restart();\r\n\r\n// gets the nodes and links needed for the sim\r\nlet nodes = await nodeManager.getNodesFromBots();\r\nlet botLinks = await nodeManager.getLinksFromBots();\r\n\r\n// console.log('nodes',nodes)\r\n// for(let sim in botLinks){\r\n//     console.log(`${sim} sim links`, botLinks[sim].links())\r\n// }\r\n// console.log('nodes[simName]',nodes[simName])\r\n// botLinks[simName] ? console.log('botLinks[simName].links()', botLinks[simName].links()) : null\r\n\r\n// assignes the nodes and the links to the sim using the built in methods\r\nsimContainer[simName].nodes(nodes[simName]);\r\nbotLinks[simName] ? simContainer[simName].force('links', botLinks[simName]) : null;\r\n\r\n// sets the sim to run the visualUpdater whenever the simulation ticks\r\nsimContainer[simName].on('tick', () => {\r\n    // console.log(`${simName} simulation tick`);\r\n    simManager.visualUpdater(simName);\r\n    // console.log(simContainer[simName].nodes());\r\n});\r\n\r\n// sets the simulation to console out whenever the force graph simulation finishes running\r\nsimContainer[simName].on('end', () => {\r\n    console.log(`force graph '${simName}' end`);\r\n});","system":"ms-forceGraph.simManager","updateSim":"@let {\r\n    simName,\r\n    setting,\r\n    value\r\n} = that\r\n\r\nif(setting == \"settingsObject\"){\r\n    console.log(\"settingsObject detected: \", value);\r\n    if(typeof value == 'object'){\r\n        let settingKeys = Object.keys(value);\r\n        for(const settingKey of settingKeys){\r\n            // console.log(`settingFound: ${settingKey}`, value[settingKey])\r\n            updateForceGraphSetting(settingKey, value[settingKey]);\r\n        }\r\n    }\r\n}\r\nelse {\r\n    updateForceGraphSetting(setting, value);\r\n}\r\n\r\nfunction updateForceGraphSetting(settingPassed, valuePassed) {\r\n    console.log(`setting passed: ${settingPassed}, value passed: `, valuePassed);\r\n    switch (settingPassed) {\r\n        case 'gravity':\r\n            if (valuePassed == false) {\r\n                simContainer[simName].gravitySwitch = false;\r\n                simContainer[simName].force('radialGravity').strength(0);\r\n                console.log(`force graph '${simName}' gravity disabled`);\r\n            }\r\n            else {\r\n                simContainer[simName].gravitySwitch = true;\r\n                simContainer[simName].force('radialGravity').strength(simContainer[simName].gravityStrength);\r\n                console.log(`force graph '${simName}' gravity enabled`);\r\n            }\r\n            break;\r\n        case 'gravityPosition':\r\n            if (typeof valuePassed == 'object') {\r\n                if (Array.isArray(valuePassed)) {\r\n                    Number(valuePassed[0]) || Number(valuePassed[0]) == 0 ? simContainer[simName].force('radialGravity').x(Number(valuePassed[0])) : null\r\n                    Number(valuePassed[1]) || Number(valuePassed[1]) == 0 ? simContainer[simName].force('radialGravity').y(Number(valuePassed[1])) : null\r\n                    Number(valuePassed[2]) || Number(valuePassed[2]) == 0 ? simContainer[simName].force('radialGravity').z(Number(valuePassed[2])) : null\r\n                }\r\n                else {\r\n                    Number(valuePassed.x) || Number(valuePassed.x) == 0 ? simContainer[simName].force('radialGravity').x(Number(valuePassed.x)) : null\r\n                    Number(valuePassed.y) || Number(valuePassed.y) == 0 ? simContainer[simName].force('radialGravity').y(Number(valuePassed.y)) : null\r\n                    Number(valuePassed.z) || Number(valuePassed.z) == 0 ? simContainer[simName].force('radialGravity').z(Number(valuePassed.z)) : null\r\n                }\r\n\r\n                let sgPos = {\r\n                    x: simContainer[simName].force('radialGravity').x(),\r\n                    y: simContainer[simName].force('radialGravity').y(),\r\n                    z: simContainer[simName].force('radialGravity').z()\r\n                }\r\n\r\n                console.log(`force graph '${simName}' gravity origin updated: x = ` + sgPos.x + ', y = ' + sgPos.y + ', z = ' + sgPos.z)\r\n            }\r\n            break;\r\n        case 'gravityX':\r\n            // console.log('valuePassed: ', valuePassed)\r\n            if (Number(valuePassed) || Number(valuePassed) == 0) {\r\n                simContainer[simName].force('radialGravity').x(Number(valuePassed))\r\n            }\r\n            else if (valuePassed == undefined) {\r\n                simContainer[simName].force('radialGravity').x(Number(0))\r\n            }\r\n            console.log(`force graph '${simName}' gravity origin X updated: ` + simContainer[simName].force('radialGravity').x())\r\n            break;\r\n        case 'gravityY':\r\n            // console.log('valuePassed: ', valuePassed)\r\n            if (Number(valuePassed) || Number(valuePassed) == 0) {\r\n                simContainer[simName].force('radialGravity').y(Number(valuePassed))\r\n            }\r\n            else if (valuePassed == undefined) {\r\n                simContainer[simName].force('radialGravity').y(Number(0))\r\n            }\r\n            console.log(`force graph '${simName}' gravity origin Y updated: ` + simContainer[simName].force('radialGravity').y())\r\n            break;\r\n        case 'gravityZ':\r\n            // console.log('valuePassed: ', valuePassed)\r\n            if (Number(valuePassed) || Number(valuePassed) == 0) {\r\n                simContainer[simName].force('radialGravity').z(Number(valuePassed))\r\n            }\r\n            else if (valuePassed == undefined) {\r\n                simContainer[simName].force('radialGravity').z(Number(0))\r\n            }\r\n            console.log(`force graph '${simName}' gravity origin Z updated: ` + simContainer[simName].force('radialGravity').z())\r\n            break;\r\n        case 'gravityStrength':\r\n            if (Number(valuePassed) || Number(valuePassed) == 0) {\r\n                simContainer[simName].gravitySwitch == true ? simContainer[simName].force('radialGravity').strength(Number(valuePassed)) : null\r\n                simContainer[simName].gravityStrength = Number(valuePassed)\r\n            }\r\n            else if (valuePassed == undefined) {\r\n                simContainer[simName].gravitySwitch == true ? simContainer[simName].force('radialGravity').strength(Number(0.05)) : null\r\n                simContainer[simName].gravityStrength = 0.05\r\n            }\r\n            console.log(`force graph '${simName}' gravity strength updated: ` + simContainer[simName].gravityStrength)\r\n            break;\r\n        case 'gravityRadius':\r\n            // console.log('valuePassed: ', valuePassed)\r\n            let grSet = 0.05\r\n            if (Number(valuePassed) || Number(valuePassed) == 0) {\r\n                simContainer[simName].force('radialGravity').radius(Number(valuePassed))\r\n                grSet = Number(valuePassed)\r\n            }\r\n            else if (valuePassed == undefined) {\r\n                simContainer[simName].force('radialGravity').strength(Number(0))\r\n            }\r\n            console.log(`force graph '${simName}' gravity radius updated: ` + grSet)\r\n            break;\r\n        case 'dimensions':\r\n            // console.log('valuePassed: ', valuePassed)\r\n            if (Number.isInteger(valuePassed) && Number(valuePassed) > 0 && Number(valuePassed) < 4) {\r\n                simContainer[simName].numDimensions(Number(valuePassed))\r\n            }\r\n            else if (valuePassed == undefined) {\r\n                simContainer[simName].numDimensions(Number(3))\r\n            }\r\n            console.log(`force graph '${simName}' dimensions updated: ` + simContainer[simName].numDimensions())\r\n            break;\r\n        case 'collision':\r\n            if (valuePassed == false) {\r\n                simContainer[simName].collisionSwitch = false;\r\n                simContainer[simName].force('collision').radius(0);\r\n                console.log(`force graph '${simName}' collision disabled`);\r\n            }\r\n            else {\r\n                simContainer[simName].collisionSwitch = true;\r\n                simContainer[simName].force('collision').radius(simContainer[simName].collisionRadius);\r\n                console.log(`force graph '${simName}' collision enabled`);\r\n            }\r\n            break;\r\n        case 'collisionRadius':\r\n            if (Number(valuePassed) || Number(valuePassed) == 0) {\r\n                simContainer[simName].collisionSwitch == true ? simContainer[simName].force('collision').radius(Number(valuePassed)) : null\r\n                simContainer[simName].collisionRadius = Number(valuePassed)\r\n            }\r\n            else if (valuePassed == undefined) {\r\n                simContainer[simName].collisionSwitch == true ? simContainer[simName].force('collision').radius(Number(1)) : null\r\n                simContainer[simName].collisionRadius = 1\r\n            }\r\n            console.log(`force graph '${simName}' collision radius updated: ` + simContainer[simName].collisionRadius)\r\n            break;\r\n        case 'charge':\r\n            if (valuePassed == false) {\r\n                simContainer[simName].chargeSwitch = false;\r\n                simContainer[simName].force('charge').strength(0);\r\n                console.log(`force graph '${simName}' charge disabled`);\r\n            }\r\n            else {\r\n                simContainer[simName].chargeSwitch = true;\r\n                simContainer[simName].force('charge').strength(simContainer[simName].chargeStrength);\r\n                console.log(`force graph '${simName}' charge enabled`);\r\n            }\r\n            break;\r\n        case 'chargeStrength':\r\n            if (Number(valuePassed) || Number(valuePassed) == 0) {\r\n                simContainer[simName].chargeSwitch == true ? simContainer[simName].force('charge').strength(Number(valuePassed)) : null\r\n                simContainer[simName].chargeStrength = Number(valuePassed)\r\n            }\r\n            else if (valuePassed == undefined) {\r\n                simContainer[simName].chargeSwitch == true ? simContainer[simName].force('charge').strength(Number(-1)) : null\r\n                simContainer[simName].chargeStrength = -1\r\n            }\r\n            console.log(`force graph '${simName}' charge strength updated: ` + simContainer[simName].chargeStrength)\r\n            break;\r\n        default:\r\n            console.log('Setting not found.')\r\n            break;\r\n    }\r\n}\r\n\r\ntags.autoStart == true ? simManager.start(simName) : null","visualUpdater":"@// grabs the nodes from the running simulation and sets the positions of the conjoining bots in the gridPortal to match the simulated positions\r\nlet nodes = simContainer[that] ? simContainer[that].nodes() : [];\r\n// console.log(nodes);\r\n\r\n\r\nlet notFound = [];\r\nfor (let i = 0; i < nodes.length; i++) {\r\n    let dim = configBot.tags.gridPortal;\r\n    let bot = getBot(byID(nodes[i].botID));\r\n    let dimNum = simContainer[that].numDimensions()\r\n    if (bot) {\r\n        setTag(bot, dim + 'X', nodes[i].x);\r\n        dimNum > 1 ? setTag(bot, dim + 'Y', nodes[i].y) : setTag(bot, dim + 'Y', simContainer[that].force('radialGravity').y());\r\n        dimNum > 2 ? setTag(bot, dim + 'Z', nodes[i].z) : setTag(bot, dim + 'Z', simContainer[that].force('radialGravity').z());\r\n    }\r\n    else {\r\n        notFound.push(i);\r\n    }\r\n};\r\n\r\n// removes nodes from the sim if the bot can't be found\r\nif(notFound.length > 0){\r\n    notFound.sort((a, b)=>{\r\n        return b - a\r\n    });\r\n\r\n    for(let i = 0; i < notFound.length; i++){\r\n        nodes = nodes.splice(notFound[i], 1)\r\n    };\r\n\r\n    for(let i = 0; i < nodes.length; i++){\r\n        nodes[i].index = i\r\n    }\r\n}","fgTool":"true","abVersion":"10.6"}},"2ae0eadc-e1fb-43d0-a3f4-db41af0a5a1e":{"id":"2ae0eadc-e1fb-43d0-a3f4-db41af0a5a1e","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","abIDOrigin":"msForceGraphTool","abIDStudio":"6db28ddc-1835-4fb4-8ed3-5ccf26c02217","defaultBots":"🧬[\r\n    {\r\n        \"color\": \"#00D9CD\",\r\n        \"forceGraph\": \"exampleForceGraph\",\r\n        \"home\": true,\r\n        \"homeX\": 4.09562257138731,\r\n        \"homeY\": 4.133350878372885,\r\n        \"homeZ\": 0.5726427239999277,\r\n        \"system\": \"fgExampleBots\",\r\n        \"name\": \"cyan3\",\r\n        \"onCreate\": \"@await os.sleep(100);\\r\\n\\r\\nlet botID: string;\\r\\n\\r\\nconst botsToLinkTo = getBots(b=>{\\r\\n    if(b.tags.name == \\\"cyan2\\\"){\\r\\n        botID = b.id;\\r\\n    }\\r\\n})\\r\\n\\r\\ntags.lineTo = botID;\"\r\n    },\r\n    {\r\n        \"color\": \"#00D9CD\",\r\n        \"forceGraph\": \"exampleForceGraph\",\r\n        \"home\": true,\r\n        \"homeX\": -0.9065879432236036,\r\n        \"homeY\": 3.6517746792506856,\r\n        \"homeZ\": 3.526804943259359,\r\n        \"system\": \"fgExampleBots\",\r\n        \"name\": \"cyan1\",\r\n        \"onCreate\": \"@await os.sleep(100);\\r\\n\\r\\nconst botIDs = [];\\r\\n\\r\\nconst botsToLinkTo = getBots(b=>{\\r\\n    if(b.tags.name == \\\"cyan1\\\" || b.tags.name == \\\"orange2\\\" || b.tags.name == \\\"cyan3\\\"){\\r\\n        botIDs.push(b.id);\\r\\n    }\\r\\n})\\r\\n\\r\\ntags.lineTo = botIDs;\"\r\n    },\r\n    {\r\n        \"color\": \"#AEA1FF\",\r\n        \"forceGraph\": \"exampleForceGraph\",\r\n        \"home\": true,\r\n        \"homeX\": 0.42836141316649673,\r\n        \"homeY\": -1.1455350377199938,\r\n        \"homeZ\": -5.223088785228663,\r\n        \"system\": \"fgExampleBots\",\r\n        \"name\": \"purple2\",\r\n        \"onCreate\": \"@await os.sleep(100);\\r\\n\\r\\nlet botID: String;\\r\\n\\r\\nconst botsToLinkTo = getBots(b=>{\\r\\n    if(b.tags.name == \\\"purple1\\\"){\\r\\n        botID = b.id;\\r\\n    }\\r\\n})\\r\\n\\r\\ntags.lineTo = botID;\"\r\n    },\r\n    {\r\n        \"color\": \"#FA28FF\",\r\n        \"fgSettings\": {\r\n            \"gravity\": true,\r\n            \"gravityPosition\": {\r\n                \"x\": 0,\r\n                \"y\": 0,\r\n                \"z\": 0\r\n            },\r\n            \"gravityX\": 0,\r\n            \"gravityY\": 0,\r\n            \"gravityZ\": 0,\r\n            \"gravityStrength\": 0.05,\r\n            \"gravityRadius\": 0,\r\n            \"dimensions\": 3,\r\n            \"collision\": true,\r\n            \"collisionRadius\": 1,\r\n            \"charge\": true,\r\n            \"chargeStrength\": -1,\r\n            \"linkDistance\": 5\r\n        },\r\n        \"forceGraph\": \"exampleForceGraph\",\r\n        \"home\": true,\r\n        \"homeX\": 4.197789456974843,\r\n        \"homeY\": -1.7939264958482326,\r\n        \"homeZ\": -0.13642132975694657,\r\n        \"label\": \"graphSettings\",\r\n        \"system\": \"fgExampleBots\",\r\n        \"name\": \"fgSettings\",\r\n        \"onCreate\": \"@await os.sleep(100);\\r\\n\\r\\nconst botIDs = [];\\r\\n\\r\\nconst botsToLinkTo = getBots(b=>{\\r\\n    if(b.tags.name == \\\"purple2\\\" || b.tags.name == \\\"cyan3\\\" || b.tags.name == \\\"orange1\\\"){\\r\\n        botIDs.push(b.id);\\r\\n    }\\r\\n})\\r\\n\\r\\ntags.lineTo = botIDs;\"\r\n    },\r\n    {\r\n        \"color\": \"#00D9CD\",\r\n        \"forceGraph\": \"exampleForceGraph\",\r\n        \"home\": true,\r\n        \"homeX\": -0.8026979421665384,\r\n        \"homeY\": 4.395161323076704,\r\n        \"homeZ\": -2.563512339781722,\r\n        \"system\": \"fgExampleBots\",\r\n        \"name\": \"cyan2\",\r\n        \"onCreate\": \"@await os.sleep(100);\\r\\n\\r\\nconst botIDs = [];\\r\\n\\r\\nconst botsToLinkTo = getBots(b=>{\\r\\n    if(b.tags.name == \\\"cyan1\\\" || b.tags.name == \\\"purple2\\\"){\\r\\n        botIDs.push(b.id);\\r\\n    }\\r\\n})\\r\\n\\r\\ntags.lineTo = botIDs;\"\r\n    },\r\n    {\r\n        \"color\": \"#FE9200\",\r\n        \"forceGraph\": \"exampleForceGraph\",\r\n        \"home\": true,\r\n        \"homeX\": -3.8205452680552168,\r\n        \"homeY\": -5.48226032976862,\r\n        \"homeZ\": 2.358508291151383,\r\n        \"system\": \"fgExampleBots\",\r\n        \"name\": \"orange2\",\r\n        \"onCreate\": \"@await os.sleep(100);\\r\\n\\r\\nlet botID: string;\\r\\n\\r\\nconst botsToLinkTo = getBots(b=>{\\r\\n    if(b.tags.name == \\\"orange1\\\"){\\r\\n        botID = b.id;\\r\\n    }\\r\\n})\\r\\n\\r\\ntags.lineTo = botID;\"\r\n    },\r\n    {\r\n        \"color\": \"#FE9200\",\r\n        \"forceGraph\": \"exampleForceGraph\",\r\n        \"home\": true,\r\n        \"homeX\": 0.21255009376652395,\r\n        \"homeY\": -2.3883341780717338,\r\n        \"homeZ\": 4.785029550867039,\r\n        \"system\": \"fgExampleBots\",\r\n        \"name\": \"orange1\",\r\n        \"onCreate\": \"@await os.sleep(100);\\r\\n\\r\\nlet botID: string;\\r\\n\\r\\nconst botsToLinkTo = getBots(b=>{\\r\\n    if(b.tags.name == \\\"orange2\\\"){\\r\\n        botID = b.id;\\r\\n    }\\r\\n})\\r\\n\\r\\ntags.lineTo = botID;\"\r\n    },\r\n    {\r\n        \"color\": \"#AEA1FF\",\r\n        \"forceGraph\": \"exampleForceGraph\",\r\n        \"home\": true,\r\n        \"homeX\": -3.7876337360974244,\r\n        \"homeY\": -4.619838515383662,\r\n        \"homeZ\": -3.8583454946940643,\r\n        \"system\": \"fgExampleBots\",\r\n        \"name\": \"purple1\",\r\n        \"onCreate\": \"@await os.sleep(100);\\r\\n\\r\\nconst botIDs = [];\\r\\n\\r\\nconst botsToLinkTo = getBots(b=>{\\r\\n    if(b.tags.name == \\\"orange2\\\" || b.tags.name == \\\"purple2\\\"){\\r\\n        botIDs.push(b.id);\\r\\n    }\\r\\n})\\r\\n\\r\\ntags.lineTo = botIDs;\"\r\n    }\r\n]","onEggHatch":"@const eggParameters = that.eggParameters;\r\nlet makeDefaultBots = true;\r\nlet abIgnoreThis = false;\r\n\r\nif (eggParameters) {\r\n\r\n    if (eggParameters.customBots) {\r\n        create(eggParameters.customBots);\r\n    }\r\n\r\n    if(eggParameters.defaultBots == false){\r\n        makeDefaultBots = false;\r\n    }\r\n\r\n    if(eggParameters.abIgnore){\r\n        abIgnoreThis = true;\r\n    }\r\n\r\n}\r\n\r\nif(makeDefaultBots){\r\n    create(tags.defaultBots)\r\n}\r\n\r\nif(abIgnoreThis){\r\n    await os.sleep(500);\r\n    getBots(b=>{\r\n        const systemTag = b.tags.system;\r\n        if(String(systemTag).includes(\"ms-forceGraph\") && b.tags.abIDOrigin == \"msForceGraphTool\"){\r\n            setTag(b, 'abIgnore', true);\r\n        }\r\n    })\r\n}","system":"ms-forceGraph.hatchTool","fgTool":"true","abVersion":"10.6"}},"5dc1e882-740f-4e00-8513-96e128d5adb0":{"id":"5dc1e882-740f-4e00-8513-96e128d5adb0","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","abIDOrigin":"msForceGraphTool","abIDStudio":"6db28ddc-1835-4fb4-8ed3-5ccf26c02217","onBeforeInitialize":"@// imports the d3-force-3d library for use in casual\r\nconst d3 = await import('https://cdn.jsdelivr.net/npm/d3-force-3d@3.0.5/+esm');\r\n\r\n// sets the library as a global variable\r\nglobalThis.d3 = d3;\r\n\r\n// confirms that the library has been imported in the console\r\nconsole.log('[d3f3d] d3 imported');\r\nconsole.log(d3);","system":"ms-forceGraph.3d-force-3d","fgTool":"true","abVersion":"10.6"}},"6b6b2546-3dc3-4f9a-8a7a-c8d66c147449":{"id":"6b6b2546-3dc3-4f9a-8a7a-c8d66c147449","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","abIDOrigin":"msForceGraphTool","abIDStudio":"6db28ddc-1835-4fb4-8ed3-5ccf26c02217","system":"ms-forceGraph._packageInfo","version":"1.4.1","fgTool":"true","abVersion":"10.6"}},"940784d5-8418-4834-a8d9-b3792eb0b0d7":{"id":"940784d5-8418-4834-a8d9-b3792eb0b0d7","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","abIDOrigin":"msForceGraphTool","abIDStudio":"6db28ddc-1835-4fb4-8ed3-5ccf26c02217","forceUpdate":"@// thisBot.onAnyBotsChanged([\r\n//     {\r\n//         tags: [\r\n//             'forceGraph',\r\n//             'fgGravity',\r\n//             'fgGravityPosition',\r\n//             'fgGravityStrength',\r\n//             'fgGravityRadius',\r\n//             'fgDimensions',\r\n//             'fgCollision',\r\n//             'fgCollisionRadius',\r\n//             'fgCharge',\r\n//             'fgChargeStrength'\r\n//         ]\r\n//     }\r\n// ]);\r\nif (globalThis.nodeManager) {\r\n    let sims = nodeManager.getSimsFromBots();\r\n    for (let sim in sims) {\r\n        simManager.newSim({\r\n            simName: sims[sim]\r\n        });\r\n    };\r\n};","onAnyBotDrag":"@// console.log('drag started');\r\n// console.log('dragged bot',that.bot);\r\n// console.log('bot sim: ' + that.bot.tags.forceGraph);\r\n\r\n// checks to see if a bot with a populated forceGraph tag is being dragged, and if so, start whatever simulation that bot is set to in that tag while enabling custom dragging\r\nif (that.bot.tags.forceGraph) {\r\n    os.enableCustomDragging();\r\n    if (globalThis.simContainer) {\r\n        if (simContainer[that.bot.tags.forceGraph]) {\r\n            simManager.start(that.bot.tags.forceGraph);\r\n        }\r\n        // else {\r\n        //     simManager.newSim({\r\n        //         simName: that.bot.tags.forceGraph\r\n        //     });\r\n        // }\r\n    };\r\n};","onAnyBotDragging":"@// console.log('custom dragging');\r\n\r\n// grabs the sim name from the bot and continually sets the sim's alpha value to 1, the same as when a sim is first started\r\nlet simName = that.bot.tags.forceGraph;\r\nsimContainer[simName].alpha(1);\r\n\r\n// grabs the nodes from the sim and fixes the node representing the currently dragged bot to the current dragging position\r\nlet nodes = simContainer[simName].nodes();\r\nfor(let node in nodes){\r\n    if(nodes[node].botID == that.bot.id){\r\n        nodes[node].fx = that.to.x;\r\n        nodes[node].fy = that.to.y;\r\n        nodes[node].fz = 0;\r\n    };\r\n};\r\n\r\n// sets the alterned nodes back to the sim\r\nsimContainer[simName].nodes(nodes);","onAnyBotDrop":"@// resets the nodes for the sim to respond to the current bot positions on dragging bot drop\r\nlet graph = that.bot.tags.forceGraph;\r\nif(graph && globalThis.simContainer){\r\n    let nodes = nodeManager.getNodesFromBots();\r\n    let simName = that.bot.tags.forceGraph;\r\n    simContainer[simName] ? simContainer[simName].nodes(nodes[simName]) : null;\r\n};","onAnyBotsAdded":"@// updates sims whenever new bots are added to the sim\r\nlet bots = that.bots;\r\n\r\nfor (let i = 0; i < bots.length; i++) {\r\n    if (bots[i].tags.forceGraph) {\r\n        if (simContainer[bots[i].tags.forceGraph]) {\r\n            let tags = Object.keys(bots[i].tags)\r\n            let update = false\r\n            let settings = [\r\n                'fgDimensions',\r\n                'fgGravity',\r\n                'fgGravityPosition',\r\n                'fgGravityRadius',\r\n                'fgGravityStrength',\r\n                'fgCollision',\r\n                'fgCollisionRadius',\r\n                'fgCharge',\r\n                'fgChargeStrength',\r\n                'fgSettings'\r\n            ]\r\n            for(let j = 0; j < settings.length; j++){\r\n                tags.includes(settings[j]) ? update = true : null\r\n                if(update == true){\r\n                    break\r\n                }\r\n            }\r\n            update == true ? thisBot.forceUpdate() : null\r\n        }\r\n        else {\r\n            thisBot.forceUpdate();\r\n        }\r\n    };\r\n};","onAnyBotsChanged":"@// checks for changed forceGraph tags and makes sure that sims exist for those tags\r\n// console.log(that)\r\nif (globalThis.nodeManager) {\r\n    for (let changes of that) {\r\n        // creates any sims needed whenever a forceGraph tag is edited on a bot\r\n        if (changes.tags.includes('forceGraph')) {\r\n            // console.log('forceGraph tag changed')\r\n            let sims = nodeManager.getSimsFromBots();\r\n            for (let sim in sims) {\r\n                simManager.newSim({\r\n                    simName: sims[sim]\r\n                });\r\n            };\r\n        };\r\n        // if (changes.tags.includes('fgGravity')) {};\r\n        // if (changes.tags.includes('fgGravityPosition') \r\n        // || changes.tags.includes('fgGravityX') \r\n        // || changes.tags.includes('fgGravityY') \r\n        // || changes.tags.includes('fgGravityZ')) {};\r\n        if (changes.tags.includes('fgGravity')) {\r\n            simManager.updateSim({\r\n                simName: changes.bot.tags.forceGraph,\r\n                setting: 'gravity',\r\n                value: changes.bot.tags.fgGravity\r\n            })\r\n        };\r\n        if (changes.tags.includes('fgGravityPosition')) {\r\n            simManager.updateSim({\r\n                simName: changes.bot.tags.forceGraph,\r\n                setting: 'gravityPosition',\r\n                value: changes.bot.tags.fgGravityPosition\r\n            })\r\n        };\r\n        if (changes.tags.includes('fgGravityX')) { \r\n            simManager.updateSim({\r\n                simName: changes.bot.tags.forceGraph,\r\n                setting: 'gravityX',\r\n                value: changes.bot.tags.fgGravityX\r\n            })\r\n        };\r\n        if (changes.tags.includes('fgGravityY')) { \r\n            simManager.updateSim({\r\n                simName: changes.bot.tags.forceGraph,\r\n                setting: 'gravityY',\r\n                value: changes.bot.tags.fgGravityY\r\n            })\r\n        };\r\n        if (changes.tags.includes('fgGravityZ')) { \r\n            simManager.updateSim({\r\n                simName: changes.bot.tags.forceGraph,\r\n                setting: 'gravityZ',\r\n                value: changes.bot.tags.fgGravityZ\r\n            })\r\n        };\r\n        if (changes.tags.includes('fgGravityStrength')) { \r\n            simManager.updateSim({\r\n                simName: changes.bot.tags.forceGraph,\r\n                setting: 'gravityStrength',\r\n                value: changes.bot.tags.fgGravityStrength\r\n            })\r\n        };\r\n        if (changes.tags.includes('fgGravityRadius')) { \r\n            simManager.updateSim({\r\n                simName: changes.bot.tags.forceGraph,\r\n                setting: 'gravityRadius',\r\n                value: changes.bot.tags.fgGravityRadius\r\n            })\r\n        };\r\n        if (changes.tags.includes('fgDimensions')) { \r\n            simManager.updateSim({\r\n                simName: changes.bot.tags.forceGraph,\r\n                setting: 'dimensions',\r\n                value: changes.bot.tags.fgDimensions\r\n            })\r\n        };\r\n        if (changes.tags.includes('fgCollision')) { \r\n            simManager.updateSim({\r\n                simName: changes.bot.tags.forceGraph,\r\n                setting: 'collision',\r\n                value: changes.bot.tags.fgCollision\r\n            })\r\n        };\r\n        if (changes.tags.includes('fgCollisionRadius')) { \r\n            simManager.updateSim({\r\n                simName: changes.bot.tags.forceGraph,\r\n                setting: 'collisionRadius',\r\n                value: changes.bot.tags.fgCollisionRadius\r\n            })\r\n        };\r\n        if (changes.tags.includes('fgCharge')) { \r\n            simManager.updateSim({\r\n                simName: changes.bot.tags.forceGraph,\r\n                setting: 'charge',\r\n                value: changes.bot.tags.fgCharge\r\n            })\r\n        };\r\n        if (changes.tags.includes('fgChargeStrength')) { \r\n            simManager.updateSim({\r\n                simName: changes.bot.tags.forceGraph,\r\n                setting: 'chargeStrength',\r\n                value: changes.bot.tags.fgChargeStrength\r\n            })\r\n        };\r\n        if (changes.tags.includes('fgSettings')) { \r\n            simManager.updateSim({\r\n                simName: changes.bot.tags.forceGraph,\r\n                setting: 'settingsObject',\r\n                value: changes.bot.tags.fgSettings\r\n            })\r\n        };\r\n    };\r\n};","onBeforeInitialize":"@globalThis.botManager = thisBot;","onInitialize":"@// starts the sim cleanup process and shouts itself for bots to create force graph sims for\r\nthisBot.update();\r\nthisBot.forceUpdate();","system":"ms-forceGraph.botManager","update":"@// console.log('updater running')\r\n\r\n// checks if any bots have a sim's name as its forceGraph tag, and if not, delete the sim\r\n// if a sim is found that is missing from the simContainer, it gets instantiated\r\nif(globalThis.simContainer){\r\n    let sims = await nodeManager.getSimsFromBots();\r\n\r\n    for(let sim in simContainer){\r\n        sims.includes(sim) ? null : delete simContainer[sim];\r\n    };\r\n\r\n    // console.log(\"sims\", sims)\r\n\r\n    for(let sim of sims){\r\n        // console.log(\"sim\", sim)\r\n        simContainer[sim] ? null : simManager.newSim({ simName: sim });\r\n    }\r\n\r\n    // console.log('simContainer',simContainer)\r\n}\r\nelse {\r\n    globalThis.simContainer = {};\r\n}\r\n\r\n// pauses for a second in order to help performance\r\nawait os.sleep(1000);\r\n\r\n// shouts itself to restart this tag\r\nself.requestAnimationFrame(() => {\r\n    whisper(thisBot, 'update');\r\n});","fgTool":"true","abVersion":"10.6"}},"b110e103-fc55-4904-a484-958f26bd9679":{"id":"b110e103-fc55-4904-a484-958f26bd9679","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","abIDOrigin":"msForceGraphTool","abIDStudio":"6db28ddc-1835-4fb4-8ed3-5ccf26c02217","getLinksFromBots":"@// gets any bots in the current gridPortal with both a forceGraph and a lineTo tag\r\nlet linkedBots = getBots(byTag('forceGraph'), byTag(configBot.tags.gridPortal), byTag('lineTo'));\r\n\r\n// uses a reducer to create an object of links based on the lineTo tag of each bot\r\n// checks to make sure whether a bot's lineTo is an object or string, and checks to make sure that both bots involved are in the same force graph sim\r\nlet linkDistance = 5;\r\nlet sortedLinks = linkedBots.reduce((acc, bot) => {\r\n    let graph = bot.tags.forceGraph;\r\n    let lines = bot.tags.lineTo;\r\n    \r\n    if(bot.tags.fgSettings){\r\n        if(Number(bot.tags.fgSettings.linkDistance) != NaN){\r\n            linkDistance = Number(bot.tags.fgSettings.linkDistance)\r\n        }\r\n    }\r\n\r\n    if(bot.tags['fgLineDistance']){\r\n        if(Number(bot.tags['fgLineDistance']) != NaN){\r\n            linkDistance = Number(bot.tags['fgLineDistance'])\r\n        }\r\n    }\r\n\r\n    if(typeof lines == 'object'){\r\n        for(let line of lines){\r\n            let target = getBot(byID(line))\r\n            if(target){\r\n                if(target.tags.forceGraph == graph){\r\n                    acc[graph] ? null : acc[graph] = [];\r\n                    acc[graph].push({\r\n                        'source': bot.id,\r\n                        'target': line,\r\n                        'index': acc[graph].length\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        let target = getBot(byID(lines));\r\n        if(target){\r\n            if(target.tags.forceGraph == graph){\r\n                acc[graph] ? null : acc[graph] = [];\r\n                acc[graph].push({\r\n                    'source': bot.id,\r\n                    'target': lines,\r\n                    'index': acc[graph].length\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return acc;\r\n}, {})\r\n\r\n// the custom function used to have links reference botID properties on nodes rather than indexes\r\nfunction id(d) {return d.botID;};\r\n\r\n// creates a set of link force functions using d3-force-3d for each force graph sim\r\nfor(let sim in sortedLinks){\r\n    let tempLink = d3.forceLink();\r\n    tempLink.id(id);\r\n    tempLink.distance(linkDistance);\r\n    tempLink.links(sortedLinks[sim]);\r\n    sortedLinks[sim] = tempLink;\r\n};\r\n\r\nreturn sortedLinks;","getNodesFromBots":"@// gets the bots in the current gridPortal with forceGraph tags\r\nlet dim = configBot.tags.gridPortal;\r\nlet nodeBots = getBots(byTag('forceGraph'), byTag(dim, true));\r\n\r\n// uses a reducer to get a nodes object that can be passed to force graph sims\r\nlet sortedNodes = nodeBots.reduce((acc, bot) => {\r\n    let graph = bot.tags.forceGraph;\r\n    let botX = dim + 'X';\r\n    let botY = dim + 'Y';\r\n    let botZ = dim + 'Z';\r\n    let botVX\r\n    let botVY\r\n    let botVZ\r\n    let botFX\r\n    let botFY\r\n    let botFZ\r\n\r\n    acc[graph] ? null : acc[graph] = [];\r\n    botX = bot.tags[botX] ? bot.tags[botX] : 0;\r\n    botY = bot.tags[botY] ? bot.tags[botY] : 0;\r\n    botZ = bot.tags[botZ] ? bot.tags[botZ] : 0;\r\n    botVX = bot.tags['fgVX'] ? bot.tags['fgVX'] : 0;\r\n    botVY = bot.tags['fgVY'] ? bot.tags['fgVY'] : 0;\r\n    botVZ = bot.tags['fgVZ'] ? bot.tags['fgVZ'] : 0;\r\n    botFX = bot.tags['fgFX'] || bot.tags['fgFX'] == 0 ? bot.tags['fgFX'] : null;\r\n    botFY = bot.tags['fgFY'] || bot.tags['fgFY'] == 0 ? bot.tags['fgFY'] : null;\r\n    botFZ = bot.tags['fgFZ'] || bot.tags['fgFZ'] == 0 ? bot.tags['fgFZ'] : null;\r\n\r\n    let botNode = {\r\n        'x': botX,\r\n        'y': botY,\r\n        'z': botZ,\r\n        'botID': bot.id,\r\n        'index': acc[graph].length,\r\n        'vx': botVX,\r\n        'vy': botVY,\r\n        'vz': botVZ,\r\n        'fx': botFX,\r\n        'fy': botFY,\r\n        'fz': botFZ\r\n    }\r\n\r\n    acc[graph].push(botNode);\r\n\r\n    // if(bot.tags['fgGravity'] !== undefined){\r\n    //     if(bot.tags['fgGravity'] == false){\r\n    //         acc[graph][0].gravity = false\r\n    //     }\r\n    // }\r\n\r\n    \r\n\r\n    // // console.log('gravity', bot.tags['fgGravity'])\r\n\r\n    // // bot.tags['fgGravity'] ? acc[graph][0].gravity = true : acc[graph][0].gravity = false\r\n\r\n    // // Number(bot.tags['fgGravityX']) !== NaN ? acc[graph][0].gravityX = bot.tags['fgGravityX'] : acc[graph][0].gravityX = 0\r\n    // // Number(bot.tags['fgGravityY']) !== NaN ? acc[graph][0].gravityY = bot.tags['fgGravityY'] : acc[graph][0].gravityY = 0\r\n    // // Number(bot.tags['fgGravityZ']) !== NaN ? acc[graph][0].gravityZ = bot.tags['fgGravityZ'] : acc[graph][0].gravityZ = 0\r\n    \r\n\r\n    return acc;\r\n}, {});\r\n\r\n// console.log('sortedNodes', sortedNodes)\r\n\r\n\r\nreturn sortedNodes;","getSimsFromBots":"@// gets the bots in the current gridPortal with forceGraph tags\r\nlet dim = configBot.tags.gridPortal;\r\nlet nodeBots = getBots(byTag('forceGraph'), byTag(dim, true));\r\n\r\n// uses a reducer to get a nodes object that can be passed to force graph sims\r\nlet simArray = nodeBots.reduce((acc, bot) => {\r\n    let graph = bot.tags.forceGraph;\r\n    acc.includes(graph) ? null : acc.push(graph)\r\n    return acc;\r\n}, []);\r\n\r\n// console.log('sims', simArray);\r\n\r\nreturn simArray;","onBeforeInitialize":"@// sets the nodeManager global variable as this bot\r\nglobalThis.nodeManager = thisBot;","system":"ms-forceGraph.nodeManager","fgTool":"true","abVersion":"10.6"}},"ec2d423f-15b8-49c5-bf39-c9cf8f3aa276":{"id":"ec2d423f-15b8-49c5-bf39-c9cf8f3aa276","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","abIDOrigin":"msForceGraphTool","abIDStudio":"6db28ddc-1835-4fb4-8ed3-5ccf26c02217","initialize":"@// prevents initialization from happening multiple times\r\nif (masks.initialized) {\r\n    return;\r\n}\r\n\r\n// makes sure that all of the preliminary initialization (setting globalThis vars for bots, importing the d3-force-3d library) happens\r\nawait Promise.all(shout('onBeforeInitialize'));\r\n\r\n// primarily starts the botManager's cleanup routine and attempts to setup sims for any bots that exist at initialization\r\nawait Promise.all(shout('onInitialize'));\r\n\r\nmasks.initialized = true;\r\n","onABInitialized":"@// disables bot and grid snapping in order to smooth out bot dragging\r\n\r\nabRemember.tags.abBotSnapState = false;\r\nabRemember.tags.abGridSnapState = false;","onEggHatch":"@// starts initalization on egg hatch\r\n\r\nthisBot.initialize();","onInstJoined":"@// starts initalization on inst joined\r\n\r\nthisBot.initialize();","system":"ms-forceGraph.init","fgTool":"true","abVersion":"10.6"}}}}