{"version":1,"state":{"47c1ce34-d41e-4bc5-92b4-53b726eb1137":{"id":"47c1ce34-d41e-4bc5-92b4-53b726eb1137","space":"shared","tags":{"abCoreMenuIcon":"ios_share","abCoreMenuLabel":"save home data","abCoreMenuSortOrder":"3.5","abIDOrigin":"home","abVersion":"10.6","onAnyBotsAdded":"@let validChange = false;\r\nfor (const addedBot of that.bots) {\r\n    if (addedBot.tags.space !== 'shared') {\r\n        continue;\r\n    }\r\n\r\n    if (addedBot.tags.abIgnore) {\r\n        if (tags.debug) {\r\n            console.log(`[${tags.system}.${tagName}] ignore inst change: bot has abIgnore tag.`);\r\n        }\r\n        continue;\r\n    }\r\n\r\n    if (addedBot.tags.system && addedBot.tags.system.substring(0, 3) == 'ab.') {\r\n        if (tags.debug) {\r\n            console.log(`[${tags.system}.${tagName}] ignore inst change: bot is an ab bot.`);\r\n        }\r\n        continue;\r\n    }\r\n\r\n    if (!addedBot.tags.homeWorldBot) {\r\n        if (tags.debug) {\r\n            console.log(`[${tags.system}.${tagName}] ignore inst change: bot is not a homeWorldBot.`);\r\n        }\r\n        continue;\r\n    }\r\n\r\n    if (addedBot.tags.abIDOrigin && addedBot.tags.abIDOrigin == 'home') {\r\n        if (tags.debug) {\r\n            console.log(`[${tags.system}.${tagName}] ignore inst change: bot is from the home egg.`);\r\n        }\r\n        continue;\r\n    }\r\n\r\n    //Add homeWorldBot if needed.\r\n    if (!thisBot.vars.homeWorldBotIDs) {\r\n        thisBot.vars.homeWorldBotIDs = new Set();\r\n    }\r\n\r\n    if (!thisBot.vars.homeWorldBotIDs.has(addedBot.id)) {\r\n        thisBot.vars.homeWorldBotIDs.add(addedBot.id);\r\n    }\r\n\r\n    validChange = true;\r\n}\r\n\r\nif (validChange) {\r\n    if (tags.debug) {\r\n        console.log(`[${tags.system}.${tagName}] process inst change.`);\r\n    }\r\n    thisBot.processInstChange();\r\n}","onAnyBotsChanged":"@let validChange = false;\r\n\r\nfor (const changed of that) {\r\n    if (changed.bot.tags.space !== 'shared') {\r\n        continue;\r\n    }\r\n\r\n    if (changed.bot.tags.abIgnore) {\r\n        if (tags.debug) {\r\n            console.log(`[${tags.system}.${tagName}] ignore inst change: bot has abIgnore tag.`);\r\n        }\r\n        continue;\r\n    }\r\n\r\n    if (!changed.bot.tags.homeWorldBot) {\r\n        if (tags.debug) {\r\n            console.log(`[${tags.system}.${tagName}] ignore inst change: bot is not a homeWorldBot.`);\r\n        }\r\n        continue;\r\n    }\r\n\r\n    if (changed.bot.tags.system && changed.bot?.tags?.system?.substring(0, 3) == 'ab.') {\r\n        if (tags.debug) {\r\n            console.log(`[${tags.system}.${tagName}] ignore inst change: bot is an ab bot.`);\r\n        }\r\n        continue;\r\n    }\r\n\r\n    if (changed.tags.some(t => t === 'abArtifactBundle' || t === 'abArtifactInstanceID' || t === 'abArtifactShardInstanceID')) {\r\n        if (tags.debug) {\r\n            console.log(`[${tags.system}.${tagName}] ignore inst change: bot's changed tags are related to artifacts.`);\r\n        }\r\n        continue;\r\n    }\r\n    \r\n    validChange = true;\r\n    break;\r\n}\r\n\r\nif (validChange) {\r\n    if (tags.debug) {\r\n        console.log(`[${tags.system}.${tagName}] process inst change.`);\r\n    }\r\n    thisBot.processInstChange();\r\n}","onEggHatch":"@const currentDim = ab.links.remember.tags.abActiveDimension;\r\nconst currentPortal = configBot.tags.mapPortal ? \"map\" : configBot.tags.gridPortal == \"blueprint\" ? \"blueprint\" :\"grid\";\r\n\r\nab.links.manifestation.abSetAwake({ awake: true })\r\n\r\nif (currentPortal != 'map') {\r\n    configBot.tags.mapPortal = currentDim;\r\n}\r\n\r\nif (!authBot) {\r\n    if (tags.debug) {\r\n        console.log(`[${tags.system}.${tagName}] authBot not found`);\r\n    }\r\n    await os.requestAuthBotInBackground();\r\n}\r\n\r\nif (!authBot) {\r\n    if (tags.debug) {\r\n        console.log(`[${tags.system}.${tagName}] User not logged in.`);\r\n    }\r\n    return;\r\n}\r\n\r\nif (that.eggParameters && that.eggParameters.saveOnLoad) {\r\n    thisBot.saveData();\r\n    return;\r\n}\r\n\r\nconst studio = configBot.tags.studio ?? authBot.id;\r\nconst homeEggData = await os.getData(studio, 'home');\r\n\r\nif (tags.debug) {\r\n    console.log(`[${tags.system}.${tagName}] homeEggData`, homeEggData, studio);\r\n}\r\n\r\nif (!homeEggData.success) {\r\n    if(homeEggData.errorCode && homeEggData.errorCode == 'not_authorized') {\r\n        const permissions = await os.grantInstAdminPermission(studio);\r\n        const homeEggData2 = await os.getData(studio, 'home');\r\n\r\n        if (tags.debug) {\r\n            console.log(`[${tags.system}.${tagName}] homeEggData2`, homeEggData2, permissions);\r\n        }\r\n        \r\n        if (!homeEggData2.success) {\r\n            thisBot.saveData();\r\n        }\r\n    } else if (homeEggData.errorCode && homeEggData.errorCode == 'data_not_found') {\r\n        thisBot.saveData();\r\n    }\r\n}\r\n\r\nif (tags.abArtifactName && !tags.abArtifactInstanceID) {\r\n    // Turn the home ask into an artifact instance if it isnt one already upon load.\r\n    tags.abArtifactInstanceID = uuid();\r\n\r\n    if (tags.debug) {\r\n        console.log(`[${tags.system}.${tagName}] turning home world into artifact instance ${tags.abArtifactInstanceID}`);\r\n    }\r\n\r\n    ab.links.artifact.abUpdateArtifactShards({\r\n        abArtifactName: tags.abArtifactName,\r\n        abArtifactInstanceID: tags.abArtifactInstanceID\r\n    })\r\n}","onPortalChanged":"@if (that.portal == \"mapPortal\") {\r\n    const homeBase = getBot(\"homeBase\", true);\r\n    \r\n    if (tags.debug) {\r\n        console.log(`[${tags.system}.${tagName}] homeBase:`, homeBase);\r\n    }\r\n\r\n    if (homeBase && homeBase.tags[that.dimension + \"X\"] && homeBase.tags[that.dimension + \"Y\"]) {\r\n        const homeBasePosition = {x: homeBase.tags[that.dimension + \"X\"], y: homeBase.tags[that.dimension + \"Y\"]};\r\n        if (tags.debug) {\r\n            console.log(`[${tags.system}.${tagName}] masking mapZoomPosition with homeBasePosition:`, homeBasePosition);\r\n        }\r\n        setTagMask(links.remember, \"mapZoomPosition\", homeBasePosition);\r\n    }\r\n}","processInstChange":"@if (thisBot.vars.saveTimout) {\r\n    if (tags.debug) {\r\n        console.log(`[${tags.system}.${tagName}] clear save timeout.`);\r\n    }\r\n    clearTimeout(thisBot.vars.saveTimout);\r\n    thisBot.vars.saveTimout = null;\r\n}\r\n\r\nif (tags.debug) {\r\n    console.log(`[${tags.system}.${tagName}] start save timeout ${tags.saveDelayMS}ms`);\r\n}\r\n\r\nthisBot.vars.saveTimout = await setTimeout(() => {\r\n    thisBot.saveData();\r\n}, tags.saveDelayMS);","saveData":"@if (!authBot) {\r\n    console.log(\"[ab.home.egg]: saveData no authbot\");\r\n    await os.requestAuthBotInBackground();\r\n}\r\n\r\nif (!authBot) {\r\n    console.log(\"[ab.home.egg]: User not logged in.\");\r\n    return;\r\n}\r\n\r\nif (!tags.saveEnabled) {\r\n    return;\r\n}\r\n\r\nconst studio = configBot.tags.studio ?? authBot.id;\r\nconfigBot.tags.selected_studioID = studio;\r\n\r\nconst homeBots = getBots(\"homeWorldBot\", true);\r\n\r\nconst publishAttempt = await ab.links.store.abPublishAB({ab: 'home', target: homeBots, sourceEvent: 'home_egg_publish', keepMenu: true});\r\n\r\nif (tags.debug) {\r\n    console.log(`[${tags.system}.${tagName}] saveData publishAttempt 1:`, publishAttempt);\r\n}\r\n\r\nif (!publishAttempt.success) {\r\n    const permissions = await os.grantInstAdminPermission(studio);\r\n\r\n    if (tags.debug) {\r\n        console.log(`[${tags.system}.${tagName}] saveData permissions:`, permissions);\r\n    }\r\n\r\n    const secondPublishAttempt = await ab.links.store.abPublishAB({ab: 'home', target: homeBots, sourceEvent: 'home_egg_publish', keepMenu: true});\r\n        \r\n    if (tags.debug) {\r\n        console.log(`[${tags.system}.${tagName}]  saveData publishAttempt 2`, secondPublishAttempt);\r\n    }\r\n\r\n    if (!secondPublishAttempt.success){\r\n        if (tags.debug) {\r\n            console.log(`[${tags.system}.${tagName}] Could not publish`, secondPublishAttempt);\r\n        }\r\n    } else {\r\n        ab.links.manifestation.abSetAwake({ awake: true })\r\n    }\r\n}","system":"ab.home.world","form":"none","homeWorldBot":"true","homeWorld":"true","debug":"true","saveDelayMS":"5000","isHomeWorldCore":"true","onABArtifactCollectShards":"@const shard: ABArtifactShard = {\n    data: {\n        \n    },\n    dependencies: [\n        { askID: 'home' }\n    ]\n}\n\nreturn shard;","onABArtifactReconstitute":"@const data = that.data;\n","abArtifactName":"home","remember":"ðŸ”—e5380a6b-8b4d-4a8b-8b04-58e1eb03e5e7","onAnyBotsRemoved":"@const { botIDs } = that;\r\n\r\nfor (const botId of botIDs) {\r\n    if (thisBot.vars.homeWorldBotIDs) {\r\n        const deleted = thisBot.vars.homeWorldBotIDs.delete(botId);\r\n\r\n        if (deleted) {\r\n            thisBot.processInstChange();\r\n        }\r\n    }\r\n}","saveEnabled":"true","changeHomeVersion":"@console.log(that);\r\n\r\n//get rid of everything\r\nos.toast(\"reverting home world...\");\r\n\r\ntags.saveEnabled = false;\r\n\r\nconst currentDim = ab.links.remember.tags.abActiveDimension;\r\nconst homeWorldBots = getBots(byTag(currentDim, true), byTag(\"system\", sys => sys?.substring(0, 3) != 'ab.'), byTag(\"abIgnore\", null), byTag(\"space\", 'shared'));\r\n\r\ndestroy(homeWorldBots);\r\n\r\n//load old version\r\nab.links.search.onLookupABEggs({recordKey: configBot.tags.studio ?? authBot.id, abID: 'home', abVersion: that, autoHatch: true, sourceEvent: 'ask', eggParameters: {saveOnLoad: true}});\r\ndestroy(thisBot);"}}}}