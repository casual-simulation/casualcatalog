{"version":1,"state":{"a13c3dc9-01f5-47a0-be6d-65fa73edacbd":{"id":"a13c3dc9-01f5-47a0-be6d-65fa73edacbd","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","abCoreMenuIcon":"ios_share","abCoreMenuLabel":"save home data","abCoreMenuSortOrder":"3.5","abIDOrigin":"home","abIDStudio":"318c04f1-1391-4c10-8d43-aaebc5170265","abVersion":"10.6","homeBaseBot":"true","homeEgg":"true","onAnyBotsAdded":"@let validChange = false;\r\nfor (const addedBot of that.bots) {\r\n    if (addedBot.tags.space == 'tempLocal' || addedBot.tags.space == 'local') {\r\n        continue;\r\n    }\r\n\r\n    if (addedBot.tags.abIgnore) {\r\n        continue;\r\n    }\r\n\r\n    if (addedBot.tags.system && addedBot.tags.system.substring(0, 3) == 'ab.') {\r\n        continue;\r\n    }\r\n\r\n    if (!addedBot.tags.homeBaseBot) {\r\n        continue;\r\n    }\r\n\r\n    if (addedBot.tags.abIDOrigin && addedBot.tags.abIDOrigin == 'home') {\r\n        continue;\r\n    }\r\n\r\n    validChange = true;\r\n    break;\r\n}\r\n\r\nif (validChange) {\r\n    thisBot.processInstChange();\r\n}","onAnyBotsChanged":"@let validChange = false;\r\n\r\nfor (const addedBot of that) {\r\n    if (addedBot.bot.tags.space == 'tempLocal' || addedBot.bot.tags.space == 'local') {\r\n        continue;\r\n    }\r\n\r\n    if (addedBot.bot.tags.abIgnore) {\r\n        continue;\r\n    }\r\n\r\n    if (!addedBot.bot.tags.homeBaseBot) {\r\n        continue;\r\n    }\r\n\r\n    if (addedBot.bot.tags.system && addedBot.bot?.tags?.system?.substring(0, 3) == 'ab.') {\r\n        continue;\r\n    }\r\n    \r\n    validChange = true;\r\n    break;\r\n}\r\n\r\nif (validChange) {\r\n    thisBot.processInstChange();\r\n}","onEggHatch":"@const currentDim = ab.links.remember.tags.abActiveDimension;\r\nconst currentPortal = configBot.tags.mapPortal ? \"map\" : configBot.tags.gridPortal == \"blueprint\" ? \"blueprint\" :\"grid\";\r\n\r\nab.links.manifestation.abSetAwake({ awake: true })\r\n\r\nif (currentPortal != 'map') {\r\n    configBot.tags.mapPortal = currentDim;\r\n}\r\n\r\nif (!authBot) {\r\n    console.log(\"[ab.home.egg]: onEggHatch authBot not found\");\r\n    await os.requestAuthBotInBackground();\r\n}\r\n\r\nif (!authBot) {\r\n    console.log(\"[ab.home.egg]: User not logged in.\");\r\n    return;\r\n}\r\n\r\nconst homeEggData = await os.getData(authBot.id, 'home');\r\nconsole.log(\"[ab.home.egg]: onEggHatch homeEggData\", homeEggData, authBot);\r\n\r\nif (!homeEggData.success) {\r\n    if(homeEggData.errorCode && homeEggData.errorCode == 'not_authorized') {\r\n        const permissions = await os.grantInstAdminPermission(authBot.id);\r\n        const homeEggData2 = await os.getData(authBot.id, 'home');\r\n\r\n        console.log(\"[ab.home.egg]: onEggHatch homeEggData2\", homeEggData2, permissions);\r\n        if (!homeEggData2.success) {\r\n            thisBot.saveData();\r\n        }\r\n    } else if (homeEggData.errorCode && homeEggData.errorCode == 'data_not_found') {\r\n        thisBot.saveData();\r\n    }\r\n}","processInstChange":"@if (thisBot.vars.saveTimout) {\r\n    clearTimeout(thisBot.vars.saveTimout);\r\n    thisBot.vars.saveTimout = null;\r\n}\r\n\r\nthisBot.vars.saveTimout = await setTimeout(() => {\r\n    thisBot.saveData();\r\n}, 5000);","saveData":"@if (!authBot) {\r\n    console.log(\"[ab.home.egg]: saveData no authbot\");\r\n    await os.requestAuthBotInBackground();\r\n}\r\n\r\nif (!authBot) {\r\n    console.log(\"[ab.home.egg]: User not logged in.\");\r\n    return;\r\n}\r\n\r\nconst homeBots = getBots(\"homeBaseBot\", true);\r\n\r\nconst publishAttempt = await ab.links.store.abPublishAB({ab: 'home', target: homeBots, sourceEvent: 'home_egg_publish'});\r\nconsole.log(\"[ab.home.egg]: saveData publishAttempt 1\", publishAttempt);\r\n\r\nif (!publishAttempt.success) {\r\n    const permissions = await os.grantInstAdminPermission(authBot.id);\r\n\r\n    console.log(\"[ab.home.egg]: saveData permissions\", permissions);\r\n\r\n    const secondPublishAttempt = await ab.links.store.abPublishAB({ab: 'home', target: homeBots, sourceEvent: 'home_egg_publish'});\r\n    console.log(\"[ab.home.egg]: saveData publishAttempt 2\", secondPublishAttempt);\r\n\r\n    if (!secondPublishAttempt.success){\r\n        console.log(\"[ab.home.egg]: Could not publish\", secondPublishAttempt);\r\n    } else {\r\n        ab.links.manifestation.abSetAwake({ awake: true })\r\n    }\r\n}","system":"ab.home.egg","onPortalChanged":"@console.log(\"porty\", that)\r\nif (that.portal == \"mapPortal\") {\r\n    const homeBase = getBot(\"homeBase\", true);\r\n    if (homeBase && homeBase.tags[that.dimension + \"X\"] && homeBase.tags[that.dimension + \"Y\"]) {\r\n        setTagMask(ab.links.remember, \"mapZoomPosition\", {x: homeBase.tags[that.dimension + \"X\"], y: homeBase.tags[that.dimension + \"Y\"]});\r\n    }\r\n}"}}}}