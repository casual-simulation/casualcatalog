{"version":1,"state":{"063d22c7-4a03-477d-ad3f-bb735c1f5bd9":{"id":"063d22c7-4a03-477d-ad3f-bb735c1f5bd9","space":"shared","tags":{"system":"place_toolbox.tools.homePlace","onClick":"@// os.toast('hello, world!');\r\nshout('abMenuRefresh');\r\n\r\nconfigBot.tags.menuPortal = 'home_place_menu';\r\n\r\nconst menuOptions = {\r\n    home_place_menu: true,\r\n    clearHomePlaceMenu: `@destroy(thisBot);`,\r\n    abMenuRefresh: \"@ destroy(thisBot);\",\r\n    place: getLink(thisBot)\r\n}\r\n\r\nconst setHomeBaseButton = {\r\n    ...menuOptions,\r\n    label: 'set as home place',\r\n    home_place_menuSortOrder: 1,\r\n    onClick: `@shout('setHomeBase', links.place); shout('clearHomePlaceMenu');`\r\n}\r\n\r\nconst renameButton = {\r\n    ...menuOptions,\r\n    label: 'rename place',\r\n    home_place_menuSortOrder: 2,\r\n    onClick: `@const newName = await os.showInput(links.place.tags.label, {\r\n        title: 'Name this place bot'\r\n    });\r\n    if (newName) {\r\n        links.place.tags.label = newName;\r\n    }\r\n    shout('clearHomePlaceMenu');\r\n    `\r\n}\r\n\r\nconst updateHomeButton = {\r\n    ...menuOptions,\r\n    label: 'update home',\r\n    home_place_menuSortOrder: 3,\r\n    onClick: `@links.place.updateHomeWorld(); shout('clearHomePlaceMenu');`\r\n}\r\n\r\nconst homeVersionHistory = {\r\n    ...menuOptions,\r\n    label: 'home version history',\r\n    home_place_menuSortOrder: 4,\r\n    onClick: `@links.place.showHomeVersionHistory(); shout('clearHomePlaceMenu');`\r\n}\r\n\r\nconst factoryResetButton = {\r\n    ...menuOptions,\r\n    color: 'red',\r\n    labelColor: 'black',\r\n    label: 'factory reset home',\r\n    home_place_menuSortOrder: 5,\r\n    onClick: `@links.place.factoryResetHomeWorld(); shout('clearHomePlaceMenu');`\r\n}\r\n\r\n//If not home base\r\nif (tags.homeBase != true) {\r\n    ab.links.menu.abCreateMenuButton(setHomeBaseButton);\r\n} \r\n//If this bot is home base\r\nelse {\r\n    ab.links.menu.abCreateMenuButton(updateHomeButton);\r\n    ab.links.menu.abCreateMenuButton(homeVersionHistory);\r\n    ab.links.menu.abCreateMenuButton(factoryResetButton);\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(renameButton);\r\n\r\n//nav\r\nconst moveToPlaceButton = {\r\n    ...menuOptions,\r\n    label: 'places',\r\n    dropdownSortOrder: 10\r\n}\r\n\r\nconst dropdownOptions = [];\r\n\r\nconst currentDim = ab.links.remember.tags.abActiveDimension;\r\nconst currentPortal = configBot.tags.mapPortal ? \"map\" : configBot.tags.gridPortal == \"blueprint\" ? \"blueprint\" :\"grid\";\r\nconst activeMenu = configBot.tags.menuPortal;\r\n\r\nif (currentPortal != 'map') {\r\n    return;\r\n}\r\n\r\nconst homeButton = {\r\n    ...menuOptions,\r\n    label: \"home\",\r\n    formAddress: 'https://auth-aux-dev-filesbucket-682397690660.s3.amazonaws.com/318c04f1-1391-4c10-8d43-aaebc5170265/cd38affc0604beaa588da21aa1be750bb3e73b3b3cae23eb30307c34494459f3.png',\r\n    onClick: `@const homeBot = getBot(\"homeBase\", true);\r\n    if (homeBot) {\r\n        os.focusOn(homeBot);\r\n    }\r\n    shout(\"abMenuRefresh\");\r\n    `\r\n};\r\n\r\n\r\nif (getBot(\"homeBase\", true)) {\r\n    dropdownOptions.push(homeButton);\r\n}\r\n\r\nconst placesArr = [];\r\nconst places = getBots(\"homePlace\", true);\r\nfor (const hPlace of places) {\r\n    if (hPlace.tags.homeBase == true || hPlace == thisBot) {\r\n        continue;\r\n    }\r\n    const placeObj = {\r\n        ...menuOptions,\r\n        label: hPlace.tags.label,\r\n        formAddress: 'location_on',\r\n        place: getLink(hPlace),\r\n        onClick: `@\r\n            if (links.place) {\r\n                os.focusOn(links.place);\r\n            }\r\n            shout(\"abMenuRefresh\");\r\n            `\r\n    }\r\n\r\n    placesArr.push(placeObj);\r\n}\r\n\r\nplacesArr.sort((a, b) => {\r\n    const nameA = a.label.toUpperCase();\r\n    const nameB = b.label.toUpperCase();\r\n\r\n    if (nameA < nameB) {\r\n        return -1;\r\n    }\r\n    if (nameA > nameB) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n});\r\n\r\nfor (const sortedPlace of placesArr) {\r\n    dropdownOptions.push(sortedPlace);\r\n}\r\n\r\n\r\nconst currentLocationButton = {\r\n    ...menuOptions,\r\n    skillBot: tags.navigation,\r\n    label: 'current location',\r\n    formAddress: 'near_me',\r\n    onClick: `@\r\n        links.skillBot.goToCurrentLocation();\r\n        shout(\"abMenuRefresh\");\r\n    `\r\n}\r\n\r\ndropdownOptions.push(currentLocationButton);\r\n\r\nmoveToPlaceButton[\"dropdownOptions\"] = dropdownOptions;\r\nab.links.menu.abCreateMenuDropdown(moveToPlaceButton);","cursor":"pointer","abVersion":"10.6","abIDOrigin":"homePlace","homePlace":"true","form":"hex","labelWordWrapMode":"breakWords","onGridClick":"@shout('clearHomePlaceMenu');","setHomeBase":"@if (that == thisBot) {\r\n    tags.scaleX = 2;\r\n    tags.scaleY = 2;\r\n    tags.scaleZ = 1;\r\n    tags.homeBase = true;\r\n} else {\r\n    tags.scaleX = 1;\r\n    tags.scaleY = 1;\r\n    tags.scaleZ = 2;\r\n    tags.homeBase = false;\r\n}","navigation":"ðŸ”—3a6cb9ca-b3b4-4d77-82f6-fa59b5296ec9","homeWorldBot":"true","abArtifactName":"homePlace","onABArtifactCollectShards":"@const shard: ABArtifactShard = {\r\n    data: {\r\n        homeBase: tags.homeBase,\r\n        label: tags.label,\r\n        dimensionData: {\r\n            [ab.links.remember.tags.abActiveDimension]: tags[ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension + 'X']: tags[ab.links.remember.tags.abActiveDimension + 'X'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Y']: tags[ab.links.remember.tags.abActiveDimension + 'Y'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Z']: tags[ab.links.remember.tags.abActiveDimension + 'Z'],\r\n        },\r\n        scaleX: tags.scaleX,\r\n        scaleY: tags.scaleY,\r\n        scaleZ: tags.scaleZ,\r\n        color: tags.color,\r\n        labelFloatingBackgroundColor: tags.labelFloatingBackgroundColor,\r\n        labelColor: tags.labelColor\r\n    },\r\n    dependencies: [\r\n        {\r\n            askID: 'homePlace'\r\n        }\r\n    ]\r\n}\r\n\r\nreturn shard;","onABArtifactReconstitute":"@const data = that.data;\r\n\r\ntags.homeBase = data.homeBase ?? false;\r\ntags.label = data.label ?? 'name me';\r\ntags.scaleX = data.scaleX ?? 1;\r\ntags.scaleY = data.scaleY ?? 1;\r\ntags.scaleZ = data.scaleZ ?? 2;\r\ntags.color = data.color ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD';\r\ntags.labelFloatingBackgroundColor = data.labelFloatingBackgroundColor ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD'; \r\ntags.labelColor = data.labelColor ?? abPersonality?.tags?.abBaseLabelColor ?? 'black';\r\n\r\nif (tags.label) {\r\n    setTagMask(thisBot, 'labelPosition', 'floatingBillboard', 'shared');\r\n}\r\n\r\nif (data.dimensionData) {\r\n    for (const tagName in data.dimensionData) {\r\n        tags[tagName] = data.dimensionData[tagName];\r\n    }\r\n}\r\n\r\nif (data.eggParameters) {\r\n    const dimension = data.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = data.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = data.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n\r\n    const name = await os.showInput('', {\r\n        title: 'Name this place bot'\r\n    });\r\n\r\n    tags.label = name;\r\n}","homeBase":true,"label":"test user home","scaleX":2,"scaleY":2,"scaleZ":1,"color":"#FB9E00","labelFloatingBackgroundColor":"#FB9E00","labelColor":"black","home":true,"homeX":-85.67715529002741,"homeY":42.965135135135135,"updateHomeWorld":"@if (!tags.homeBase) {\r\n    return;\r\n}\r\n\r\n","showHomeVersionHistory":"@if (!tags.homeBase) {\r\n    return;\r\n}","factoryResetHomeWorld":"@if (!tags.homeBase) {\r\n    return;\r\n}\r\n\r\nlet confirmed = await os.showConfirm({\r\n    title: 'Confirm',\r\n    content: 'Please confirm the action.'\r\n});\r\n\r\nif (!confirmed) {\r\n    return;\r\n}\r\n\r\nos.toast(\"resetting home base...\");\r\n\r\nconst homeCore = getBot(\"isHomeWorldCore\", true)\r\n\r\nif (homeCore) {\r\n    homeCore.tags.saveEnabled = false;\r\n}\r\n\r\nconst currentDim = links.remember.tags.abActiveDimension;\r\nconst homeWorldBots = getBots(byTag(currentDim, true), byTag(\"system\", sys => sys?.substring(0, 3) != 'ab.'), byTag(\"abIgnore\", null), byTag(\"space\", 'shared'));\r\n\r\ndestroy(homeWorldBots);\r\n\r\nawait ab.links.search.onLookupAskID({askID: 'home', channelConfig: false, autoHatch: true, sourceEvent: 'factory_reset_home_base', ignoreReserved: true});"}}}}