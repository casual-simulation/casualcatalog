{"version":1,"state":{"7aa09be9-969f-4d23-8366-64a0595462f2":{"id":"7aa09be9-969f-4d23-8366-64a0595462f2","space":"shared","tags":{"system":"place_toolbox.tools.homePlace","onClick":"@// os.toast('hello, world!');\r\nshout('abMenuRefresh');\r\n\r\nconfigBot.tags.menuPortal = 'home_place_menu';\r\n\r\nconst menuOptions = {\r\n    home_place_menu: true,\r\n    clearHomePlaceMenu: `@destroy(thisBot);`,\r\n    abMenuRefresh: \"@ destroy(thisBot);\",\r\n    place: getLink(thisBot)\r\n}\r\n\r\nconst setHomeBaseButton = {\r\n    ...menuOptions,\r\n    label: 'set as entry place',\r\n    home_place_menuSortOrder: 1,\r\n    onClick: `@shout('setHomeBase', links.place); shout('clearHomePlaceMenu');`\r\n}\r\n\r\nconst renameButton = {\r\n    ...menuOptions,\r\n    formAddress: 'edit',\r\n    label: 'rename place',\r\n    home_place_menuSortOrder: 2,\r\n    onClick: `@const newName = await os.showInput(links.place.tags.placeLabel, {\r\n        autoSelect: true,\r\n        title: 'Name this place bot'\r\n    });\r\n    if (newName) {\r\n        links.place.tags.placeLabel = newName;\r\n    }\r\n    shout('clearHomePlaceMenu');\r\n    `\r\n}\r\n\r\nconst menuGroup = {\r\n    ...menuOptions,\r\n    groupSortOrder: 10,\r\n    menuItems: [\r\n        {\r\n            formAddress: 'refresh',\r\n            label: 'refresh homeworld',\r\n            onClick: `@links.place.updateHomeWorld(); shout('clearHomePlaceMenu');`\r\n        },\r\n        {\r\n            formAddress: 'save',\r\n            label: 'backup homeworld',\r\n            onClick: `@links.place.backupHomeworld(); shout('clearHomePlaceMenu');`\r\n        },\r\n        {\r\n            formAddress: 'history',\r\n            label: 'homeworld version history',\r\n            onClick: `@links.place.showHomeVersionHistory(); shout('clearHomePlaceMenu');`\r\n        },\r\n        {\r\n            formAddress: 'delete_forever',\r\n            color: 'red',\r\n            labelColor: 'black',\r\n            label: 'factory reset homeworld',\r\n            onClick: `@links.place.factoryResetHomeWorld(); shout('clearHomePlaceMenu');`\r\n        }\r\n    ]\r\n}\r\n\r\n//If not home base\r\nif (tags.homeBase != true) {\r\n    ab.links.menu.abCreateMenuButton(setHomeBaseButton);\r\n} \r\n//If this bot is home base\r\nelse {\r\n    ab.links.menu.abCreateMenuGroup(menuGroup);\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(renameButton);\r\n\r\n//nav\r\nconst moveToPlaceButton = {\r\n    ...menuOptions,\r\n    label: 'place nav: ' + tags.placeLabel,\r\n    dropdownSortOrder: 5,\r\n    defaultOpen: true\r\n}\r\n\r\nconst dropdownOptions = [];\r\n\r\nconst currentDim = ab.links.remember.tags.abActiveDimension;\r\nconst currentPortal = configBot.tags.mapPortal ? \"map\" : configBot.tags.gridPortal == \"blueprint\" ? \"blueprint\" :\"grid\";\r\nconst activeMenu = configBot.tags.menuPortal;\r\n\r\nif (currentPortal != 'map') {\r\n    return;\r\n}\r\n\r\nconst homeBaseBot = getBot(\"homeBase\", true);\r\n\r\nif (homeBaseBot) {\r\n    const homeButton = {\r\n        ...menuOptions,\r\n        label: homeBaseBot.tags.placeLabel,\r\n        formAddress: 'https://auth-aux-dev-filesbucket-682397690660.s3.amazonaws.com/318c04f1-1391-4c10-8d43-aaebc5170265/cd38affc0604beaa588da21aa1be750bb3e73b3b3cae23eb30307c34494459f3.png',\r\n        onClick: `@const homeBot = getBot(\"homeBase\", true);\r\n        if (homeBot) {\r\n            os.focusOn(homeBot);\r\n        }\r\n        shout(\"abMenuRefresh\");\r\n        `\r\n    };\r\n\r\n    if (tags.homeBase != true) {\r\n        dropdownOptions.push(homeButton);\r\n    }\r\n}\r\n\r\nconst placesArr = [];\r\nconst places = getBots(\"homePlace\", true);\r\nfor (const hPlace of places) {\r\n    if (hPlace.tags.homeBase == true || hPlace == thisBot) {\r\n        continue;\r\n    }\r\n    const placeObj = {\r\n        ...menuOptions,\r\n        label: hPlace.tags.placeLabel,\r\n        formAddress: 'location_on',\r\n        place: getLink(hPlace),\r\n        onClick: `@\r\n            if (links.place) {\r\n                os.focusOn(links.place);\r\n            }\r\n            shout(\"abMenuRefresh\");\r\n            `\r\n    }\r\n\r\n    placesArr.push(placeObj);\r\n}\r\n\r\nplacesArr.sort((a, b) => {\r\n    const nameA = a.label.toUpperCase();\r\n    const nameB = b.label.toUpperCase();\r\n\r\n    if (nameA < nameB) {\r\n        return -1;\r\n    }\r\n    if (nameA > nameB) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n});\r\n\r\nfor (const sortedPlace of placesArr) {\r\n    dropdownOptions.push(sortedPlace);\r\n}\r\n\r\n\r\nconst currentLocationButton = {\r\n    ...menuOptions,\r\n    skillBot: tags.navigation,\r\n    label: 'current location',\r\n    formAddress: 'near_me',\r\n    onClick: `@\r\n        links.skillBot.goToCurrentLocation();\r\n        shout(\"abMenuRefresh\");\r\n    `\r\n}\r\n\r\ndropdownOptions.push(currentLocationButton);\r\n\r\nmoveToPlaceButton[\"dropdownOptions\"] = dropdownOptions;\r\nab.links.menu.abCreateMenuDropdown(moveToPlaceButton);","cursor":"pointer","abVersion":"10.6","abIDOrigin":"homePlace","homePlace":"true","labelWordWrapMode":"breakWords","onGridClick":"@shout('clearHomePlaceMenu');\r\nshout(\"clearHomeWorldVersionMenu\");","setHomeBase":"@if (that == thisBot) {\r\n    tags.scaleX = 2;\r\n    tags.scaleY = 2;\r\n    tags.scaleZ = 1;\r\n    tags.homeBase = true;\r\n} else {\r\n    tags.scaleX = 1;\r\n    tags.scaleY = 1;\r\n    tags.scaleZ = 2;\r\n    tags.homeBase = false;\r\n}","navigation":"ðŸ”—3a6cb9ca-b3b4-4d77-82f6-fa59b5296ec9","homeWorldBot":"true","abArtifactName":"homePlace","onABArtifactCollectShards":"@const shard: ABArtifactShard = {\r\n    data: {\r\n        homeBase: tags.homeBase,\r\n        label: tags.placeLabel,\r\n        dimensionData: {\r\n            dimension: ab.links.remember.tags.abActiveDimension,\r\n            [ab.links.remember.tags.abActiveDimension]: tags[ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension + 'X']: tags[ab.links.remember.tags.abActiveDimension + 'X'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Y']: tags[ab.links.remember.tags.abActiveDimension + 'Y'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Z']: tags[ab.links.remember.tags.abActiveDimension + 'Z'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationX']: tags[ab.links.remember.tags.abActiveDimension + 'RotationX'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationY']: tags[ab.links.remember.tags.abActiveDimension + 'RotationY'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationZ']: tags[ab.links.remember.tags.abActiveDimension + 'RotationZ'],\r\n        },\r\n        scaleX: tags.scaleX,\r\n        scaleY: tags.scaleY,\r\n        scaleZ: tags.scaleZ,\r\n        color: tags.color,\r\n        labelFloatingBackgroundColor: tags.placeLabelFloatingBackgroundColor,\r\n        labelColor: tags.placeLabelColor,\r\n        form: tags.form,\r\n        formSubtype: tags.formSubtype,\r\n        formAddress: tags.formAddress,\r\n        formAddressAspectRatio: tags.formAddressAspectRatio\r\n    },\r\n    dependencies: [\r\n        {\r\n            askID: 'homePlace'\r\n        }\r\n    ]\r\n}\r\n\r\nreturn shard;","onABArtifactReconstitute":"@const data = that.data;\r\n\r\ntags.homeBase = data.homeBase ?? false;\r\ntags.placeLabel = data.label ?? 'name me';\r\ntags.scaleX = data.scaleX ?? 1;\r\ntags.scaleY = data.scaleY ?? 1;\r\ntags.scaleZ = data.scaleZ ?? 2;\r\ntags.color = data.color ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD';\r\ntags.placeLabelFloatingBackgroundColor = data.labelFloatingBackgroundColor ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD'; \r\ntags.placeLabelColor = data.labelColor ?? abPersonality?.tags?.abBaseLabelColor ?? 'black';\r\ntags.form = data.form ?? 'hex';\r\ntags.formSubtype = data.formSubtype;\r\ntags.formAddress = data.formAddress;\r\ntags.formAddressAspectRatio = data.formAddressAspectRatio;\r\n\r\nif (data.dimensionData) {\r\n    for (const tagName in data.dimensionData) {\r\n        tags[tagName] = data.dimensionData[tagName];\r\n    }\r\n}\r\n\r\nif (data.eggParameters) {\r\n    const dimension = data.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = data.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = data.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags.dimension = dimension;\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n\r\n    const name = await os.showInput('', {\r\n        autoSelect: true,\r\n        title: 'Name this place bot'\r\n    });\r\n\r\n    if (name) {\r\n        tags.placeLabel = name;\r\n    }\r\n\r\n}\r\n\r\nif (!tags.form) {\r\n    tags.form = 'hex';\r\n}","homeBase":false,"scaleX":1,"scaleY":1,"scaleZ":2,"updateHomeWorld":"@if (!tags.homeBase) {\r\n    return;\r\n}\r\n\r\nconst confirm = await os.showConfirm({\r\n    title: \"Refresh Homeworld?\",\r\n    content: \"Refreshing this homeworld will remove any unsaved bots. Please make sure you have backed up this homeworld before proceeding.\",\r\n    confirmText: \"proceed\",\r\n    cancelText: \"cancel\"\r\n})\r\n\r\nif (!confirm) {\r\n   return;\r\n}\r\n\r\nconfigBot.tags.menuPortal = 'home_place_update_menu';\r\nlet busyIndicator = await ab.links.menu.abCreateMenuBusyIndicator({ home_place_update_menu: true, label: `refreshing homeworld` });\r\n\r\ntry {\r\n    await links.learn.updateAB({ reloadPage: false, showIndicator: false });\r\n\r\n    const artifactInstances = links.artifact.abGetArtifactInstances();\r\n\r\n    // Scrape the artifact instances for artifact bundles.\r\n    const toReconstitute = [];\r\n\r\n    for (const abArtifactInstanceID in artifactInstances) {\r\n        const shardBots = artifactInstances[abArtifactInstanceID];\r\n        const abArtifactBundle = shardBots[0].tags.abArtifactBundle;\r\n\r\n        toReconstitute.push({\r\n            abArtifactInstanceID,\r\n            abArtifactBundle\r\n        })\r\n\r\n        // Bye bye old shard bots.\r\n        destroy(shardBots);\r\n    }\r\n\r\n    // Reconsitute using the data we scraped from the previous artifact instances.\r\n    for (const entry of toReconstitute) {\r\n        await links.artifact.abArtifactReconstitute({\r\n            abArtifactInstanceID: entry.abArtifactInstanceID,\r\n            abArtifactBundle: entry.abArtifactBundle,\r\n            toast: false,\r\n        })\r\n    }\r\n\r\n    // Tell everyone to reload the page. This gets handled by abCore.\r\n    const remoteDataEvent = 'update_ab_reload_page';\r\n    const remoteDataArg = { reloadPage: true };\r\n\r\n    if (os.isCollaborative()) {\r\n        const remotes = await os.remotes();\r\n        sendRemoteData(remotes, remoteDataEvent, remoteDataArg);\r\n    } else {\r\n        ab.onRemoteData({ name: remoteDataEvent, that: remoteDataArg, remoteId: configBot.id });\r\n    }\r\n} catch(e) {\r\n    ab.links.utils.abLogAndToast({ message: `Refreshing homeworld failed. ${ab.links.utils.getErrorMessage(e)}`, logType: 'error' });\r\n} finally {\r\n    configBot.tags.menuPortal = null;\r\n    destroy(busyIndicator);\r\n}\r\n","showHomeVersionHistory":"@if (!tags.homeBase) {\r\n    return;\r\n}\r\n\r\nconst getRecord = await os.getData(configBot.tags.studio ?? authBot.id, 'home');\r\nif (!getRecord.success) { \r\n    console.log(\"[place_toolbox.homePlace]: Could not fetch version history\");\r\n    return;\r\n}\r\n\r\nconfigBot.tags.menuPortal = \"homeWorldVersionMenu\";\r\nshout(\"clearHomeWorldVersionMenu\");\r\n\r\nconst homeWorldCore = getBot(\"isHomeWorldCore\", true);\r\n\r\nconst keepCurrentButton = {\r\n    homeWorldVersionMenu: true,\r\n    clearHomeWorldVersionMenu: `@destroy(thisBot)`,\r\n    label: \"keep current version\",\r\n    onClick: `@\r\n        shout(\"clearHomeWorldVersionMenu\");\r\n    `\r\n}\r\nab.links.menu.abCreateMenuButton(keepCurrentButton);\r\n\r\nlet numShown = 0;\r\nconst reversedArr = getRecord.data.eggVersionHistory.reverse();\r\nfor (let i = 0; i < reversedArr.length; ++i) {\r\n    if (i > 7) {\r\n        return;\r\n    }\r\n\r\n    //Make a button\r\n    const versionButton = {\r\n        homeWorldVersionMenu: true,\r\n        clearHomeWorldVersionMenu: `@destroy(thisBot)`,\r\n        label: \"version \" + (i + 1),\r\n        versionUrl: reversedArr[i],\r\n        versionIndex: i + 1,\r\n        homeWorldCore: getLink(homeWorldCore), \r\n        onClick: `@\r\n            let confirmed = await os.showConfirm({\r\n                title: 'Confirm',\r\n                content: 'Please confirm you want to revert to this version.'\r\n            });\r\n\r\n            if (!confirmed) {\r\n                shout(\"clearHomeWorldVersionMenu\");\r\n                return;\r\n            }\r\n\r\n            links.homeWorldCore.changeHomeVersion(tags.versionIndex);\r\n            shout(\"clearHomeWorldVersionMenu\");\r\n        `\r\n    }\r\n\r\n    ab.links.menu.abCreateMenuButton(versionButton);\r\n}","factoryResetHomeWorld":"@if (!tags.homeBase) {\r\n    return;\r\n}\r\n\r\nlet confirmed = await os.showConfirm({\r\n    title: 'Confirm',\r\n    content: 'Please confirm the action.'\r\n});\r\n\r\nif (!confirmed) {\r\n    return;\r\n}\r\n\r\nos.toast(\"resetting home base...\");\r\n\r\nconst homeCore = getBot(\"isHomeWorldCore\", true)\r\n\r\nif (homeCore) {\r\n    homeCore.tags.saveEnabled = false;\r\n}\r\n\r\nconst currentDim = ab.links.remember.tags.abActiveDimension;\r\nconst homeWorldBots = getBots(byTag(currentDim, true), byTag(\"system\", sys => sys?.substring(0, 3) != 'ab.'), byTag(\"abIgnore\", null), byTag(\"space\", 'shared'));\r\n\r\ndestroy(homeWorldBots);\r\ndestroy(homeCore);\r\n\r\nawait ab.links.search.onLookupAskID({askID: 'home', channelConfig: false, autoHatch: true, sourceEvent: 'factory_reset_home_base', ignoreReserved: true, eggParameters: {saveOnLoad: true}});","artifact":"ðŸ”—78e41503-c933-4f8a-817a-ba97bf8d5d27","learn":"ðŸ”—6657b865-e983-4401-9fc9-f5418d18a7f7","onBotChanged":"@const needUpdateBillboardLabel = that.tags.some(t => t === 'placeLabel' || t === 'placeLabelFloatingBackgroundColor' || t === 'placeLabelColor');\n\nif (needUpdateBillboardLabel && tags.ready) {\n    thisBot.updateBillboardLabel();\n}","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\n    destroy(thisBot.vars.billboardLabelBot);\n    thisBot.vars.billboardLabelBot = null;\n}\n\nthisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \n    bot: thisBot, \n    label: tags.placeLabel,\n    color: tags.placeLabelFloatingBackgroundColor,\n    dimension: tags.dimension,\n    // botLabelMargin: 0,\n    labelColor: tags.placeLabelColor,\n    space: 'tempLocal',\n})","onBotAdded":"@let waitTime = 0;\n\nwhile(!globalThis.ab?.links.bot_factory) {\n    if (waitTime >= 5000) {\n        return;\n    }\n    \n    await os.sleep(250);\n    waitTime += 250;\n}\n\nmasks.ready = true;\n\nthisBot.updateBillboardLabel();","onABStripArtifactInstanceDataFromBotData":"@const { data } = that;\n\ndelete data.tags.placeLabel;\ndelete data.tags.placeLabelColor;\ndelete data.tags.placeLabelFloatingBackgroundColor;\ndelete data.tags.color;\ndelete data.tags.form ;\ndelete data.tags.formSubtype;\ndelete data.tags.formAddress;\ndelete data.tags.formAddressAspectRatio;\n\n// [Ryan] These shouldn't be hardcode but i dont understand whats going on with dimensionData.\ndelete data.tags.dimension;\ndelete data.tags.home;\ndelete data.tags.homeX;\ndelete data.tags.homeY;\ndelete data.tags.homeZ;\ndelete data.tags.homeRotationX;\ndelete data.tags.homeRotationY;\ndelete data.tags.homeRotationZ;","backupHomeworld":"@const homeCore = getBot(\"isHomeWorldCore\", true)\r\n\r\nif (homeCore) {\r\n    homeCore.saveData();\r\n}"}}}}