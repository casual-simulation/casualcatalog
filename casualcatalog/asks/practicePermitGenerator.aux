{"version":1,"state":{"2bd0a6d6-e2e8-4f63-9fa7-5b47850b0a24":{"id":"2bd0a6d6-e2e8-4f63-9fa7-5b47850b0a24","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","ppgMenuOpen":"@thisBot.ppgMenuReset();\n\nmasks.menuOpen = true;\nconfigBot.tags.menuPortal = 'ppgMenu';\n\nab.links.menu.abCreateMenuButton({\n    ppgMenu: true,\n    label: 'generate csv',\n    formAddress: 'view_list',\n    manager: getLink(thisBot),\n    onClick: `@\n        links.manager.ppgCSV();\n    `\n});\n\nab.links.menu.abCreateMenuButton({\n    ppgMenu: true,\n    label: 'generate test qr code',\n    formAddress: 'qr_code',\n    manager: getLink(thisBot),\n    onClick: `@\n        links.manager.ppgQR();\n    `\n});","ppgMenuReset":"@masks.menuOpen = null;\n\nif (configBot.tags.menuPortal === 'ppgMenu') {\n    configBot.tags.menuPortal = null;\n}\n\nconst menuBots = getBots(b => b.tags.ppgMenu != null);\ndestroy(menuBots);","abIDOrigin":"practicePermitGenerator","cw":"14","draggable":"false","form":"egg","home":true,"homeX":0,"homeY":"0","homeZ":0,"loop":false,"onClick":"@thisBot.ppgMenuOpen();\n","onGridClick":"@thisBot.ppgMenuReset();","onDestroy":"@thisBot.ppgMenuReset();","ppgCSV":"@masks.billboardLabel = \"loading\";\n\nconst JSZip = (await import(\"https://cdn.skypack.dev/jszip\")).default;\nconst Papa = (await import(\"https://cdn.skypack.dev/papaparse\")).default;\n\nconst rows = [];\nconst zip = new JSZip();\n\nlet permitCountInput = await os.showInput(tags.permitCount, {\n    title: 'How many permits would you like to generate?',\n    type: 'text',\n    autoSelect: true,\n})\n\nif (permitCountInput) {\n    let inputNumber = Number(permitCountInput);\n\n    if (Number.isNaN(inputNumber)) {\n        os.toast('input must be a number');\n        return;\n    }\n\n    if (!Number.isInteger(inputNumber)) {\n        os.toast('input must be an integer');\n        return;\n    }\n\n    if (inputNumber <= 0) {\n        os.toast('permit count must be >= 1');\n        return;\n    }\n\n    masks.permitCount = Number(permitCountInput);\n} else {\n    os.toast('must provide a number of permits to generate');\n    return;\n}\n\nfor (let i = 0; i < tags.permitCount; i++) {\n    const permit = thisBot.ppgCreatePermit();\n\n    rows.push({\n        UUID: permit.identifier,\n        PIN: permit.pin,\n        URL: permit.qrUrl\n    });\n\n    if (i !== tags.permitCount - 1) {\n        masks.billboardLabel = \"working on qr code \" + i;\n    } else {\n        masks.billboardLabel = \"generation complete\";\n        await os.sleep(1000);\n    }\n}\n\nconst csv = Papa.unparse(rows, {\n    header: true,\n    quotes: true\n});\n\nfunction fileDate() {\n    function twoDigit(n) { return (n < 10 ? '0' : '') + n; }\n    const now = new Date();\n    return '' + now.getFullYear() + twoDigit(now.getMonth() + 1) + twoDigit(now.getDate());\n}\n\nzip.file(fileDate() + 'practicePermits.csv', csv);\nconst content = await zip.generateAsync({ type: \"blob\" });\nos.download(content, fileDate() + '_practicePermits.zip');\n\nmasks.billboardLabel = null;","ppgQR":"@const permit = thisBot.ppgCreatePermit();\n\nos.showQRCode(permit.qrUrl);","scale":"3","system":"practicePermitGenerator.generator","abVersion":"10.25","practicePermitGenerator":"true","cursor":"pointer","onPointerEnter":"@masks.color = tags.hoverColor;","hoverColor":"#73D8FF","color":"#009CE0","onPointerExit":"@masks.color = null;","onEggHatch":"@thisBot.initialize();","initialize":"@if (masks.initialized) {\n    return;\n}\n\nmasks.initialized = true;\n\ngridPortalBot.masks.portalColor = \"#515A5A\";\ngridPortalBot.masks.portalPannable = false;\ngridPortalBot.masks.portalRotatable = false;","onInstJoined":"@thisBot.initialize();","permitCount":"250","updateBillboardLabel":"@if (!globalThis.ab) {\n    return;\n}\n\nif (thisBot.vars.billboardLabel) {\n    destroy(thisBot.vars.billboardLabel);\n    thisBot.vars.billboardLabel = null;\n}\n\nthisBot.vars.billboardLabel = ab.links.bot_factory.abCreateBillboardLabel({ bot: thisBot, dimension: 'home', label: tags.billboardLabel });","onBotChanged":"@const updateLabel = that.tags.some(t => t === 'billboardLabel');\n\nif (updateLabel) {\n    thisBot.updateBillboardLabel();\n}","billboardLabel":"practice permit generator","onABInitialized":"@thisBot.updateBillboardLabel();","ppgCreatePermit":"@const identifier = uuid();\nconst pin = math.randomInt(1000, 10000);\nconst ph = crypto.sha256(pin).substring(0, 4);\nconst qrUrl = `https://ab1.bot/?ask=eggCarton&bios=local&staticInst=${identifier}&ph=${ph}&cw=${tags.cw}`;\n\nreturn {\n    identifier,\n    pin,\n    qrUrl\n};"}}}}