{"version":1,"state":{"2428f111-acb0-4abc-9a40-aedcfcaafe2c":{"id":"2428f111-acb0-4abc-9a40-aedcfcaafe2c","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","abIDOrigin":"rot-launcher","abIDStudio":"1259f269-03b9-41d4-b088-c199d8f586ec","color":"orange","onCreate":"@whisper(thisBot, 'onInit');","onInit":"@if (getBot(\"playerID\", configBot.id)) { return }\nif (configBot.tags.systemPortal !== undefined) { return }\n\nconsole.log(\"[RoT] Creating player...\")\nlet xLoc = -85.67668600;\nlet yLoc = 42.96540000;\n\nconst mapDimension = globalThis.mapDimension ?? 'map';\nconst playerTemplate = getBot(\"system\", \"rot.templates.player\");\nif (!playerTemplate) { os.sleep(500).then(() => { whisper(thisBot, 'onInit') }) }\nconst playerData = { ...playerTemplate.tags }\nplayerData[\"space\"] = \"tempShared\";\nplayerData[mapDimension] = true;\nplayerData[`${mapDimension}X`] = xLoc;\nplayerData[`${mapDimension}Y`] = yLoc;\nplayerData[\"system\"] = `rot.players.${configBot.id}`;\nplayerData[\"playerID\"] = configBot.id;\n\nconsole.log(\"[RoT] Made player object\")\n\nconst playerBot = create(playerData)\n\nconsole.log(\"[RoT] Created player bot\", playerBot)\n\n// starts the location updater\nwhisper(playerBot, \"locationLoop\")\n\nawait os.focusOn({x: xLoc, y: yLoc}, {\n    portal: 'map',\n    zoom: 3000,\n    rotation: {\n        x: Math.PI / 3,\n        y: - Math.PI / 4,\n    },\n})\n\nconsole.log(\"[RoT] Focused player\")","onInstJoined":"@whisper(thisBot, 'onInit')","onInstStreamLost":"@destroy(getBot(\"playerID\", configBot.id));","onInstStreaming":"@whisper(thisBot, 'onInit');","packageName":"player","system":"rot.playerManager","rot-launcher":"true","abVersion":"10.10"}},"6ff66ffd-a75c-435b-875e-95a139aa3901":{"id":"6ff66ffd-a75c-435b-875e-95a139aa3901","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","abIDOrigin":"rot-launcher","abIDStudio":"1259f269-03b9-41d4-b088-c199d8f586ec","color":"silver","onCreate":"@whisper(thisBot, 'onInit');","onInit":"@if ( masks.initialized ) { return } // Already initialized\nif (!configBot) { // Make sure configBot exists\n    os.sleep(500).then(() => {\n        whisper(thisBot, 'onInit');\n    })\n    return;\n}\n\nif ( configBot.tags.sheetPortal ) { return } // In sheet or system portal\nif ( configBot.tags.systemPortal ) { return }\n\n// Avoid re-initialization\nmasks.initialized = true;\n\n// Go to map portal\nmapPortalBot.tags.mapPortalBasemap = 'topo-vector';\nconfigBot.tags.gridPortal = null;\nconfigBot.tags.mapPortal = 'map';\ngridPortalBot.tags.portalPannable = false;","onInstStreaming":"@whisper(thisBot, 'onInit');","packageName":"map","system":"rot.map","rot-launcher":"true","abVersion":"10.10"}},"dd5ebcf7-dcb4-42c7-8eee-e47a4947f913":{"id":"dd5ebcf7-dcb4-42c7-8eee-e47a4947f913","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","abIDOrigin":"rot-launcher","abIDStudio":"1259f269-03b9-41d4-b088-c199d8f586ec","artifactInteractionRadiusKm":"0.07","artifactRadiusKm":"1","color":"orange","continueLocationPull":false,"draggable":"false","form":"mesh","formAddress":"https://publicos-link-filesbucket-404655125928.s3.amazonaws.com/1259f269-03b9-41d4-b088-c199d8f586ec/110fc70a2fbc7c5cdeeda62bbe75f34873d9ba60873c7f096d7b61555a19379c.xml","formSubtype":"gltf","locationFetchInterval":"500","locationLoop":"@// begins the loop of location updating\r\nif(!tags.continueLocationPull){\r\n    return;\r\n}\r\n\r\nawait os.sleep(tags.locationFetchInterval)\r\nconsole.log(\"[RoT] updating location\")\r\nwhisper(thisBot, \"updateLocation\")","mapX":-85.67498570711548,"mapY":42.97459459459459,"moveTime":"0.5","moveTo":"@if(\"rot.players.\" + configBot.id !== tags.system){\n    return;\n}\nconst dim: string = that.dimension ?? os.getCurrentDimension();\n\nconst fromObject = {};\nfromObject[`${dim}X`] = tags[`${dim}X`] ?? 0;\nfromObject[`${dim}Y`] = tags[`${dim}Y`] ?? 0;\n\nconst toObject = {};\ntoObject[`${dim}X`] = that?.x ?? 0;\ntoObject[`${dim}Y`] = that?.y ?? 0;\n\nthisBot.toggleVisibleArtifacts()\n\nawait animateTag(thisBot, {\n    fromValue: fromObject,\n    toValue: toObject,\n    duration: tags.moveTime,\n    tagMaskSpace: \"local\"\n})\n","onBotChanged":"@thisBot.toggleVisibleArtifacts()","onCreate":"@thisBot.toggleVisibleArtifacts()","onGridClick":"@// if we have their location don't allow manual movement\nif(tags.continueLocationPull){\n    return;\n}\n\nwhisper(thisBot, 'moveTo', {\n    dimension: that.dimension,\n    x: that.position.x,\n    y: that.position.y,\n});\n\nos.focusOn(that.position, {\n    portal: 'map',\n    duration: tags.moveTime * 3,\n    easing: {\n        type: \"quadratic\",\n    mode: \"inout\"\n    }\n})","onInstJoined":"@thisBot.toggleVisibleArtifacts()","onKeyDown":"@let keyPressed = that.keys[0]\r\n\r\nswitch(keyPressed){\r\n    // allow the user to press \"Shift+R\" to retry location \r\n    case \"R\":\r\n        tags.continueLocationPull = true\r\n        whisper(thisBot, \"locationLoop\")\r\n}","packageName":"player","scale":".5\r\n","system":"rot.templates.player","toggleVisibleArtifacts":"@// function to find the distance between two points on a globe\nfunction haversineDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371; // Radius of the Earth in kilometers\n    const dLat = toRadians(lat2 - lat1);\n    const dLon = toRadians(lon2 - lon1);\n    const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c;\n    return distance; // in kilometers\n}\n\n// helper function\nfunction toRadians(degrees) {\n    return degrees * (Math.PI / 180);\n}\n\n\nlet artifacts = getBots(byTag(\"#system\", \"rot.artifacts.artifact\"))\n\nif(artifacts === []){\n    // if theres no artifacts then leave\n    return;\n}\n\nfor (let i = 0; i < artifacts.length; i++) {\n    let currArtifact = artifacts[i]\n\n    const mapDimension = globalThis.mapDimension ?? 'map';\n\n    // gets the player\n    const player = getBot(byTag(\"#playerID\", configBot.id))\n    // gets the players long and lat\n    let pLong = player.tags[mapDimension + \"X\"]\n    let pLat = player.tags[mapDimension + \"Y\"]\n\n    // gets the artifacts long and lat\n    let aLong = currArtifact.tags[mapDimension + \"X\"]\n    let aLat = currArtifact.tags[mapDimension + \"Y\"]\n\n    let distanceFromPlayer = haversineDistance(pLat, pLong, aLat, aLong)\n    \n    // stores which players are near inside each artifact\n    currArtifact.tags[\"playerNear\" + configBot.id] = !(distanceFromPlayer >= tags.artifactInteractionRadiusKm) ? true : false\n    // triggers a rotate animation\n    whisper(currArtifact,\"rotateAnimation\")\n}","updateLocation":"@// only runs this if the user is re-iniatalizing location access\r\nif (!tags.continueLocationPull) {\r\n    shout(\"onAwaitingLocation\")\r\n    // attempts to find geoLocation\r\n    let loc = await os.getGeolocation()\r\n    let locationBot = getBot(\"#name\", \"locationRequest\")\r\n    locationBot.closeApp()\r\n}\r\n// grabs location without changing GUI\r\nlet loc = await os.getGeolocation()\r\nif (loc.success) {\r\n    // find map dimension\r\n    const mapDimension = globalThis.mapDimension ?? \"map\"\r\n    // sets virutal location to physical one\r\n    const yLoc = loc.latitude;\r\n    const xLoc = loc.longitude;\r\n\r\n    // moves bot to new locattion\r\n    whisper(thisBot, \"moveTo\", {\r\n        dimension: mapDimension,\r\n        x: xLoc,\r\n        y: yLoc\r\n    })\r\n\r\n    await os.focusOn(thisBot, {\r\n        portal: mapDimension,\r\n        duration: tags.moveTime,\r\n        easing: {\r\n            type: \"quadratic\",\r\n            mode: \"inout\"\r\n        }\r\n    })\r\n    tags.continueLocationPull = true\r\n    // continues the locationLoop\r\n    thisBot.locationLoop()\r\n}\r\nelse {\r\n    // ends the location loop and allows gridclick moving\r\n    os.toast(\"Could Not Find Location...Make sure location Permissions are enabled\")\r\n    shout(\"onLocationLost\")\r\n    tags.continueLocationPull = false\r\n}","rot-launcher":"true","abVersion":"10.10"}},"e7c17f3e-9ee1-432a-9b23-1282f0a39c33":{"id":"e7c17f3e-9ee1-432a-9b23-1282f0a39c33","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","abIDOrigin":"rot-launcher","abIDStudio":"1259f269-03b9-41d4-b088-c199d8f586ec","color":"black","dependencies":"ðŸ§¬[\n    {\n        \"abID\": \"rot-map\",\n        \"packageName\": \"map\"\n    },\n    {\n        \"abID\": \"rot-player\",\n        \"packageName\": \"player\"\n    },\n    {\n        \"abID\": \"rot-journal\",\n        \"packageName\": \"journal\"\n    }\n]","hatchDependencies":"@if (!Array.isArray(tags.dependencies)) {\n    return true;\n}\n\ntags.version = that?.version;\nconst promises = [];\n\n// Get and hatch egg if not existent\nfor (var d of tags.dependencies) {\n\tconst packageBot = getBot(\"packageName\", d.packageName);\n\n\tif (!packageBot) {\n\t\t// TODO: get specific version if specified\n        links.search.onLookupAskID({\n            askID: d.abID,\n            sourceEvent: 'tool',\n            eggParameters: {\n            },\n        });\n\t}\n}\n\nreturn true;\n","onCreate":"@whisper(thisBot, 'hatchDependencies');","packageName":"launcher","system":"rot.launcher","rot-launcher":"true","search":"ðŸ”—d8371444-9158-4436-8fc7-84cc91b7f525","abVersion":"10.10"}}}}