{"version":1,"state":{"52e49d5c-f06b-4525-9686-37f826a4abc7":{"id":"52e49d5c-f06b-4525-9686-37f826a4abc7","space":"shared","tags":{"system":"sim_toolbox.tools.simPlace","storyPlace":"true","createSkybox":"@let prompt;\r\nlet target;\r\nlet dimension;\r\nif (that && that.prompt && that.target && that.dimension) {\r\n    prompt = that.prompt;\r\n    target = that.target;\r\n    dimension = that.dimension;\r\n} else {\r\n    target = await os.showInput('', {\r\n        title: \"name this place\"\r\n    })\r\n    dimension = await os.showInput('', {\r\n        title: \"provide a dimension name\"\r\n    })\r\n    prompt = await os.showInput('', {\r\n        title: \"describe this place\"\r\n    })\r\n}\r\n\r\nif (!target || !prompt || !dimension) {\r\n    os.toast(\"You must provide a name, dimension, and description.\");\r\n    return;\r\n}\r\n\r\ntags.bbLabel = target;\r\ntags.placePrompt = prompt;\r\ntags.chosenDimension = dimension.replace(\" \", \"\");\r\n\r\nconfigBot.tags.menuPortal = \"storyPlaceLoading\";\r\nconst loadingBar = ab.links.menu.abCreateMenuBusyIndicator({\r\n    label: \"Generating story place\",\r\n    storyPlaceLoading: true\r\n});\r\n\r\ntags.skyboxGenerating = true;\r\nlet skyboxImage;\r\ntry {\r\n    skyboxImage = await ai.generateSkybox(prompt,\"nsfw\",{blockadeLabs:{skyboxStyleId:143}});\r\n} catch (e) {\r\n    tags.color = 'red';\r\n    destroy(loadingBar);\r\n    tags.skyboxGenerating = false;   \r\n\r\n    os.toast(\"skybox generation failed\", e);\r\n    return;\r\n}\r\n\r\ndestroy(loadingBar); \r\n\r\ntags.skyboxGenerating = false;\r\ntags.color = null;\r\ntags.formAddress = skyboxImage;\r\nsetTagMask(thisBot, \"activeSkybox\", true, \"shared\");\r\n\r\nconst skybox = create({\r\n    form: 'skybox',\r\n    formAddress: skyboxImage,\r\n    pointable: false,\r\n    scale: 200,\r\n    [dimension + 'X']: 0,\r\n    [dimension + 'Y']: 0,\r\n    [dimension]: true,\r\n    anchorPoint: 'center',\r\n    [dimension + \"RotationX\"]: 1.5708,\r\n    system: 'story_toolbox.genBots.skybox',\r\n    abIgnore: true\r\n});\r\n\r\ntags.skybox = getLink(skybox);\r\n\r\nshout(\"onStorySceneChange\", target);\r\n\r\ngridPortalBot.tags.portalCameraType = \"perspective\";","artifact":"ðŸ”—78e41503-c933-4f8a-817a-ba97bf8d5d27","onClick":"@if (that) {\r\n    if (that.modality == 'mouse' && that.buttonId == 'right') {\r\n        const menuOptions = {\r\n            abMenuRefresh: `@destroy(thisBot);`,\r\n            place: getLink(thisBot)\r\n        }\r\n\r\n        const createDoorButton = {\r\n            ...menuOptions,\r\n            abBotMenuIcon: 'sensor_door',\r\n            abBotMenuLabel: 'create door',\r\n            abBotMenuSortOrder: -1,\r\n            abBotMenuAction: `@\r\n                links.place.tags.choosingDoor = true;\r\n                shout('abMenuRefresh');\r\n            `\r\n        }\r\n\r\n        const clearDoorsButton = {\r\n            ...menuOptions,\r\n            abBotMenuIcon: 'replay',\r\n            abBotMenuLabel: 'remove all doors',\r\n            abBotMenuAction: `@\r\n                links.place.tags.doors = null;\r\n                links.place.tags.lineTo = null;\r\n                shout('abMenuRefresh');\r\n            `\r\n        }\r\n\r\n        ab.links.menu.abCreateMenuButton(createDoorButton);\r\n        ab.links.menu.abCreateMenuButton(clearDoorsButton);\r\n\r\n        return;\r\n    }\r\n}\r\n\r\nconst doorBot = getBot(\"choosingDoor\", true);\r\n\r\nif (doorBot) {\r\n    if (doorBot == thisBot) {\r\n        tags.choosingDoor = false;\r\n    } else {\r\n        doorBot.addDoor(thisBot);\r\n        thisBot.addDoor(doorBot);\r\n        tags.color = tags.prevColor;\r\n        tags.prevColor = null;\r\n        return;\r\n    }\r\n}\r\n\r\nif (tags.skyboxGenerating == true) {\r\n    os.toast(\"skybox generating...\");\r\n    return;\r\n}\r\n\r\nif (tags.formAddress) {\r\n    shout(\"activateStoryPlaceSkybox\", tags.formAddress);\r\n} else {\r\n    thisBot.createSkybox();\r\n}","form":"sphere","abVersion":"10.10","abIDOrigin":"simPlace","onSkyboxToggleInitialized":"@if (that && that.tags.abArtifactInstanceID && that.tags.abArtifactInstanceID == tags.artifactInstanceID) {\r\n    setTagMask(that, configBot.tags.gridPortal, false, \"shared\");\r\n}","activateStoryPlaceSkybox":"@if (tags.formAddress && that == tags.formAddress) {\r\n    const currentDim = ab.links.remember.tags.abActiveDimension;\r\n    const currentPortal = configBot.tags.mapPortal ? \"map\" : configBot.tags.gridPortal == \"blueprint\" ? \"blueprint\" :\"grid\";\r\n\r\n    configBot.tags.gridPortal = tags.chosenDimension;\r\n    gridPortalBot.tags.portalCameraType = \"perspective\";\r\n\r\n    if (currentPortal == 'map') {\r\n        configBot.tags.mapPortal = null;\r\n        setTagMask(ab.links.remember, \"mapZoomPosition\", {x: tags[currentDim + 'X'], y: tags[currentDim + 'Y']});\r\n        configBot.tags.miniMapPortal = currentDim;\r\n    }\r\n\r\n    setTagMask(thisBot, 'activeSkybox', true, 'shared');\r\n    shout(\"onStorySceneChange\", tags.bbLabel);\r\n\r\n    gridPortalBot.tags.portalCameraType = \"perspective\";\r\n} else {\r\n    setTagMask(thisBot, 'activeSkybox', false, 'shared');\r\n}","scale":"2.5","onABArtifactCollectShards":"@const shard: ABArtifactShard = {\r\n    data: {\r\n        label: tags.bbLabel,\r\n        dimensionData: {\r\n            dimension: ab.links.remember.tags.abActiveDimension,\r\n            [ab.links.remember.tags.abActiveDimension]: tags[ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension + 'X']: tags[ab.links.remember.tags.abActiveDimension + 'X'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Y']: tags[ab.links.remember.tags.abActiveDimension + 'Y'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Z']: tags[ab.links.remember.tags.abActiveDimension + 'Z'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationX']: tags[ab.links.remember.tags.abActiveDimension + 'RotationX'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationY']: tags[ab.links.remember.tags.abActiveDimension + 'RotationY'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationZ']: tags[ab.links.remember.tags.abActiveDimension + 'RotationZ'],\r\n        },\r\n        simID: tags.simID,\r\n        color: tags.color,\r\n        doors: tags.doors,\r\n        labelFloatingBackgroundColor: tags.bbLabelFloatingBackgroundColor,\r\n        labelColor: tags.bbLabelColor,\r\n        placePrompt: tags.placePrompt,\r\n        formAddress: tags.formAddress ,\r\n        chosenDimension: tags.chosenDimension      \r\n    },\r\n    dependencies: [\r\n        {\r\n            askID: 'simPlace'\r\n        }\r\n    ]\r\n}\r\n\r\nreturn shard;","onABArtifactReconstitute":"@const data = that.data;\r\ntags.bbLabel = data.label ?? 'sim place';\r\ntags.color = data.color ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD';\r\ntags.bbLabelFloatingBackgroundColor = data.labelFloatingBackgroundColor ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD'; \r\ntags.bbLabelColor = data.labelColor ?? 'white';\r\ntags.placePrompt = data.placePrompt;\r\ntags.formAddress = data.formAddress;\r\ntags.chosenDimension = data.chosenDimension;\r\ntags.simID = data.simID ?? uuid();\r\ntags.doors = data.doors ?? [];\r\n\r\ntags.skyboxGenerating = false;\r\n\r\nif (tags.formAddress) {\r\n    tags.color = null;\r\n}\r\n\r\n//Handle lineTo\r\nif (tags.lineTo) {\r\n    tags.lineTo = null;\r\n}\r\nshout(\"onPlaceReconstituted\", thisBot);\r\n\r\n//clear possible extra data\r\nif (tags.choosingDoor) {\r\n    tags.choosingDoor = null;\r\n}\r\n\r\n//Place bot correctly\r\nif (data.dimensionData) {\r\n    for (const tagName in data.dimensionData) {\r\n        tags[tagName] = data.dimensionData[tagName];\r\n    }\r\n}\r\n\r\nif (tags.formAddress) {\r\n    const skybox = create({\r\n        form: 'skybox',\r\n        formAddress: tags.formAddress,\r\n        pointable: false,\r\n        scale: 200,\r\n        [tags.chosenDimension + 'X']: 0,\r\n        [tags.chosenDimension + 'Y']: 0,\r\n        [tags.chosenDimension]: true,\r\n        anchorPoint: 'center',\r\n        [tags.chosenDimension + \"RotationX\"]: 1.5708,\r\n        system: 'story_toolbox.genBots.skybox',\r\n        abIgnore: true\r\n    });\r\n\r\n    tags.skybox = getLink(skybox);\r\n}\r\n\r\ntags[tags.dimension + \"RotationX\"] = 1.5708;\r\n\r\n//If new action\r\nif (data.eggParameters) {\r\n    const dimension = data.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = data.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = data.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags.dimension = dimension;\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;   \r\n    tags[dimension + \"RotationX\"] = 1.5708; \r\n\r\n    if (data.eggParameters && data.eggParameters.storyParameters) {\r\n        thisBot.createSkybox({\"prompt\": data.eggParameters.storyParameters.prompt, \"target\": data.eggParameters.storyParameters.target});\r\n    } else {\r\n        thisBot.createSkybox();\r\n    }\r\n}","onABStripArtifactInstanceDataFromBotData":"@const { data } = that;\r\n\r\ndelete data.tags.bbLabel;\r\ndelete data.tags.bbLabelColor;\r\ndelete data.tags.bbLabelFloatingBackgroundColor;\r\ndelete data.tags.color;\r\ndelete data.tags[data.tags.dimension + \"X\"];\r\ndelete data.tags[data.tags.dimension + \"Y\"];\r\ndelete data.tags[data.tags.dimension + \"Z\"];\r\ndelete data.tags[data.tags.dimension + \"RotationX\"];\r\ndelete data.tags[data.tags.dimension + \"RotationY\"];\r\ndelete data.tags[data.tags.dimension + \"RotationZ\"];\r\ndelete data.tags[data.tags.dimension];\r\ndelete data.tags.dimension;\r\ndelete data.tags.placePrompt;\r\ndelete data.tags.formAddress;\r\ndelete data.tags.skybox;\r\ndelete data.tags.simID;\r\ndelete data.tags.skyboxGenerating;\r\ndelete data.tags.chosenDimension;\r\ndelete data.tags.doors;","abArtifactName":"simPlace","onBotAdded":"@let waitTime = 0;\r\n\r\nwhile(!globalThis.ab?.links.bot_factory) {\r\n    if (waitTime >= 5000) {\r\n        return;\r\n    }\r\n    \r\n    await os.sleep(250);\r\n    waitTime += 250;\r\n}\r\n\r\nmasks.ready = true;\r\n\r\nthisBot.updateBillboardLabel();","onBotChanged":"@const needUpdateBillboardLabel = that.tags.some(t => t === 'bbLabel' || t === 'bbLabelFloatingBackgroundColor' || t === 'bbLabelColor');\r\n\r\nif (needUpdateBillboardLabel && tags.ready) {\r\n    thisBot.updateBillboardLabel();\r\n}","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\r\n    destroy(thisBot.vars.billboardLabelBot);\r\n    thisBot.vars.billboardLabelBot = null;\r\n}\r\n\r\nthisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \r\n    bot: thisBot, \r\n    label: tags.bbLabel,\r\n    color: tags.bbLabelFloatingBackgroundColor,\r\n    dimension: tags.dimension,\r\n    // botLabelMargin: 0,\r\n    labelColor: tags.bbLabelColor,\r\n    space: 'tempLocal',\r\n})","strokeColor":"white","cursor":"pointer","addDoor":"@if (!tags.doors) {\r\n    tags.doors = [];\r\n}\r\n\r\nif (!tags.lineTo) {\r\n    tags.lineTo = [];\r\n}\r\n\r\nconst simID = that?.tags?.simID;\r\n\r\nif (simID) {\r\n    if (!tags.doors.includes(simID)) {\r\n        tags.doors.push(simID);\r\n        tags.lineTo.push(that?.id);\r\n    }\r\n}\r\n\r\ntags.choosingDoor = false;","onPointerEnter":"@const doorBot = getBot(\"choosingDoor\", true);\r\n\r\nif (doorBot) {\r\n    tags.prevColor = tags.color;\r\n    tags.color = '#fcba03';\r\n}","onPointerExit":"@const doorBot = getBot(\"choosingDoor\", true);\r\n\r\nif (doorBot) {\r\n    tags.color = tags.prevColor;\r\n    tags.prevColor = null;\r\n}","onPlaceReconstituted":"@if (tags.doors && tags.doors.length != 0 && tags.doors.includes(that?.tags?.simID)) {\r\n    if (!tags.lineTo) {\r\n        tags.lineTo = [];\r\n    }\r\n\r\n    if (!tags.lineTo.includes(that.id)) {\r\n        tags.lineTo.push(that.id);\r\n    }\r\n}","onPortalChanged":"@if (that.portal == 'gridPortal') {\r\n    if (that.dimension == tags.chosenDimension) {\r\n        thisBot.showPlaceNav();\r\n    } else {\r\n        const placeBot = getBot(\"chosenDimension\", that.dimension);\r\n        if (!placeBot) {\r\n           shout(\"clearPlaceNavMenu\"); \r\n        }\r\n    }\r\n}","showPlaceNav":"@if (configBot.tags.gridPortal != tags.chosenDimension) {\r\n    return;\r\n}\r\n\r\nshout(\"clearPlaceNavMenu\");\r\n\r\nif (configBot.tags.menuPortal != \"action_menu\") {\r\n    configBot.tags.menuPortal = \"action_menu\";\r\n}\r\n\r\nconst menuOptions = {\r\n    action_menu: true,\r\n    clearPlaceNavMenu: `@destroy(thisBot);`\r\n}\r\n\r\nconst doorsGroup = {\r\n    groupSortOrder: 150,\r\n    action_menuSortOrder: 150,\r\n    menuItems: []\r\n}\r\n\r\nfor (let i = 0; i < tags.doors.length; ++i) {\r\n    const placeBot = getBot(\"simID\", tags.doors[i]);\r\n    if (!placeBot) {\r\n        continue;\r\n    }\r\n    const tempDropdownItem = {\r\n        ...menuOptions,\r\n        place: getLink(placeBot),\r\n        label: `travel to: ${placeBot?.tags.bbLabel}`,\r\n        onClick: `@\r\n            shout(\"activateStoryPlaceSkybox\", links?.place?.tags.formAddress);\r\n        `\r\n    }\r\n    doorsGroup.menuItems.push(tempDropdownItem);\r\n}\r\n\r\nif (tags.doors && tags.doors.length != 0) {\r\n    ab.links.menu.abCreateMenuGroup(doorsGroup);\r\n}","menuButton":"ðŸ”—47b347fb-30b0-4fbe-ba32-fe5e0ce5f712","undefinedRotationX":1.5708,"choosingDoor":false,"anchorPoint":"center","onRemoteData":"@if (that.name == \"onStartMenu\") {\r\n    thisBot.showPlaceNav();\r\n}","onAnyBotDrop":"@if (that.bot == thisBot) {  \r\n    tags[tags.dimension + \"RotationX\"] = 1.5708;\r\n}","lineTo":["6aeb3463-eeae-4b07-b19e-bb310ecd4fe7"],"onGridClick":"@if (configBot.tags.gridPortal == tags.chosenDimension) {\r\n    shout(\"showPlaceNav\");\r\n}"}}}}