{"version":1,"state":{"2da30fea-0b53-4d21-929f-b01c0caad952":{"id":"2da30fea-0b53-4d21-929f-b01c0caad952","space":"shared","tags":{"system":"sim_toolbox.tools.simReaction","onABArtifactCollectShards":"@const shard: ABArtifactShard = {\r\n    data: {\r\n        label: tags.actionLabel,\r\n        dimensionData: {\r\n            dimension: [ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension]: tags[ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension + 'X']: tags[ab.links.remember.tags.abActiveDimension + 'X'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Y']: tags[ab.links.remember.tags.abActiveDimension + 'Y'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Z']: tags[ab.links.remember.tags.abActiveDimension + 'Z'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationX']: tags[ab.links.remember.tags.abActiveDimension + 'RotationX'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationY']: tags[ab.links.remember.tags.abActiveDimension + 'RotationY'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationZ']: tags[ab.links.remember.tags.abActiveDimension + 'RotationZ'],\r\n        },\r\n        color: tags.color,\r\n        labelFloatingBackgroundColor: tags.actionLabelFloatingBackgroundColor,\r\n        labelColor: tags.actionLabelColor,\r\n        actionID: tags.actionID,\r\n        actionStory: tags.actionStory,\r\n        actionPrerequisites: tags.actionPrerequisites,\r\n        roleTags: tags.roleTags,\r\n        reactionAttribute: tags.reactionAttribute,\r\n        reactionEffect: tags.reactionEffect,\r\n        reactionValue: tags.reactionValue\r\n    },\r\n    dependencies: [\r\n        {\r\n            askID: 'simReaction'\r\n        }\r\n    ]\r\n}\r\n\r\nreturn shard;","onABArtifactReconstitute":"@const data = that.data;\r\ntags.actionLabel = data.label ?? 'reaction';\r\ntags.color = data.color ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD';\r\ntags.actionLabelFloatingBackgroundColor = data.labelFloatingBackgroundColor ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD'; \r\ntags.actionLabelColor = data.labelColor ?? 'white';\r\ntags.actionID = data.actionID ?? uuid();\r\ntags.actionPrerequisites = data.actionPrerequisites;\r\ntags.actionStory = data.actionStory;\r\ntags.roleTags = data.roleTags ?? [];\r\ntags.reactionAttribute = data.reactionAttribute;\r\ntags.reactionEffect = data.reactionEffect ?? '+';\r\ntags.reactionValue = data.reactionValue ?? 1;\r\n\r\n//Handle lineTo\r\nif (tags.lineTo) {\r\n    tags.lineTo = null;\r\n}\r\nshout(\"onActionReconstituted\", thisBot);\r\n\r\n//clear possible extra data\r\nif (tags.choosingPrereq) {\r\n    tags.choosingPrereq = null;\r\n}\r\n\r\n//Place bot correctly\r\nif (data.dimensionData) {\r\n    for (const tagName in data.dimensionData) {\r\n        tags[tagName] = data.dimensionData[tagName];\r\n    }\r\n}\r\n\r\n//If new action\r\nif (data.eggParameters) {\r\n    const dimension = data.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = data.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = data.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags.dimension = dimension;\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n\r\n    thisBot.onClick();\r\n}","onABStripArtifactInstanceDataFromBotData":"@const { data } = that;\r\n\r\ndelete data.tags.actionLabel;\r\ndelete data.tags.actionLabelColor;\r\ndelete data.tags.actionLabelFloatingBackgroundColor;\r\ndelete data.tags.color;\r\ndelete data.tags[data.tags.dimension + \"X\"];\r\ndelete data.tags[data.tags.dimension + \"Y\"];\r\ndelete data.tags[data.tags.dimension + \"Z\"];\r\ndelete data.tags[data.tags.dimension + \"RotationX\"];\r\ndelete data.tags[data.tags.dimension + \"RotationY\"];\r\ndelete data.tags[data.tags.dimension + \"RotationZ\"];\r\ndelete data.tags[data.tags.dimension];\r\ndelete data.tags.dimension;\r\ndelete data.tags.actionID;\r\ndelete data.tags.actionPrerequisites;\r\ndelete data.tags.lineTo;\r\ndelete data.tags.actionStory;\r\ndelete data.tags.roleTags;\r\ndelete data.tags.reactionAttribute;\r\ndelete data.tags.reactionEffect;\r\ndelete data.tags.reactionValue;","onClick":"@if (that) {\r\n    if (that.modality == 'mouse' && that.buttonId == 'right') {\r\n        const menuOptions = {\r\n            abMenuRefresh: `@destroy(thisBot);`,\r\n            action: getLink(thisBot)\r\n        }\r\n\r\n        const actionMenuButton = {\r\n            ...menuOptions,\r\n            abBotMenuIcon: 'science',\r\n            abBotMenuLabel: 'react',\r\n            abBotMenuAction: `@\r\n                links.action.react();\r\n                shout('abMenuRefresh');\r\n            `\r\n        }\r\n\r\n        ab.links.menu.abCreateMenuButton(actionMenuButton);\r\n        return;\r\n    }\r\n}\r\n\r\nconst preReqBot = getBot(\"choosingPrereq\", true);\r\n\r\nif (preReqBot) {\r\n    if (preReqBot == thisBot) {\r\n        tags.choosingPrereq = false;\r\n    } else {\r\n        preReqBot.addPreReq(thisBot);\r\n        tags.color = tags.prevColor;\r\n        tags.prevColor = null;\r\n        return;\r\n    }\r\n}\r\n\r\n// os.toast('hello, world!');\r\nshout('abMenuRefresh');\r\nshout(\"clearSimActionMenu\");\r\n\r\nconfigBot.tags.menuPortal = 'simAction_menu';\r\n\r\nconst menuOptions = {\r\n    simAction_menu: true,\r\n    clearSimActionMenu: `@destroy(thisBot);`,\r\n    abMenuRefresh: \"@ destroy(thisBot);\",\r\n    reaction: getLink(thisBot)\r\n}\r\n\r\nconst labelButton = {\r\n    ...menuOptions,\r\n    label: 'label: ' + tags.actionLabel,\r\n    simAction_menuSortOrder: 1,\r\n    onClick: `@\r\n        const response = await os.showInput(links.reaction.tags.actionLabel, {\r\n            autoSelect: true,\r\n            title: 'label this action'\r\n        });\r\n        links.reaction.tags.actionLabel = response;\r\n        links.reaction.updateBillboardLabel();\r\n        links.reaction.onClick();\r\n    `\r\n}\r\n\r\nif (!tags.roleTags) {\r\n    tags.roleTags = [];\r\n}\r\nlet tagString = \"\";\r\nfor (let i = 0; i < tags.roleTags.length; ++i) {\r\n    tagString += i == 0 ? tags.roleTags[i] : (', ' + tags.roleTags[i]);\r\n}\r\n\r\nconst addRoleTagButton = {\r\n    ...menuOptions,\r\n    label: 'add role tag: ' + tagString,\r\n    simAction_menuSortOrder: 6,\r\n    onClick: `@\r\n        const response = await os.showInput('', {\r\n            autoSelect: true,\r\n            title: 'add a role tag'\r\n        });\r\n\r\n        links.reaction.tags.roleTags.push(response);\r\n        links.reaction.onClick();\r\n    `\r\n}\r\n\r\nconst storyButton = {\r\n    ...menuOptions,\r\n    label: 'story',\r\n    simAction_menuSortOrder: 4,\r\n    onClick: `@\r\n        const response = await os.showInput(links.reaction.tags.actionStory, {\r\n            autoSelect: true,\r\n            title: 'Provide a story for this action',\r\n        });\r\n        links.reaction.tags.actionStory = response;\r\n        links.reaction.onClick();\r\n    `\r\n}\r\n\r\nconst preReqButton = {\r\n    ...menuOptions,\r\n    label: 'add a prerequisite',\r\n    simAction_menuSortOrder: 5,\r\n    onClick: `@\r\n        links.reaction.tags.choosingPrereq = true;\r\n        shout(\"clearSimActionMenu\");\r\n    `\r\n}\r\n\r\nconst attributeButton = {\r\n    ...menuOptions,\r\n    label: 'attribute: ' + (tags.reactionAttribute ?? \"\"),\r\n    simAction_menuSortOrder: 6,\r\n    onClick: `@\r\n        const response = await os.showInput(links.reaction.tags.reactionAttribute, {\r\n            autoSelect: true,\r\n            title: 'What attribute should be affected?',\r\n        });\r\n        links.reaction.tags.reactionAttribute = response;\r\n        links.reaction.onClick();\r\n    `\r\n}\r\n\r\nconst effectButton = {\r\n    ...menuOptions,\r\n    label: 'effect: ' + (tags.reactionEffect ?? \"+\"),\r\n    dropdownSortOrder: 7,\r\n    dropdownOptions: [\r\n        {\r\n            ...menuOptions,\r\n            label: '+',\r\n            onClick: `@\r\n                links.reaction.tags.reactionEffect = tags.label;\r\n                links.reaction.onClick();\r\n            `\r\n        },\r\n        {\r\n            ...menuOptions,\r\n            label: '-',\r\n            onClick: `@\r\n                links.reaction.tags.reactionEffect = tags.label;\r\n                links.reaction.onClick();\r\n            `\r\n        },\r\n        {\r\n            ...menuOptions,\r\n            label: '=',\r\n            onClick: `@\r\n                links.reaction.tags.reactionEffect = tags.label;\r\n                links.reaction.onClick();\r\n            `\r\n        },\r\n        {\r\n            ...menuOptions,\r\n            label: '==',\r\n            onClick: `@\r\n                links.reaction.tags.reactionEffect = tags.label;\r\n                links.reaction.onClick();\r\n            `\r\n        }\r\n    ]\r\n}\r\n\r\nconst valueButton = {\r\n    ...menuOptions,\r\n    label: 'value: ' + (tags.reactionValue ?? \"\"),\r\n    simAction_menuSortOrder: 8,\r\n    onClick: `@\r\n        const response = await os.showInput(links.reaction.tags.reactionValue, {\r\n            autoSelect: true,\r\n            title: 'What value should the attribute be effected by?',\r\n        });\r\n        links.reaction.tags.reactionValue = response;\r\n        links.reaction.onClick();\r\n    `\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(labelButton);\r\nab.links.menu.abCreateMenuButton(storyButton);\r\nab.links.menu.abCreateMenuButton(preReqButton);\r\nab.links.menu.abCreateMenuButton(addRoleTagButton);\r\nab.links.menu.abCreateMenuButton(attributeButton);\r\nab.links.menu.abCreateMenuDropdown(effectButton);\r\nab.links.menu.abCreateMenuButton(valueButton);","abArtifactName":"simReaction","abIDOrigin":"simReaction","onBotAdded":"@let waitTime = 0;\r\n\r\nwhile(!globalThis.ab?.links.bot_factory) {\r\n    if (waitTime >= 5000) {\r\n        return;\r\n    }\r\n    \r\n    await os.sleep(250);\r\n    waitTime += 250;\r\n}\r\n\r\nmasks.ready = true;\r\n\r\nthisBot.updateBillboardLabel();","onBotChanged":"@const needUpdateBillboardLabel = that.tags.some(t => t === 'actionLabel' || t === 'actionLabelFloatingBackgroundColor' || t === 'actionLabelColor');\r\n\r\nif (needUpdateBillboardLabel && tags.ready) {\r\n    thisBot.updateBillboardLabel();\r\n}","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\r\n    destroy(thisBot.vars.billboardLabelBot);\r\n    thisBot.vars.billboardLabelBot = null;\r\n}\r\n\r\nthisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \r\n    bot: thisBot, \r\n    label: tags.actionLabel,\r\n    color: tags.actionLabelFloatingBackgroundColor,\r\n    dimension: configBot.tags.mapPortal ?? configBot.tags.gridPortal ?? 'home',\r\n    // botLabelMargin: 0,\r\n    labelColor: tags.actionLabelColor,\r\n    space: 'tempLocal',\r\n})","onPointerEnter":"@const preReqBot = getBot(\"choosingPrereq\", true);\r\n\r\nif (preReqBot) {\r\n    tags.prevColor = tags.color;\r\n    tags.color = '#fcba03';\r\n}","onPointerExit":"@const preReqBot = getBot(\"choosingPrereq\", true);\r\n\r\nif (preReqBot) {\r\n    tags.color = tags.prevColor;\r\n    tags.prevColor = null;\r\n}","addPreReq":"@if (!tags.actionPrerequisites) {\r\n    tags.actionPrerequisites = [];\r\n}\r\n\r\nif (!tags.lineTo) {\r\n    tags.lineTo = [];\r\n}\r\n\r\nconst actionID = that?.tags?.actionID;\r\n\r\nif (actionID) {\r\n    tags.actionPrerequisites.push(actionID);\r\n    tags.lineTo.push(that?.id);\r\n}\r\n\r\ntags.choosingPrereq = false;","onGridClick":"@shout(\"clearSimActionMenu\");\r\n//shout(\"clearActionMenu\");\r\n\r\nif (tags.choosingPreReq) {\r\n    tags.choosingPreReq = false;\r\n}","strokeColor":"white","simAction":"true","onActionCompleted":"@const currentRoleTag = getBot(\"roleOwner\", getID(configBot))?.tags.roleName;\nif (currentRoleTag && tags.roleTags.includes(currentRoleTag)) {\n    if (tags.actionPrerequisites && tags.actionPrerequisites.length != 0 && tags.actionPrerequisites.includes(that?.tags?.actionID)) {\n        thisBot.react();\n    }\n}","onActionReconstituted":"@if (tags.actionPrerequisites && tags.actionPrerequisites.length != 0 && tags.actionPrerequisites.includes(that?.tags?.actionID)) {\r\n    if (!tags.lineTo) {\r\n        tags.lineTo = [];\r\n    }\r\n\r\n    if (!tags.lineTo.includes(that.id)) {\r\n        tags.lineTo.push(that.id);\r\n    }\r\n}","cursor":"pointer","onRemoteData":"@if (that.name == \"onActionCompleted\") {\r\n    thisBot.onActionCompleted(getBot(\"actionID\", that.that));\r\n}","scale":".5","react":"@const roleBot = getBot(\"roleOwner\", getID(configBot));\r\nif (tags.reactionEffect == '+') {\r\n    try {\r\n        const newValue = Number(roleBot.tags.roleAttributes[tags.reactionAttribute]) + tags.reactionValue;\r\n        roleBot.editAttribute({'attributeName': tags.reactionAttribute, 'value': newValue});\r\n        const remotes = await os.remotes();\r\n        await sendRemoteData(remotes, \"onActionCompleted\", tags.actionID);\r\n    } catch (e) {\r\n        console.log(\"Could not effect attribute: \", tags.reactionAttribute, \"with value: \", tags.reactionValue);\r\n    }\r\n\r\n} else if (tags.reactionEffect == '-') {\r\n    try {\r\n        \r\n        const newValue = Number(roleBot.tags.roleAttributes[tags.reactionAttribute]) - tags.reactionValue;\r\n        console.log(roleBot.tags.roleAttributes[tags.reactionAttribute], newValue)\r\n        roleBot.editAttribute({'attributeName': tags.reactionAttribute, 'value': newValue});\r\n        const remotes = await os.remotes();\r\n        await sendRemoteData(remotes, \"onActionCompleted\", tags.actionID);\r\n    } catch (e) {\r\n        console.log(\"Could not effect attribute: \", tags.reactionAttribute, \"with value: \", tags.reactionValue);\r\n    }\r\n} else if (tags.reactionEffect == '=') {\r\n    roleBot.editAttribute({'attributeName': tags.reactionAttribute, 'value': tags.reactionValue});\r\n    const remotes = await os.remotes();\r\n    await sendRemoteData(remotes, \"onActionCompleted\", tags.actionID);\r\n} else if (tags.reactionEffect == '==') {\r\n    if (roleBot.tags.roleAttributes[tags.reactionAttribute] && roleBot.tags.roleAttributes[tags.reactionAttribute] == tags.reactionValue) {\r\n        const remotes = await os.remotes();\r\n        await sendRemoteData(remotes, \"onActionCompleted\", tags.actionID);\r\n    }\r\n}","choosingPrereq":false}}}}