{"version":1,"state":{"ae866abd-8b70-4b86-857c-878c5c1696d9":{"id":"ae866abd-8b70-4b86-857c-878c5c1696d9","space":"shared","tags":{"system":"sim_toolbox.tools.simRole","onABArtifactCollectShards":"@const shard: ABArtifactShard = {\r\n    data: {\r\n        label: tags.bbLabel,\r\n        dimensionData: {\r\n            dimension: ab.links.remember.tags.abActiveDimension,\r\n            [ab.links.remember.tags.abActiveDimension]: tags[ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension + 'X']: tags[ab.links.remember.tags.abActiveDimension + 'X'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Y']: tags[ab.links.remember.tags.abActiveDimension + 'Y'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Z']: tags[ab.links.remember.tags.abActiveDimension + 'Z'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationX']: tags[ab.links.remember.tags.abActiveDimension + 'RotationX'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationY']: tags[ab.links.remember.tags.abActiveDimension + 'RotationY'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationZ']: tags[ab.links.remember.tags.abActiveDimension + 'RotationZ'],\r\n        },\r\n        color: tags.color,\r\n        labelFloatingBackgroundColor: tags.bbLabelFloatingBackgroundColor,\r\n        labelColor: tags.bbLabelColor,\r\n        simID: tags.simID,\r\n        form: tags.form,\r\n        formSubtype: tags.formSubtype,\r\n        formAddress: tags.formAddress,\r\n        formAddressAspectRatio: tags.formAddressAspectRatio,\r\n        simAttributes: tags.simAttributesStartingValues,\r\n        roleLocked: tags.roleLocked,\r\n        roleName: tags.roleName\r\n    },\r\n    dependencies: [\r\n        {\r\n            askID: 'simRole'\r\n        }\r\n    ]\r\n}\r\n\r\nreturn shard;","onABArtifactReconstitute":"@const data = that.data;\r\ntags.bbLabel = data.label ?? 'role';\r\ntags.color = data.color ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD';\r\ntags.bbLabelFloatingBackgroundColor = data.labelFloatingBackgroundColor ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD'; \r\ntags.bbLabelColor = data.labelColor ?? 'white';\r\ntags.simID = data.simID ?? uuid();\r\ntags.form = data.form ?? 'sphere';\r\ntags.formSubtype = data.formSubtype;\r\ntags.formAddress = data.formAddress;\r\ntags.formAddressAspectRatio = data.formAddressAspectRatio;\r\ntags.simAttributes = data.simAttributes;\r\ntags.roleLocked = data.roleLocked ?? false;\r\ntags.roleName = data.roleName;\r\n\r\nif (!tags.simAttributes) {\r\n    tags.simAttributes = {};\r\n}\r\n\r\n//Place bot correctly\r\nif (data.dimensionData) {\r\n    for (const tagName in data.dimensionData) {\r\n        tags[tagName] = data.dimensionData[tagName];\r\n    }\r\n}\r\n\r\n//If new action\r\nif (data.eggParameters) {\r\n    const dimension = data.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = data.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = data.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags.dimension = dimension;\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n\r\n    thisBot.onClick();\r\n}","onABStripArtifactInstanceDataFromBotData":"@const { data } = that;\r\n\r\ndelete data.tags.bbLabel;\r\ndelete data.tags.bbLabelColor;\r\ndelete data.tags.bbLabelFloatingBackgroundColor;\r\ndelete data.tags.color;\r\ndelete data.tags[data.tags.dimension + \"X\"];\r\ndelete data.tags[data.tags.dimension + \"Y\"];\r\ndelete data.tags[data.tags.dimension + \"Z\"];\r\ndelete data.tags[data.tags.dimension + \"RotationX\"];\r\ndelete data.tags[data.tags.dimension + \"RotationY\"];\r\ndelete data.tags[data.tags.dimension + \"RotationZ\"];\r\ndelete data.tags[data.tags.dimension];\r\ndelete data.tags.dimension;\r\ndelete data.tags.simID;\r\ndelete data.tags.form;\r\ndelete data.tags.formSubtype;\r\ndelete data.tags.formAddress;\r\ndelete data.tags.formAddressAspectRatio;\r\ndelete data.tags.simAttributes;\r\ndelete data.tags.roleLocked;\r\ndelete data.tags.roleStack;\r\ndelete data.tags.roleName;\r\ndelete data.tags.roleOwner;\r\ndelete data.tags.simAttributesStartingValues;\r\ndelete data.tags.statsButton;","onClick":"@shout('abMenuRefresh');\r\nshout(\"clearSimRoleMenu\");\r\n\r\nif (that) {\r\n    if (that.modality == 'mouse' && that.buttonId == 'right') {\r\n        const menuOptions = {\r\n            abMenuRefresh: `@destroy(thisBot);`,\r\n            role: getLink(thisBot)\r\n        }\r\n\r\n        const roleMenuButton = {\r\n            ...menuOptions,\r\n            abBotMenuIcon: 'lock',\r\n            abBotMenuLabel: 'unlock',\r\n            abBotMenuAction: `@\r\n                links.role.tags.roleLocked = false;\r\n                shout('abMenuRefresh');\r\n                shout(\"clearSimRoleMenu\");\r\n\r\n                links.role.onClick();\r\n            `\r\n        }\r\n\r\n        if (tags.roleLocked) {\r\n           ab.links.menu.abCreateMenuButton(roleMenuButton); \r\n        }\r\n        \r\n        return;\r\n    }\r\n}\r\n\r\nconfigBot.tags.menuPortal = 'simRole_menu';\r\n\r\nconst menuOptions = {\r\n    simRole_menu: true,\r\n    clearSimRoleMenu: `@destroy(thisBot);`,\r\n    abMenuRefresh: \"@ destroy(thisBot);\",\r\n    role: getLink(thisBot)\r\n}\r\n\r\nconst roleButton = {\r\n    ...menuOptions,\r\n    label: 'set role: ' + (tags.roleName ?? \"\"),\r\n    simRole_menuSortOrder: 1,\r\n    onClick: `@\r\n        const response = await os.showInput(links.role.tags.roleName, {\r\n            autoSelect: true,\r\n            title: 'set this role'\r\n        });\r\n        links.role.tags.roleName = response;\r\n        links.role.tags.bbLabel = response;\r\n        links.role.updateBillboardLabel();\r\n        links.role.onClick();\r\n    `\r\n}\r\n\r\nconst addAttributeButton = {\r\n    ...menuOptions,\r\n    label: 'add new stat',\r\n    simRole_menuSortOrder: 2,\r\n    onClick: `@\r\n        const response = await os.showInput(\"\", {\r\n            autoSelect: true,\r\n            title: 'stat name'\r\n        });\r\n\r\n        if (!response) {\r\n            return;\r\n        }\r\n\r\n        const response2 = await os.showInput(\"\", {\r\n            autoSelect: true,\r\n            title: 'starting stat value'\r\n        });\r\n\r\n        if (!response2) {\r\n            return;\r\n        }\r\n\r\n        if (!links.role.tags.simAttributes) {\r\n            links.role.tags.simAttributes = {};\r\n        }\r\n\r\n        const tempAttributes = {...links.role.tags.simAttributes};\r\n        tempAttributes[response] = response2;\r\n\r\n        links.role.tags.simAttributes = tempAttributes;\r\n        links.role.onClick();\r\n    `\r\n}\r\n\r\nconst seeAttributesButton = {\r\n    ...menuOptions,\r\n    label: 'stats',\r\n    menuItemType: 'dropdown'\r\n}\r\n\r\nseeAttributesButton.dropdownOptions = [];\r\nfor (const item in tags.simAttributes) {\r\n    const tempDropdownItem = {\r\n        ...menuOptions,\r\n        label: `${item}: ${tags.simAttributes[item]}`\r\n    }\r\n    seeAttributesButton.dropdownOptions.push(tempDropdownItem);\r\n}\r\n\r\nconst attributesGroup = {\r\n    groupSortOrder: 2,\r\n    simRole_menuSortOrder: 2,\r\n    menuItems: [addAttributeButton]\r\n}\r\n\r\nif (tags.simAttributes && Object.keys(tags.simAttributes).length != 0) {\r\n    attributesGroup.menuItems.push(seeAttributesButton);\r\n}\r\n\r\nconst lockRoleButton = {\r\n    ...menuOptions,\r\n    label: 'lock role',\r\n    simRole_menuSortOrder: 3,\r\n    onClick: `@\r\n        const response = await os.showConfirm({\r\n            title: 'Lock this role?',\r\n            content: 'you will not be able to edit this role anymore'\r\n        });\r\n        if (response) {\r\n            links.role.tags.roleLocked = true;\r\n            links.role.tags.simAttributesStartingValues = links.role.tags.simAttributes;\r\n        }\r\n        links.role.onClick();\r\n    `\r\n}\r\n\r\nconst takeRoleButton = {\r\n    ...menuOptions,\r\n    label: 'choose role',\r\n    simRole_menuSortOrder: 1,\r\n    onClick: `@\r\n        const response = await os.showConfirm({\r\n            title: 'accept this role?'\r\n        });\r\n\r\n        if (response) {\r\n           setTagMask(links.role, \"color\", \"#cbf4f5\");\r\n            links.role.tags.roleOwner = getID(configBot); \r\n        }\r\n        \r\n        links.role.onClick();\r\n    `\r\n}\r\n\r\nif (!tags.roleLocked) {\r\n    ab.links.menu.abCreateMenuButton(roleButton);  \r\n    ab.links.menu.abCreateMenuGroup(attributesGroup);\r\n    ab.links.menu.abCreateMenuButton(lockRoleButton);   \r\n} else if (!tags.roleOwner) {\r\n    ab.links.menu.abCreateMenuButton(takeRoleButton);\r\n} else {\r\n    shout(\"clearActionMenu\");\r\n\r\n    if (configBot.tags.menuPortal != \"action_menu\") {\r\n        configBot.tags.menuPortal = \"action_menu\";\r\n    }\r\n\r\n    thisBot.showStats();\r\n\r\n    if (tags.roleStack && tags.roleStack.length != 0) {\r\n        for (let i = 0; i < tags.roleStack.length; ++i) {\r\n            const action = getBot(\"simID\", tags.roleStack[i]);\r\n            action.showAction();\r\n        }\r\n    }  \r\n    else {\r\n        const actionBots = getBots(byTag(\"simAction\", true), byTag(\"startingAction\", true));\r\n\r\n        for (let i = 0; i < actionBots.length; ++i) {\r\n            if (actionBots[i].tags.roleTags && actionBots[i].tags.roleTags.length != 0) {\r\n                if(actionBots[i].tags.roleTags.includes(tags.roleName)) {\r\n                    actionBots[i].showAction();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","abArtifactName":"simRole","abIDOrigin":"simRole","onBotAdded":"@let waitTime = 0;\r\n\r\nwhile(!globalThis.ab?.links.bot_factory) {\r\n    if (waitTime >= 5000) {\r\n        return;\r\n    }\r\n    \r\n    await os.sleep(250);\r\n    waitTime += 250;\r\n}\r\n\r\nmasks.ready = true;\r\n\r\nthisBot.updateBillboardLabel();","onBotChanged":"@const needUpdateBillboardLabel = that.tags.some(t => t === 'bbLabel' || t === 'bbLabelFloatingBackgroundColor' || t === 'bbLabelColor');\r\n\r\nif (needUpdateBillboardLabel && tags.ready) {\r\n    thisBot.updateBillboardLabel();\r\n}","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\r\n    destroy(thisBot.vars.billboardLabelBot);\r\n    thisBot.vars.billboardLabelBot = null;\r\n}\r\n\r\nthisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \r\n    bot: thisBot, \r\n    label: tags.bbLabel,\r\n    color: tags.bbLabelFloatingBackgroundColor,\r\n    dimension: tags.dimension,\r\n    // botLabelMargin: 0,\r\n    labelColor: tags.bbLabelColor,\r\n    space: 'tempLocal',\r\n})","onGridClick":"@shout(\"clearSimRoleMenu\");","strokeColor":"white","cursor":"pointer","simRole":"true","onInstStreaming":"@if (tags.roleOwner) {\r\n    if (!getBot(byID(tags.roleOwner))) {\r\n        tags.roleOwner = null;\r\n    }\r\n}","editAttribute":"@const attributeName = that.attributeName;\r\nconst newValue = that.value;\r\n\r\nconst tempAttributes = {...tags.simAttributes};\r\n\r\nif (!attributeName) {\r\n    console.log(\"[Sim Attributes]: editAttribute, no attribute name provided.\");\r\n    return;\r\n}\r\n\r\nif (!newValue && newValue != 0) {\r\n    console.log(\"[Sim Attributes]: editAttribute, no new value provided.\");\r\n    return;\r\n}\r\n\r\ntempAttributes[attributeName] = newValue;\r\ntags.simAttributes = tempAttributes;\r\n\r\nthisBot.showStats();","saveStack":"@await os.sleep(200);\r\nconst menuBots = getBots(\"action_menu\", true);\r\nconst simIDs = [];\r\nfor (let i = 0; i < menuBots.length; ++i) {\r\n    if (menuBots[i].links.action) {\r\n        const simID = menuBots[i].links.action.tags.simID;\r\n        if (!simIDs.includes(simID)) {\r\n            simIDs.push(simID);\r\n        }\r\n    }\r\n}\r\n\r\ntags.roleStack = simIDs;\r\n","onRemoteData":"@if (that.name == \"onActionCompleted\") {\r\n    const completedBot = getBot(\"simID\", that.that);\r\n    if (!completedBot.tags.roleTags || completedBot.tags.roleTags.length == 0) {\r\n        thisBot.saveStack();\r\n    } else {\r\n        const currentRoleTag = tags.roleName;\r\n        if (currentRoleTag && completedBot.tags.roleTags.includes(currentRoleTag)) {\r\n            thisBot.saveStack();\r\n        }\r\n    }\r\n}\r\n\r\nelse if (that.name == \"onStartMenu\") {\r\n    if (tags.simAttributesStartingValues) {\r\n        tags.simAttributes = tags.simAttributesStartingValues;\r\n    }\r\n    tags.roleStack = null;\r\n    shout(\"clearActionMenu\");\r\n    shout('abMenuRefresh');\r\n\r\n    configBot.tags.menuPortal = 'action_menu';\r\n\r\n    thisBot.showStats();\r\n\r\n    const actionBots = getBots(byTag(\"simAction\", true), byTag(\"startingAction\", true));\r\n\r\n    for (let i = 0; i < actionBots.length; ++i) {\r\n        if (actionBots[i].tags.roleTags && actionBots[i].tags.roleTags.length != 0) {\r\n            if(actionBots[i].tags.roleTags.includes(tags.roleName)) {\r\n                actionBots[i].showAction();\r\n            }\r\n        }\r\n    }\r\n}","showStats":"@const actionMenuOptions = {\r\n    action_menu: true,\r\n    clearActionMenu: `@destroy(thisBot);`,\r\n}\r\n\r\nconst seeAttributesButton = {\r\n    ...actionMenuOptions,\r\n    label: 'stats',\r\n    defaultOpen: true,\r\n    dropdownSortOrder: 100,\r\n    action_menuSortOrder: 100\r\n}\r\n\r\nseeAttributesButton.dropdownOptions = [];\r\nfor (const item in tags.simAttributes) {\r\n    const tempDropdownItem = {\r\n        ...actionMenuOptions,\r\n        label: `${item}: ${tags.simAttributes[item]}`\r\n    }\r\n    seeAttributesButton.dropdownOptions.push(tempDropdownItem);\r\n}\r\n\r\nif (tags.statsButton) {\r\n    destroy(links.statsButton);\r\n}\r\n\r\nif (tags.simAttributes && Object.keys(tags.simAttributes).length != 0) {\r\n    const stats = await ab.links.menu.abCreateMenuDropdown(seeAttributesButton);\r\n    tags.statsButton = getLink(stats);\r\n}","bbLabelFloatingBillboardColor":"#FB9E00"}}}}