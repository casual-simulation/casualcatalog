{"version":1,"state":{"2e456389-bc4f-4109-8178-3fefa2caed89":{"id":"2e456389-bc4f-4109-8178-3fefa2caed89","space":"shared","tags":{"system":"sim_toolbox.tools.simRole","onABArtifactCollectShards":"@const shard: ABArtifactShard = {\r\n    data: {\r\n        label: tags.roleLabel,\r\n        dimensionData: {\r\n            dimension: [ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension]: tags[ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension + 'X']: tags[ab.links.remember.tags.abActiveDimension + 'X'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Y']: tags[ab.links.remember.tags.abActiveDimension + 'Y'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Z']: tags[ab.links.remember.tags.abActiveDimension + 'Z'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationX']: tags[ab.links.remember.tags.abActiveDimension + 'RotationX'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationY']: tags[ab.links.remember.tags.abActiveDimension + 'RotationY'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationZ']: tags[ab.links.remember.tags.abActiveDimension + 'RotationZ'],\r\n        },\r\n        color: tags.color,\r\n        labelFloatingBackgroundColor: tags.roleLabelFloatingBackgroundColor,\r\n        labelColor: tags.roleLabelColor,\r\n        roleID: tags.roleID\r\n    },\r\n    dependencies: [\r\n        {\r\n            askID: 'simRole'\r\n        }\r\n    ]\r\n}\r\n\r\nreturn shard;","onABArtifactReconstitute":"@const data = that.data;\r\ntags.roleLabel = data.label ?? 'role';\r\ntags.color = data.color ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD';\r\ntags.roleLabelFloatingBackgroundColor = data.labelFloatingBackgroundColor ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD'; \r\ntags.roleLabelColor = data.labelColor ?? 'white';\r\ntags.roleID = data.roleID ?? uuid();\r\n\r\n//Place bot correctly\r\nif (data.dimensionData) {\r\n    for (const tagName in data.dimensionData) {\r\n        tags[tagName] = data.dimensionData[tagName];\r\n    }\r\n}\r\n\r\n//If new action\r\nif (data.eggParameters) {\r\n    const dimension = data.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = data.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = data.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags.dimension = dimension;\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n\r\n    thisBot.onClick();\r\n}","onABStripArtifactInstanceDataFromBotData":"@const { data } = that;\r\n\r\ndelete data.tags.roleLabel;\r\ndelete data.tags.roleLabelColor;\r\ndelete data.tags.roleLabelFloatingBackgroundColor;\r\ndelete data.tags.color;\r\ndelete data.tags[data.tags.dimension + \"X\"];\r\ndelete data.tags[data.tags.dimension + \"Y\"];\r\ndelete data.tags[data.tags.dimension + \"Z\"];\r\ndelete data.tags[data.tags.dimension + \"RotationX\"];\r\ndelete data.tags[data.tags.dimension + \"RotationY\"];\r\ndelete data.tags[data.tags.dimension + \"RotationZ\"];\r\ndelete data.tags[data.tags.dimension];\r\ndelete data.tags.dimension;\r\ndelete data.tags.roleID;","onClick":"@shout('abMenuRefresh');\r\nshout(\"clearSimRoleMenu\");\r\n\r\nconfigBot.tags.menuPortal = 'simRole_menu';\r\n\r\nconst menuOptions = {\r\n    simRole_menu: true,\r\n    clearSimRoleMenu: `@destroy(thisBot);`,\r\n    abMenuRefresh: \"@ destroy(thisBot);\",\r\n    role: getLink(thisBot)\r\n}\r\n\r\nconst roleButton = {\r\n    ...menuOptions,\r\n    label: 'set role',\r\n    simRole_menuSortOrder: 1,\r\n    onClick: `@\r\n        const response = await os.showInput(links.action.tags.roleName, {\r\n            autoSelect: true,\r\n            title: 'set this role'\r\n        });\r\n        links.role.tags.roleName = response;\r\n        links.role.tags.roleLabel = response;\r\n        links.role.updateBillboardLabel();\r\n        links.role.onClick();\r\n    `\r\n}\r\n\r\nconst takeRoleButton = {\r\n    ...menuOptions,\r\n    label: 'set role',\r\n    simRole_menuSortOrder: 1,\r\n    onClick: `@\r\n        const response = await os.showConfirm({\r\n            title: 'accept this role?',\r\n            confirmText: 'confirm',\r\n            cancelText: 'cancel'\r\n        });\r\n\r\n        links.role.tags.roleOwner = getID(configBot);\r\n        links.role.onClick();\r\n    `\r\n}\r\n\r\nif (!tags.roleName) {\r\n  ab.links.menu.abCreateMenuButton(roleButton);  \r\n} else if (!tags.roleOwner) {\r\n    ab.links.menu.abCreateMenuButton(takeRoleButton);\r\n} else {\r\n    const actionBots = getBots(byTag(\"simAction\", true), byTag(\"startingAction\", true), byTag(\"roleTags\", (roleTag) => {\r\n        return roleTag.includes(thisBot.tags.roleName);\r\n    }));\r\n\r\n    for (let i = 0; i < actionBots.length; ++i) {\r\n        actionBots[i].showAction();\r\n    }\r\n}\r\n","abArtifactName":"simRole","abIDOrigin":"simAction","onBotAdded":"@let waitTime = 0;\r\n\r\nwhile(!globalThis.ab?.links.bot_factory) {\r\n    if (waitTime >= 5000) {\r\n        return;\r\n    }\r\n    \r\n    await os.sleep(250);\r\n    waitTime += 250;\r\n}\r\n\r\nmasks.ready = true;\r\n\r\nthisBot.updateBillboardLabel();","onBotChanged":"@const needUpdateBillboardLabel = that.tags.some(t => t === 'roleLabel' || t === 'roleLabelFloatingBackgroundColor' || t === 'roleLabelColor');\r\n\r\nif (needUpdateBillboardLabel && tags.ready) {\r\n    thisBot.updateBillboardLabel();\r\n}","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\r\n    destroy(thisBot.vars.billboardLabelBot);\r\n    thisBot.vars.billboardLabelBot = null;\r\n}\r\n\r\nthisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \r\n    bot: thisBot, \r\n    label: tags.roleLabel,\r\n    color: tags.roleLabelFloatingBackgroundColor,\r\n    dimension: configBot.tags.mapPortal ?? configBot.tags.gridPortal ?? 'home',\r\n    // botLabelMargin: 0,\r\n    labelColor: tags.roleLabelColor,\r\n    space: 'tempLocal',\r\n})","onPointerEnter":null,"onPointerExit":null,"addPreReq":null,"onGridClick":"@shout(\"clearSimRoleMenu\");","strokeColor":"white","simAction":null,"onActionCompleted":null,"onActionReconstituted":null,"showAction":null,"showActionMenu":null,"cursor":"pointer","actionLabel":null,"actionLabelFloatingBackgroundColor":null,"actionLabelColor":null,"actionID":null,"actionIcon":null,"startingAction":null,"simRole":"true"}}}}