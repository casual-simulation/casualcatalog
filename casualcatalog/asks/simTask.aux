{"version":1,"state":{"b32d6833-927b-47a7-90b8-9d167cace818":{"id":"b32d6833-927b-47a7-90b8-9d167cace818","space":"shared","tags":{"system":"sim_toolbox.tools.simTask","onABArtifactCollectShards":"@const shard: ABArtifactShard = {\r\n    data: {\r\n        label: tags.taskLabel,\r\n        dimensionData: {\r\n            dimension: [ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension]: tags[ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension + 'X']: tags[ab.links.remember.tags.abActiveDimension + 'X'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Y']: tags[ab.links.remember.tags.abActiveDimension + 'Y'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Z']: tags[ab.links.remember.tags.abActiveDimension + 'Z'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationX']: tags[ab.links.remember.tags.abActiveDimension + 'RotationX'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationY']: tags[ab.links.remember.tags.abActiveDimension + 'RotationY'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationZ']: tags[ab.links.remember.tags.abActiveDimension + 'RotationZ'],\r\n        },\r\n        color: tags.color,\r\n        labelFloatingBackgroundColor: tags.taskLabelFloatingBackgroundColor,\r\n        labelColor: tags.taskLabelColor,\r\n        taskID: tags.taskID,\r\n        taskIcon: tags.taskIcon,\r\n        taskPrerequisites: tags.taskPrerequisites,\r\n        taskCompleted: tags.taskCompleted\r\n    },\r\n    dependencies: [\r\n        {\r\n            askID: 'simTask'\r\n        }\r\n    ]\r\n}\r\n\r\nreturn shard;","onABArtifactReconstitute":"@const data = that.data;\r\ntags.taskLabel = data.label ?? 'task';\r\ntags.color = data.color ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD';\r\ntags.taskLabelFloatingBackgroundColor = data.labelFloatingBackgroundColor ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD'; \r\ntags.taskLabelColor = data.labelColor ?? abPersonality?.tags?.abBaseLabelColor ?? 'black';\r\ntags.taskID = data.taskID ?? uuid();\r\ntags.taskIcon = data.taskIcon;\r\ntags.taskPrerequisites = data.taskPrerequisites;\r\ntags.taskCompleted = data.taskCompleted;\r\n\r\nif (tags.lineTo) {\r\n    tags.lineTo = null;\r\n    //TODO: recalculate lineTo\r\n}\r\n\r\nif (tags.choosingPrereq) {\r\n    tags.choosingPrereq = null;\r\n}\r\n\r\nif (data.dimensionData) {\r\n    for (const tagName in data.dimensionData) {\r\n        tags[tagName] = data.dimensionData[tagName];\r\n    }\r\n}\r\n\r\nif (data.eggParameters) {\r\n    const dimension = data.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = data.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = data.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags.dimension = dimension;\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n\r\n    thisBot.onClick();\r\n}","onABStripArtifactInstanceDataFromBotData":"@const { data } = that;\r\n\r\ndelete data.tags.taskLabel;\r\ndelete data.tags.taskLabelColor;\r\ndelete data.tags.taskLabelFloatingBackgroundColor;\r\ndelete data.tags.color;\r\ndelete data.tags[data.tags.dimension + \"X\"];\r\ndelete data.tags[data.tags.dimension + \"Y\"];\r\ndelete data.tags[data.tags.dimension + \"Z\"];\r\ndelete data.tags[data.tags.dimension + \"RotationX\"];\r\ndelete data.tags[data.tags.dimension + \"RotationY\"];\r\ndelete data.tags[data.tags.dimension + \"RotationZ\"];\r\ndelete data.tags[data.tags.dimension];\r\ndelete data.tags.dimension;\r\ndelete data.tags.taskID;\r\ndelete data.tags.taskIcon;\r\ndelete data.tags.taskPrerequisites;\r\ndelete data.tags.taskCompleted;\r\ndelete data.tags.choosingPrereq;\r\ndelete data.tags.lineTo;","onClick":"@if (that) {\r\n    if (that.modality == 'mouse' && that.buttonId == 'right') {\r\n        const menuOptions = {\r\n            abMenuRefresh: `@destroy(thisBot);`,\r\n            task: getLink(thisBot)\r\n        }\r\n\r\n        const taskMenuButton = {\r\n            ...menuOptions,\r\n            abBotMenuIcon: 'menu',\r\n            abBotMenuLabel: 'show task menu',\r\n            abBotMenuAction: `@\r\n                links.task.showTaskMenu();\r\n                shout('abMenuRefresh');\r\n            `\r\n        }\r\n\r\n        ab.links.menu.abCreateMenuButton(taskMenuButton);\r\n        return;\r\n    }\r\n}\r\n\r\nconst preReqBot = getBot(\"choosingPrereq\", true);\r\n\r\nif (preReqBot) {\r\n    if (preReqBot == thisBot) {\r\n        tags.choosingPrereq = false;\r\n    } else {\r\n        preReqBot.addPreReq(thisBot);\r\n        tags.color = tags.prevColor;\r\n        tags.prevColor = null;\r\n        return;\r\n    }\r\n}\r\n\r\n// os.toast('hello, world!');\r\nshout('abMenuRefresh');\r\nshout(\"clearSimTaskMenu\");\r\n\r\nconfigBot.tags.menuPortal = 'simTask_menu';\r\n\r\nconst menuOptions = {\r\n    simTask_menu: true,\r\n    clearSimTaskMenu: `@destroy(thisBot);`,\r\n    abMenuRefresh: \"@ destroy(thisBot);\",\r\n    task: getLink(thisBot)\r\n}\r\n\r\nconst labelButton = {\r\n    ...menuOptions,\r\n    label: 'label: ' + tags.taskLabel,\r\n    simTask_menuSortOrder: 1,\r\n    onClick: `@\r\n        const response = await os.showInput(links.task.tags.taskLabel, {\r\n            autoSelect: true,\r\n            title: 'label this task'\r\n        });\r\n        links.task.tags.taskLabel = response;\r\n        links.task.updateBillboardLabel();\r\n        links.task.onClick();\r\n    `\r\n}\r\n\r\nconst iconButton = {\r\n    ...menuOptions,\r\n    label: 'task icon',\r\n    simTask_menuSortOrder: 2,\r\n    onClick: `@\r\n        const response = await os.showInput(links.task.tags.taskIcon, {\r\n            autoSelect: true,\r\n            title: 'Choose an icon',\r\n            content: '(google material icon names)'\r\n        });\r\n        links.task.tags.taskIcon = response;\r\n        links.task.onClick();\r\n    `\r\n}\r\n\r\nconst preReqButton = {\r\n    ...menuOptions,\r\n    label: 'add a prerequisite',\r\n    simTask_menuSortOrder: 3,\r\n    onClick: `@\r\n        links.task.tags.choosingPrereq = true;\r\n        shout(\"clearSimTaskMenu\");\r\n    `\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(labelButton);\r\nab.links.menu.abCreateMenuButton(iconButton);\r\nab.links.menu.abCreateMenuButton(preReqButton);","abArtifactName":"simTask","abIDOrigin":"simTask","simTask":"true","onBotAdded":"@let waitTime = 0;\r\n\r\nwhile(!globalThis.ab?.links.bot_factory) {\r\n    if (waitTime >= 5000) {\r\n        return;\r\n    }\r\n    \r\n    await os.sleep(250);\r\n    waitTime += 250;\r\n}\r\n\r\nmasks.ready = true;\r\n\r\nthisBot.updateBillboardLabel();","onBotChanged":"@const needUpdateBillboardLabel = that.tags.some(t => t === 'taskLabel' || t === 'taskLabelFloatingBackgroundColor' || t === 'taskLabelColor');\r\n\r\nif (needUpdateBillboardLabel && tags.ready) {\r\n    thisBot.updateBillboardLabel();\r\n}","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\r\n    destroy(thisBot.vars.billboardLabelBot);\r\n    thisBot.vars.billboardLabelBot = null;\r\n}\r\n\r\nthisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \r\n    bot: thisBot, \r\n    label: tags.taskLabel,\r\n    color: tags.taskLabelFloatingBackgroundColor,\r\n    dimension: configBot.tags.mapPortal ?? 'home',\r\n    // botLabelMargin: 0,\r\n    labelColor: tags.taskLabelColor,\r\n    space: 'tempLocal',\r\n})","onPointerEnter":"@const preReqBot = getBot(\"choosingPrereq\", true);\r\n\r\nif (preReqBot) {\r\n    tags.prevColor = tags.color;\r\n    tags.color = '#fcba03';\r\n}","onPointerExit":"@const preReqBot = getBot(\"choosingPrereq\", true);\r\n\r\nif (preReqBot) {\r\n    tags.color = tags.prevColor;\r\n    tags.prevColor = null;\r\n}","addPreReq":"@if (!tags.taskPrerequisites) {\r\n    tags.taskPrerequisites = [];\r\n}\r\n\r\nif (!tags.lineTo) {\r\n    tags.lineTo = [];\r\n}\r\n\r\nconst taskID = that?.tags?.taskID;\r\n\r\nif (taskID) {\r\n    tags.taskPrerequisites.push(taskID);\r\n    tags.lineTo.push(that?.id);\r\n}\r\n\r\ntags.choosingPrereq = false;","showTaskMenu":"@shout('abMenuRefresh');\r\nshout(\"clearTaskMenu\");\r\n\r\nconfigBot.tags.menuPortal = 'task_menu';\r\n\r\nconst menuOptions = {\r\n    task_menu: true,\r\n    clearTaskMenu: `@destroy(thisBot);`,\r\n}\r\n\r\nconst taskBots = getBots(\"simTask\", true);\r\n\r\nfor (let i = 0; i < taskBots.length; ++i) {\r\n    let showTask = true;\r\n\r\n    if (taskBots[i].tags.taskCompleted == true) {\r\n        showTask = false;\r\n        continue;\r\n    }\r\n\r\n    if (taskBots[i].tags.taskPrerequisites && taskBots[i].tags.taskPrerequisites.length != 0) {\r\n        for (let j = 0; j < taskBots[i].tags.taskPrerequisites.length; ++j) {\r\n            if (getBot(\"taskID\", taskBots[i].tags.taskPrerequisites[j])?.taskCompleted != true) {\r\n                showTask = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showTask) {\r\n        const tempButton = {\r\n            ...menuOptions,\r\n            label: taskBots[i].tags.taskLabel,\r\n            formAddress: taskBots[i].tags.taskIcon ?? null,\r\n            task: getLink(taskBots[i]),\r\n            onClick: `@\r\n                links.task.tags.taskCompleted = true;\r\n                links.task.showTaskMenu();\r\n            `\r\n        }\r\n\r\n        ab.links.menu.abCreateMenuButton(tempButton);\r\n    }\r\n}","onGridClick":"@shout(\"clearSimTaskMenu\");\r\nshout(\"clearTaskMenu\");\r\n\r\nif (tags.choosingPreReq) {\r\n    tags.choosingPreReq = false;\r\n}"}}}}