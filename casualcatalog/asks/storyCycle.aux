{"version":1,"state":{"d8ceb350-acf1-4e37-9fbd-62650a6d8f2f":{"id":"d8ceb350-acf1-4e37-9fbd-62650a6d8f2f","space":"shared","tags":{"system":"story_toolbox.storyCycle","basePrompt":"ðŸ“„`You are a movement handler in a world with story elements and a narrator.\r\nYour job is to return the next logical position that targets might move to given the current story.\r\nA given target is not required to move every time, but you can move more than one at once.\r\nYou will recieve a message log to look through, a list of targets to include in your story and their positions, and a current place the story is taking place in as well as what unit the position is in.\r\nIf the current place is undefined, disregard it.\r\nYou must not move a story element that is not in your list of possible targets.\r\nIf units are longitude, latitude do not exceed .0005 units of movement in any direction.\r\nIf units are in yards do not exceed 20 units of movement in any direction. \r\nZ is the height above the ground of the target.\r\nYou must always move at least one target.\r\n\r\nYou MUST ONLY respond with an array, containing a list of valid JSON blocks for each target you want to move.\r\nDo not return only a string.\r\nEach position MUST be a number, and MUST NOT include +, -, /, *, or %.\r\n\r\nEXAMPLES:\r\n\r\ngiven targets: \r\n[\r\n    {\r\n        label: \"Small Fox\",\r\n        positionX: 2,\r\n        positionY: 3,\r\n        positionZ: 0\r\n    },\r\n    {\r\n        label: \"Large Tree\",\r\n        positionX: 0,\r\n        positionY: 0,\r\n        positionZ: 0\r\n    }\r\n]\r\n\r\nRESPONSES:\r\n\r\n[\r\n    {\r\n        label: \"Small Fox\",\r\n        positionX: 6,\r\n        positionY: 4,\r\n        positionZ: 0\r\n    },\r\n    {\r\n        label: \"Large Tree\",\r\n        positionX: 1,\r\n        positionY: 0,\r\n        positionZ: 0\r\n    }\r\n]\r\n\r\nor\r\n\r\n[\r\n    {\r\n        label: \"Small Fox\",\r\n        positionX: 2,\r\n        positionY: 10,\r\n        positionZ: 0\r\n    }\r\n]\r\n\r\n`","onEggHatch":"@if (that.eggParameters) {\r\n    const dimension = that.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = that.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = that.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n}\r\n\r\nconst activeSkybox = getBot(byTag(\"storyPlace\", true), byTag(\"activeSkybox\", true));\r\nif (activeSkybox) {\r\n    tags.currentStoryPlace = activeSkybox.tags.label;\r\n} else {\r\n    tags.currentStoryPlace = undefined;\r\n}","label":"story cycle","home":true,"onClick":"@const aiMessageArr = await thisBot.compileMessages();\r\n\r\nthisBot.askCycle(aiMessageArr);","compileMessages":"@const currentDim = ab.links.remember.tags.abActiveDimension;\r\nconst currentPortal = configBot.tags.mapPortal ? \"map\" : configBot.tags.gridPortal == \"blueprint\" ? \"blueprint\" :\"grid\";\r\n\r\n//Grab elements\r\nconst targetsArr = [];\r\nconst targets = getBots(\"storyElement\");\r\nfor (const bot of targets) {\r\n    targetsArr.push({\r\n        label: bot?.tags?.label,\r\n        positionX: bot?.tags[currentDim + 'X'],\r\n        positionY: bot?.tags[currentDim + 'Y'],\r\n        positionZ: bot?.tags[currentDim + 'Z']\r\n    });\r\n}\r\n\r\nconst aiMessageArr = [];\r\n\r\n//Push system messages\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: tags.basePrompt\r\n});\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: \"possible targets: \" + JSON.stringify(targetsArr)\r\n});\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: `current place: ${tags.currentStoryPlace}`\r\n});\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: `position units are: ${currentPortal == \"map\" ? \"longitude, latitude\" : \"yards\"}`\r\n});\r\n\r\n//Get message log\r\nconst messageLogArr = [];\r\nif (links.console.vars.messageBotIds) {\r\n    const messageBots = links.console.vars.messageBotIds;\r\n\r\n    for (const botID of messageBots) {\r\n        const messageBot = getBot(\"id\", botID);\r\n        if (messageBot && messageBot.tags.space == \"shared\") {\r\n            messageLogArr.push({\r\n                message: messageBot.tags.message || \"\",\r\n                timestamp: messageBot.tags.timestamp,\r\n                name: messageBot.tags.name\r\n            })\r\n        }\r\n    }\r\n\r\n    messageLogArr.sort( (a, b) => new Date(a.timestamp) < new Date(b.timestamp) ? 1 : -1 );\r\n    messageLogArr.reverse();\r\n}\r\n\r\nfor (let i = 0; i < messageLogArr.length; ++i) {\r\n    aiMessageArr.push({\r\n        role: messageLogArr[i].name == tags.label ? \"assistant\" : \"user\",\r\n        content: messageLogArr[i].name == tags.label ? messageLogArr[i].message : messageLogArr[i].name + \": \" + messageLogArr[i].message\r\n    })\r\n}\r\n\r\nconsole.log(\"aiMessageArr\", aiMessageArr);\r\n\r\nreturn aiMessageArr;","onStorySceneChange":"@tags.currentStoryPlace = that;\r\n","askCycle":"@if (!that) {\r\n    os.toast(\"[Story Cycle]: Could not find messages\");\r\n    return;\r\n}\r\n\r\nlet response = await ai.chat(that);\r\nresponse = response.content.replace(/```json\\n?|```/g, '');\r\n\r\ntry {\r\n    response = JSON.parse(response);\r\n} catch (e) {\r\n    console.log(\"Error responding as story cycle: \", e, response);\r\n    return;\r\n}\r\n\r\nif (!response) {\r\n    return;\r\n}\r\n\r\nconsole.log(\"[Story Cycle]: \", response);\r\nif (Array.isArray(response)) {\r\n    const currentDim = ab.links.remember.tags.abActiveDimension;\r\n\r\n    for(const element of response) {\r\n        const elBot = getBot(\"label\", element?.label);\r\n        if (elBot) {\r\n            elBot.tags[currentDim + 'X'] = element?.positionX ?? elBot.tags[currentDim + 'X'];\r\n            elBot.tags[currentDim + 'Y'] = element?.positionY ?? elBot.tags[currentDim + 'Y'] \r\n            elBot.tags[currentDim + 'Z'] = element?.positionZ ?? elBot.tags[currentDim + 'Z']\r\n        }\r\n    }\r\n} else {\r\n    console.log(\"[Story Cycle]: Response is not an array\");\r\n}","homeX":-85.67420094008776,"homeY":42.964864864864865,"console":"ðŸ”—24b7e66f-0d5b-4064-bf48-b562b9e6e3eb","homeZ":0,"storyCycle":"true","abVersion":"10.6"}}}}