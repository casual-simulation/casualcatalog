{"version":1,"state":{"ab065b4b-7a25-4d78-aba6-abbf5e7c5741":{"id":"ab065b4b-7a25-4d78-aba6-abbf5e7c5741","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","system":"story_toolbox.storyElement","storyElement":"true","abIDOrigin":"storyElement","onEggHatch":"@if (that.eggParameters) {\r\n    const dimension = that.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = that.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = that.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n}\r\n\r\nif (tags.abIDOrigin == 'storyElement') {\r\n    shout(\"abMenuRefresh\");\r\n    configBot.tags.menuPortal = \"storyElementMenu\";\r\n\r\n    thisBot.tags.storyElementLocked = false;\r\n    thisBot.tags.label = \"story element\";\r\n    thisBot.tags.elementQuip = 'edit me';\r\n    thisBot.tags.elementPrompt = '';\r\n    thisBot.tags.scaleX = 1;\r\n    thisBot.tags.scaleY = 1;\r\n    thisBot.tags.scaleZ = 1;\r\n    thisBot.tags.color = \"white\";\r\n\r\n    if (that.eggParameters && that.eggParameters.storyParameters) {\r\n        thisBot.aiGenerateStoryElement({\"prompt\": that.eggParameters.storyParameters.prompt, \"target\": that.eggParameters.storyParameters.target});\r\n    } else {\r\n        thisBot.aiGenerateStoryElement();\r\n    }\r\n}\r\n\r\nif (!ab.links.console.masks.open) {\r\n    whisper(ab.links.console, \"showConsole\");\r\n    ab.links.console.masks.open = true;\r\n}","onClick":"@if (that?.modality == 'mouse' && that?.buttonId == 'right') {\r\n    thisBot.generateStoryElementEditMenu();\r\n    return;\r\n}\r\n\r\nos.tip(\"thinking...\", null, null, 4);\r\n\r\nconst prompt = thisBot.logPrompt();\r\n\r\nconst response = await ai.chat(prompt);\r\n\r\nif (!response) {\r\n    return;\r\n}\r\n\r\nab.log({message: response?.content, name: tags.label, space: \"shared\"});\r\n// thisBot.aiGenerateStoryElement();","home":true,"storyElementLocked":false,"label":"Fenny the fox","elementQuip":"squeak!","homeX":4,"homeY":-12,"homeZ":0,"onGridClick":"@shout(\"clearStoryElementMenu\");","onPointerEnter":"@os.tip(tags.elementQuip);","generateStoryElementEditMenu":"@shout(\"clearStoryElementMenu\");\r\n\r\nshout(\"abMenuRefresh\");\r\nconfigBot.tags.menuPortal = \"storyElementEditMenu\";\r\n\r\nif (tags.storyElementLocked) {\r\n    const titleButton = {\r\n        label: thisBot.tags.label,\r\n        clearStoryElementMenu: `@destroy(this);`,\r\n        color: abPersonality.tags.abBaseMenuColor,\r\n        storyElementEditMenu: true\r\n    } \r\n\r\n    const lockButton = {\r\n        label: \"locked\",\r\n        element: getLink(thisBot),\r\n        formAddress: \"lock\",\r\n        onClick: `@\r\n            links.element.tags.storyElementLocked = false;\r\n            links.element.generateStoryElementEditMenu();\r\n        `,\r\n        clearStoryElementMenu: `@destroy(this);`,\r\n        storyElementEditMenu: true\r\n    } \r\n\r\n    await ab.links.menu.abCreateMenuText(titleButton);\r\n    await ab.links.menu.abCreateMenuButton(lockButton);\r\n} else {\r\n    const titleEditButton = {\r\n        label: \"edit title\",\r\n        element: getLink(thisBot),\r\n        onClick: `@\r\n            const newTitle = await os.showInput(links.element.tags.label, {\r\n                title: \"Edit title\"\r\n            });\r\n\r\n            links.element.tags.label = newTitle;\r\n            links.element.generateStoryElementEditMenu();\r\n        `,\r\n        clearStoryElementMenu: `@destroy(this);`,\r\n        storyElementEditMenu: true\r\n    } \r\n\r\n    const promptEditButton = {\r\n        label: \"edit prompt\",\r\n        element: getLink(thisBot),\r\n        onClick: `@\r\n            const newPrompt = await os.showInput(links.element.tags.elementPrompt, {\r\n                title: \"Edit prompt\"\r\n            });\r\n\r\n            links.element.tags.elementPrompt = newPrompt;\r\n            links.element.generateStoryElementEditMenu();\r\n        `,\r\n        clearStoryElementMenu: `@destroy(this);`,\r\n        storyElementEditMenu: true\r\n    } \r\n\r\n    const quipEditButton = {\r\n        label: \"edit quip\",\r\n        element: getLink(thisBot),\r\n        onClick: `@\r\n            const newQuip = await os.showInput(links.element.tags.elementQuip, {\r\n                title: \"Edit quip\"\r\n            });\r\n\r\n            links.element.tags.elementQuip = newQuip;\r\n            links.element.generateStoryElementEditMenu();\r\n        `,\r\n        clearStoryElementMenu: `@destroy(this);`,\r\n        storyElementEditMenu: true\r\n    } \r\n\r\n    const lockButton = {\r\n        label: \"unlocked\",\r\n        element: getLink(thisBot),\r\n        formAddress: \"lock\",\r\n        onClick: `@\r\n            links.element.tags.storyElementLocked = true;\r\n            links.element.generateStoryElementEditMenu();\r\n        `,\r\n        clearStoryElementMenu: `@destroy(this);`,\r\n        storyElementEditMenu: true\r\n    } \r\n\r\n    await ab.links.menu.abCreateMenuButton(titleEditButton);\r\n    await ab.links.menu.abCreateMenuButton(promptEditButton);\r\n    await ab.links.menu.abCreateMenuButton(quipEditButton);\r\n    await ab.links.menu.abCreateMenuButton(lockButton);\r\n\r\n}\r\n","abRightClickIgnore":"true","aiGenerateStoryElement":"@let prompt;\r\n\r\nif (that) {\r\n    prompt = that.prompt;\r\n} else {\r\n    prompt = await os.showInput(\"\", {\r\n        title: \"What would you like to add to this story?\"\r\n    });\r\n}\r\n\r\nif (!prompt) {\r\n    return;\r\n}\r\n\r\nconfigBot.tags.menuPortal = \"storyElementLoading\";\r\nconst loadingBar = ab.links.menu.abCreateMenuBusyIndicator({\r\n    label: \"Generating story element\",\r\n    storyElementLoading: true\r\n});\r\n\r\nlet response = await ai.chat([\r\n    {\r\n        role: \"system\",\r\n        content: tags.basePrompt\r\n    },\r\n    {\r\n        role: \"user\",\r\n        content: prompt\r\n    }\r\n])\r\n\r\ndestroy(loadingBar);\r\n\r\nresponse = response.content.replace(/```json\\n?|```/g, '');\r\n\r\ntry {\r\n    response = JSON.parse(response);\r\n} catch (e) {\r\n    console.log(\"Error generating story block: \", e, response);\r\n    return;\r\n}\r\n\r\nif (!response) {\r\n    return;\r\n}\r\n\r\nconst activeDimension = configBot.tags.gridPortal;\r\ntags.color = response?.color;\r\ntags.label = that?.target ?? response?.name;\r\ntags.elementPrompt = prompt;\r\ntags.elementQuip = response?.expression;\r\ntags[activeDimension] = true;\r\ntags.scaleX = response?.scale?.x;\r\ntags.scaleY = response?.scale?.y;\r\ntags.scaleZ = response?.scale?.z;\r\n\r\nshout(\"onStoryElementAdded\", thisBot);","basePrompt":"ðŸ“„`You are a story block in a world with many other story blocks.\r\nYou will recieve a prompt from the user.\r\nReturn pure JSON with a name for your story block, an appropriate color in hex format, a short 'expression' that makes sense for what you are (example: if you were a cow, your expression might be \"moo\"),\r\nand an x,y,z scaling that represents what you are in a physical space, z is height, units are in yards, decimals are allowed, do not exceed 4.0 for any scale.\r\nYour response must only include valid JSON, starting with a { and ending with a }. You MUST NOT return only a string.\r\n\r\nEXAMPLE:\r\nprompt: \"a happy cow\"\r\nresponse: \r\n{\r\n    name: \"Mooney the happy cow\",\r\n    color: \"#f7f7f7\",\r\n    expression: \"moo!\",\r\n    scale: {\r\n        x: 5,\r\n        y: 3,\r\n        z: 3\r\n    }\r\n}`","logPrompt":"@const aiMessageArr = [];\r\n\r\nconst messages = getBots(byTag(\"consoleLogMessageBot\", true), byTag(\"space\", \"shared\"));\r\nfor (let i = 0; i < messages.length; ++i) {\r\n    aiMessageArr.push({\r\n        role: messages[i].tags.name == tags.label ? \"assistant\" : \"user\",\r\n        content: messages[i].tags.name == tags.label ? messages[i].tags.message : messages[i].tags.name + \": \" + messages[i].tags.message\r\n    })\r\n}\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: `You are ${tags.label} in a story. With this description of what you are (${tags.elementPrompt}), continue the story with what you do or say in response.\r\n     Keep it simple and short, no more than a sentence or two, inpired by picture books, fables and fairytales. \r\n     You are allowed to improvise, create new plot points, and generally make the story interesting.\r\n     You cannot speak for other story elements. Your response should be a string only.\r\n     \r\n     EXAMPLE SCENARIO:\r\n     a sheep and a cow are in a field, you are the sheep. The cow says \"it is a beautiful day out\".\r\n\r\n     RESPONSE: \r\n     \"Yes! the sun is shining very birghtly today! I may go on a walk.\"\r\n     `\r\n});\r\n\r\nconsole.log(\"prompt\", aiMessageArr);\r\nreturn aiMessageArr;","abVersion":"10.6","color":"#e25822","scaleX":1.5,"scaleY":1,"scaleZ":1,"respond":"@const prompt = thisBot.logPrompt();\r\n\r\nos.tip(\"thinking ...\");\r\n\r\nprompt.push(\r\n    {\r\n        role: \"assistant\",\r\n        content: \"Narrator: \" + that\r\n    }\r\n)\r\n\r\nconst response = await ai.chat(prompt);\r\n\r\nif (!response) {\r\n    return;\r\n}\r\n\r\nab.log({message: response?.content, name: tags.label, space: \"shared\"});\r\n\r\nreturn response?.content;","storyTarget":"true","elementPrompt":"small fox"}}}}