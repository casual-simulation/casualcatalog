{"version":1,"state":{"3577611c-1844-4cc2-a451-405b9acdb3cf":{"id":"3577611c-1844-4cc2-a451-405b9acdb3cf","space":"shared","tags":{"system":"story_toolbox.storyPlace","storyPlace":"true","createSkybox":"@let prompt;\r\nlet target;\r\nif (that && that.prompt && that.target) {\r\n    prompt = that.prompt;\r\n    target = that.target;\r\n} else {\r\n    target = await os.showInput('', {\r\n        title: \"name this place\"\r\n    })\r\n    prompt = await os.showInput('', {\r\n        title: \"Describe this place\"\r\n    })\r\n}\r\n\r\nif (!target || !prompt) {\r\n    os.toast(\"You must provide a name and description.\");\r\n    return;\r\n}\r\n\r\ntags.bbLabel = target;\r\ntags.placePrompt = prompt;\r\n\r\nconfigBot.tags.menuPortal = \"storyPlaceLoading\";\r\nconst loadingBar = ab.links.menu.abCreateMenuBusyIndicator({\r\n    label: \"Generating story place\",\r\n    storyPlaceLoading: true\r\n});\r\n\r\nconst skyboxImage = await ai.generateSkybox(prompt,\"nsfw\",{blockadeLabs:{skyboxStyleId:143}});  \r\ndestroy(loadingBar); \r\n\r\ntags.formAddress = skyboxImage;\r\nsetTagMask(thisBot, \"activeSkybox\", true, \"shared\");\r\n\r\nconst dimension = configBot.tags.gridPortal;\r\n\r\nconst skybox = create({\r\n    form: 'skybox',\r\n    formAddress: skyboxImage,\r\n    pointable: false,\r\n    scale: 200,\r\n    [dimension + 'X']: 0,\r\n    [dimension + 'Y']: 0,\r\n    [dimension]: true,\r\n    anchorPoint: 'center',\r\n    [dimension + \"RotationX\"]: 1.5708,\r\n    system: 'story_toolbox.genBots.skybox',\r\n    abIgnore: true\r\n});\r\n\r\ntags.skybox = getLink(skybox);\r\n// const artifactInstanceID = uuid();\r\n// tags.artifactInstanceID = artifactInstanceID;\r\n\r\n// links.artifact.abCreateArtifactPromiseBot({\r\n//     abArtifactName: 'msSkyBot',\r\n//     abArtifactInstanceID: artifactInstanceID,\r\n//     abArtifactShard: {\r\n//         data: {\r\n//             toolboxBot: tags.toolbox ?? \"\",\r\n//             gridInformation: tags.gridInformation,\r\n//             skyboxImage: skyboxImage,\r\n//             skyboxTags: {\r\n//                 scale: 450,\r\n//                 [dimension + \"Z\"]: -100,\r\n//                 onInstJoined: tags.instJoinedString\r\n//             }\r\n//         },\r\n//         dependencies: [\r\n//             { askID: 'msSkyBot' }\r\n//         ]\r\n\r\n//     }\r\n// })\r\n\r\nshout(\"onStorySceneChange\", target);\r\n\r\ngridPortalBot.tags.portalCameraType = \"perspective\";","artifact":"ðŸ”—78e41503-c933-4f8a-817a-ba97bf8d5d27","onClick":"@if (tags.formAddress) {\r\n     shout(\"activateStoryPlaceSkybox\", tags.formAddress);\r\n} else {\r\n    thisBot.createSkybox();\r\n}","form":"sphere","abVersion":"10.10","abIDOrigin":"storyPlace","onSkyboxToggleInitialized":"@if (that && that.tags.abArtifactInstanceID && that.tags.abArtifactInstanceID == tags.artifactInstanceID) {\r\n    setTagMask(that, configBot.tags.gridPortal, false, \"shared\");\r\n}","activateStoryPlaceSkybox":"@if (tags.formAddress && that == tags.formAddress) {\r\n    const currentDim = ab.links.remember.tags.abActiveDimension;\r\n    const currentPortal = configBot.tags.mapPortal ? \"map\" : configBot.tags.gridPortal == \"blueprint\" ? \"blueprint\" :\"grid\";\r\n\r\n    if (currentPortal == 'map') {\r\n        configBot.tags.gridPortal = currentDim;\r\n        configBot.tags.mapPortal = null;\r\n        setTagMask(ab.links.remember, \"mapZoomPosition\", {x: tags[currentDim + 'X'], y: tags[currentDim + 'Y']});\r\n        configBot.tags.miniMapPortal = currentDim;\r\n    }\r\n\r\n    setTagMask(links.skybox, 'home', true, 'shared');\r\n    setTagMask(thisBot, 'activeSkybox', true, 'shared');\r\n    shout(\"onStorySceneChange\", tags.bbLabel);\r\n} else {\r\n    setTagMask(thisBot, 'activeSkybox', false, 'shared');\r\n    setTagMask(links.skybox, 'home', false, 'shared');\r\n}","scale":"1","onABArtifactCollectShards":"@const shard: ABArtifactShard = {\r\n    data: {\r\n        label: tags.bbLabel,\r\n        dimensionData: {\r\n            dimension: ab.links.remember.tags.abActiveDimension,\r\n            [ab.links.remember.tags.abActiveDimension]: tags[ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension + 'X']: tags[ab.links.remember.tags.abActiveDimension + 'X'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Y']: tags[ab.links.remember.tags.abActiveDimension + 'Y'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Z']: tags[ab.links.remember.tags.abActiveDimension + 'Z'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationX']: tags[ab.links.remember.tags.abActiveDimension + 'RotationX'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationY']: tags[ab.links.remember.tags.abActiveDimension + 'RotationY'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationZ']: tags[ab.links.remember.tags.abActiveDimension + 'RotationZ'],\r\n        },\r\n        color: tags.color,\r\n        labelFloatingBackgroundColor: tags.bbLabelFloatingBackgroundColor,\r\n        labelColor: tags.bbLabelColor,\r\n        placePrompt: tags.placePrompt,\r\n        formAddress: tags.formAddress        \r\n    },\r\n    dependencies: [\r\n        {\r\n            askID: 'storyPlace'\r\n        }\r\n    ]\r\n}\r\n\r\nreturn shard;","onABArtifactReconstitute":"@const data = that.data;\r\ntags.bbLabel = data.label ?? 'story place';\r\ntags.color = data.color ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD';\r\ntags.bbLabelFloatingBackgroundColor = data.labelFloatingBackgroundColor ?? abPersonality?.tags?.abBaseColor ?? '#00D9CD'; \r\ntags.bbLabelColor = data.labelColor ?? 'white';\r\ntags.placePrompt = data.placePrompt;\r\ntags.formAddress = data.formAddress;\r\n\r\n//Place bot correctly\r\nif (data.dimensionData) {\r\n    for (const tagName in data.dimensionData) {\r\n        tags[tagName] = data.dimensionData[tagName];\r\n    }\r\n}\r\n\r\nif (tags.formAddress) {\r\n    const skybox = create({\r\n        form: 'skybox',\r\n        formAddress: tags.formAddress,\r\n        pointable: false,\r\n        scale: 200,\r\n        [tags.dimension + 'X']: 0,\r\n        [tags.dimension + 'Y']: 0,\r\n        [tags.dimension]: false,\r\n        anchorPoint: 'center',\r\n        [tags.dimension + \"RotationX\"]: 1.5708,\r\n        system: 'story_toolbox.genBots.skybox',\r\n        abIgnore: true\r\n    });\r\n\r\n    tags.skybox = getLink(skybox);\r\n}\r\n\r\n//If new action\r\nif (data.eggParameters) {\r\n    const dimension = data.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = data.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = data.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags.dimension = dimension;\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;    \r\n\r\n    if (data.eggParameters && data.eggParameters.storyParameters) {\r\n        thisBot.createSkybox({\"prompt\": data.eggParameters.storyParameters.prompt, \"target\": data.eggParameters.storyParameters.target});\r\n    } else {\r\n        thisBot.createSkybox();\r\n    }\r\n}\r\n\r\nif (!ab.links.console.masks.open) {\r\n    whisper(ab.links.console, \"showConsole\");\r\n    ab.links.console.masks.open = true;\r\n}\r\n","onABStripArtifactInstanceDataFromBotData":"@const { data } = that;\r\n\r\ndelete data.tags.bbLabel;\r\ndelete data.tags.bbLabelColor;\r\ndelete data.tags.bbLabelFloatingBackgroundColor;\r\ndelete data.tags.color;\r\ndelete data.tags[data.tags.dimension + \"X\"];\r\ndelete data.tags[data.tags.dimension + \"Y\"];\r\ndelete data.tags[data.tags.dimension + \"Z\"];\r\ndelete data.tags[data.tags.dimension + \"RotationX\"];\r\ndelete data.tags[data.tags.dimension + \"RotationY\"];\r\ndelete data.tags[data.tags.dimension + \"RotationZ\"];\r\ndelete data.tags[data.tags.dimension];\r\ndelete data.tags.dimension;\r\ndelete data.tags.placePrompt;\r\ndelete data.tags.formAddress;\r\ndelete data.tags.skybox;","abArtifactName":"storyPlace","onBotAdded":"@let waitTime = 0;\r\n\r\nwhile(!globalThis.ab?.links.bot_factory) {\r\n    if (waitTime >= 5000) {\r\n        return;\r\n    }\r\n    \r\n    await os.sleep(250);\r\n    waitTime += 250;\r\n}\r\n\r\nmasks.ready = true;\r\n\r\nthisBot.updateBillboardLabel();","onBotChanged":"@const needUpdateBillboardLabel = that.tags.some(t => t === 'bbLabel' || t === 'bbLabelFloatingBackgroundColor' || t === 'bbLabelColor');\r\n\r\nif (needUpdateBillboardLabel && tags.ready) {\r\n    thisBot.updateBillboardLabel();\r\n}","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\r\n    destroy(thisBot.vars.billboardLabelBot);\r\n    thisBot.vars.billboardLabelBot = null;\r\n}\r\n\r\nthisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \r\n    bot: thisBot, \r\n    label: tags.bbLabel,\r\n    color: tags.bbLabelFloatingBackgroundColor,\r\n    dimension: tags.dimension,\r\n    // botLabelMargin: 0,\r\n    labelColor: tags.bbLabelColor,\r\n    space: 'tempLocal',\r\n})","strokeColor":"white","cursor":"pointer"}}}}