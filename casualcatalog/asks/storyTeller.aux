{"version":1,"state":{"f1670bde-9931-4e15-ab7f-0cb1fa83c7e9":{"id":"f1670bde-9931-4e15-ab7f-0cb1fa83c7e9","space":"shared","tags":{"system":"story_toolbox.storyTeller","onEggHatch":"@if (that.eggParameters) {\r\n    const dimension = that.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = that.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = that.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n}","storyTeller":"true","basePrompt":"ðŸ“„`You are a narrator in a world with story elements.\r\nYou will recieve a message log to look through and decide if something should happen.\r\nYou must not narrate the user's actions.\r\nYou can send messages directly to communicate your narration or you can prompt a story element to respond.\r\nYou must only respond with valid json, starting with a { and ending with a }. Do not use the word 'json' in your response, \r\ndo not return only a string. You must include the 'type' field in your response.\r\n\r\nEXAMPLES:\r\nthere is a sheep and a cow in a field,\r\nthe cow says to the sheep \"it is a wonderful day!\"\r\n\r\nyour response could be one of the following:\r\n\r\n{\r\n    \"type\": \"narration\",\r\n    \"message\": \"The sheep squinted at the sun, he thought it might be a bit too bright.\"\r\n}\r\nor\r\n{\r\n    \"type\": \"prompt\",\r\n    \"target\": \"sheep\",\r\n    \"prompt\": \"what say you, sheep?\"\r\n}\r\n\r\n`","onABLog":"@if (that?.tags?.name === tags.label) {\r\n    return;\r\n}\r\n\r\nconst targetsArr = [];\r\nconst targets = getBots(\"storyElement\");\r\nfor (const bot of targets) {\r\n    targetsArr.push(bot?.tags?.label);\r\n}\r\n\r\nconst aiMessageArr = [];\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: tags.basePrompt\r\n});\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: \"possible targets: \" + targetsArr\r\n});\r\n\r\nconst messages = getBots(byTag(\"consoleLogMessageBot\", true), byTag(\"space\", \"shared\"));\r\nfor (let i = 0; i < messages.length; ++i) {\r\n    aiMessageArr.push({\r\n        role: messages[i].tags.name == tags.label ? \"assistant\" : \"user\",\r\n        content: messages[i].tags.name == tags.label ? messages[i].tags.message : messages[i].tags.name + \": \" + messages[i].tags.message\r\n    })\r\n}\r\n\r\nlet response = await ai.chat(aiMessageArr);\r\n\r\ntry {\r\n    response = JSON.parse(response?.content);\r\n} catch (e) {\r\n    console.log(\"Error responding as narrator: \", e, response);\r\n    return;\r\n}\r\n\r\nif (!response) {\r\n    return;\r\n}\r\n\r\nif (response[\"type\"] && response[\"type\"] == \"prompt\") {\r\n    const targetBot = getBot(\"label\", response.target);\r\n    if (targetBot) {\r\n        targetBot.respond(response.prompt);\r\n    }\r\n} else {\r\n    ab.log({message: response?.message, name: tags.label, space: \"shared\"});\r\n}","label":"Story Teller","onStoryElementAdded":"@if (that?.tags?.name === tags.label) {\r\n    return;\r\n}\r\n\r\nconst targetsArr = [];\r\nconst targets = getBots(\"storyElement\");\r\nfor (const bot of targets) {\r\n    targetsArr.push(bot?.tags?.label);\r\n}\r\n\r\nconst aiMessageArr = [];\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: tags.basePrompt\r\n});\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: \"possible targets: \" + targetsArr\r\n});\r\n\r\nconst messages = getBots(byTag(\"consoleLogMessageBot\", true), byTag(\"space\", \"shared\"));\r\nfor (let i = 0; i < messages.length; ++i) {\r\n    aiMessageArr.push({\r\n        role: messages[i].tags.name == tags.label ? \"assistant\" : \"user\",\r\n        content: messages[i].tags.name == tags.label ? messages[i].tags.message : messages[i].tags.name + \": \" + messages[i].tags.message\r\n    })\r\n}\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: \"A new story element has appeared: \" + that.tags.label + \". Announce it's arrival and add it to the story.\"\r\n});\r\n\r\nlet response = await ai.chat(aiMessageArr);\r\n\r\ntry {\r\n    response = JSON.parse(response?.content);\r\n} catch (e) {\r\n    console.log(\"Error responding as narrator: \", e, response);\r\n    return;\r\n}\r\n\r\nif (!response) {\r\n    return;\r\n}\r\n\r\nif (response[\"type\"] && response[\"type\"] == \"prompt\") {\r\n    const targetBot = getBot(\"label\", response.target);\r\n    if (targetBot) {\r\n        targetBot.respond(response.prompt);\r\n    }\r\n} else {\r\n    ab.log({message: response?.message, name: tags.label, space: \"shared\"});\r\n}","abVersion":"10.5"}}}}