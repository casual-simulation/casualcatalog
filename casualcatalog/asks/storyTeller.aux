{"version":1,"state":{"81369b01-7308-4768-9e75-0d88d2244b87":{"id":"81369b01-7308-4768-9e75-0d88d2244b87","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","system":"story_toolbox.storyTeller","onEggHatch":"@if (that.eggParameters) {\r\n    const dimension = that.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = that.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = that.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n}\r\n\r\nif (!ab.links.console.masks.open) {\r\n    whisper(ab.links.console, \"showConsole\");\r\n    ab.links.console.masks.open = true;\r\n}","storyTeller":"true","basePrompt":"ðŸ“„`You are a narrator in a world with story elements.\r\nYou will recieve a message log to look through and decide if something should happen.\r\nYou must not narrate the user's actions. You must not prompt a story element that is not in your list of possible targets. You cannot use an element in the story if it is not in your list of possible targets, or if you did not make it yourself.\r\nYou have three options: You can send narrations, you can prompt a story element to respond, or you can make a request to create a new story element if the target you want does not exist or you want to add a new element.\r\nIf the story is not progressing, you are free to send a narration to continue.\r\nIf no story has been started, start your own, take inspiration from fairytales, fables, and childrens stories.\r\nYou MUST ONLY respond with valid JSON, starting wiht a { and ending with a }.\r\nDo not return only a string. You MUST include the 'type' field in your JSON response.\r\n\r\nEXAMPLES:\r\nthere is a sheep and a cow in a field,\r\nthe cow says to the sheep \"it is a wonderful day!\"\r\n\r\nyour response could be one of the following:\r\n\r\n{\r\n    \"type\": \"narration\",\r\n    \"message\": \"The sheep squinted at the sun, he thought it might be a bit too bright.\"\r\n}\r\nor\r\n{\r\n    \"type\": \"prompt\",\r\n    \"target\": \"sheep\",\r\n    \"prompt\": \"what say you, sheep?\"\r\n}\r\nor \r\n{\r\n    \"type\": \"create\",\r\n    \"target\": \"Freddy the Farmer\",\r\n    \"prompt\": \"You are a friendly farmer, taking care of the farm animals\"\r\n}\r\n`","onABLog":"@if (that?.tags?.name === tags.label) {\r\n    return;\r\n}\r\n\r\nconst targetsArr = [];\r\nconst targets = getBots(\"storyTarget\");\r\nfor (const bot of targets) {\r\n    targetsArr.push(bot?.tags?.label);\r\n}\r\n\r\nconst aiMessageArr = [];\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: tags.basePrompt\r\n});\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: \"possible targets: \" + targetsArr\r\n});\r\n\r\nconst messages = getBots(byTag(\"consoleLogMessageBot\", true), byTag(\"space\", \"shared\"));\r\nfor (let i = 0; i < messages.length; ++i) {\r\n    aiMessageArr.push({\r\n        role: messages[i].tags.name == tags.label ? \"assistant\" : \"user\",\r\n        content: messages[i].tags.name == tags.label ? messages[i].tags.message : messages[i].tags.name + \": \" + messages[i].tags.message\r\n    })\r\n}\r\n\r\nthisBot.askNarrator(aiMessageArr);","label":"Story Teller","onStoryElementAdded":"@if (that?.tags?.name === tags.label) {\r\n    return;\r\n}\r\n\r\nconst targetsArr = [];\r\nconst targets = getBots(\"storyElement\");\r\nfor (const bot of targets) {\r\n    targetsArr.push(bot?.tags?.label);\r\n}\r\n\r\nconst aiMessageArr = [];\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: tags.basePrompt\r\n});\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: \"possible targets: \" + targetsArr\r\n});\r\n\r\nconst messages = getBots(byTag(\"consoleLogMessageBot\", true), byTag(\"space\", \"shared\"));\r\nfor (let i = 0; i < messages.length; ++i) {\r\n    aiMessageArr.push({\r\n        role: messages[i].tags.name == tags.label ? \"assistant\" : \"user\",\r\n        content: messages[i].tags.name == tags.label ? messages[i].tags.message : messages[i].tags.name + \": \" + messages[i].tags.message\r\n    })\r\n}\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: \"A new story element has appeared: \" + that.tags.label + \". Announce it's arrival and add it to the story.\"\r\n});\r\n\r\nthisBot.askNarrator(aiMessageArr);","abVersion":"10.5","abIDOrigin":"storyTeller","home":true,"homeX":-5,"homeY":-6,"onClick":"@const targetsArr = [];\r\nconst targets = getBots(\"storyElement\");\r\nfor (const bot of targets) {\r\n    targetsArr.push(bot?.tags?.label);\r\n}\r\n\r\nconst aiMessageArr = [];\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: tags.basePrompt\r\n});\r\n\r\naiMessageArr.push({\r\n    role: \"system\",\r\n    content: \"possible targets: \" + targetsArr\r\n});\r\n\r\nconst messages = getBots(byTag(\"consoleLogMessageBot\", true), byTag(\"space\", \"shared\"));\r\nfor (let i = 0; i < messages.length; ++i) {\r\n    aiMessageArr.push({\r\n        role: messages[i].tags.name == tags.label ? \"assistant\" : \"user\",\r\n        content: messages[i].tags.name == tags.label ? messages[i].tags.message : messages[i].tags.name + \": \" + messages[i].tags.message\r\n    })\r\n}\r\n\r\nthisBot.askNarrator(aiMessageArr);","askNarrator":"@if (!that) {\r\n    os.toast(\"Story Narrator: Could not find messages\");\r\n    return;\r\n}\r\n\r\nlet response = await ai.chat(that);\r\nresponse = response.content.replace(/```json\\n?|```/g, '');\r\n\r\ntry {\r\n    response = JSON.parse(response);\r\n} catch (e) {\r\n    console.log(\"Error responding as narrator: \", e, response);\r\n    return;\r\n}\r\n\r\nif (!response) {\r\n    return;\r\n}\r\n\r\nconsole.log(\"Narrator Response: \", response);\r\n\r\nif (response[\"type\"] && response[\"type\"] == \"prompt\") {\r\n    const targetBot = getBot(\"label\", response.target);\r\n    if (targetBot) {\r\n        targetBot.respond(response.prompt);\r\n    }\r\n}\r\nelse if (response[\"type\"] && response[\"type\"] == \"create\") {\r\n    ab.links.search.onLookupAskID({\r\n                askID: \"storyElement\",\r\n                sourceEvent: 'tool',\r\n                eggParameters: {\r\n                    toolboxBot: tags.toolbox,\r\n                    gridInformation: tags.gridInformation,\r\n                    storyParameters: {\r\n                        prompt: response?.prompt,\r\n                        target: response?.target\r\n                    }\r\n                },\r\n            })\r\n} else {\r\n    ab.log({message: response?.message, name: tags.label, space: \"shared\"});\r\n}"}}}}