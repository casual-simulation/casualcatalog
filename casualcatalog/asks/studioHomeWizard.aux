{"version":1,"state":{"f0495b33-2530-4283-bc39-905cc30ee07a":{"id":"f0495b33-2530-4283-bc39-905cc30ee07a","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","system":"server_toolbox.tools.studioHomeWizard","color":"#0000FF","abIgnore":"true","onEggHatch":"@if (that.eggParameters) {\r\n    const dimension = that.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = that.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = that.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n\r\n    setTagMask(thisBot, \"gridInformation\", that.eggParameters.gridInformation, \"local\");\r\n    \r\n    thisBot.showStudioHomeConfigMenu();\r\n}","showStudioHomeConfigMenu":"@shout('clearStudioHomeConfigMenu');\r\n\r\nconfigBot.masks.menuPortal = 'studioHomeConfigMenu';\r\n\r\nconst mainButton = {\r\n    clearStudioHomeConfigMenu: `@destroy(thisBot);`,\r\n    studioHomeConfigMenu: true,\r\n    label: \"choose a studio\",\r\n    wizard: getLink(thisBot),\r\n    dropdownSortOrder: 1,\r\n    dropdownOptions: [],\r\n    defaultOpen: true\r\n}\r\n\r\nconst studios = await os.listUserStudios();\r\n\r\nif (!studios.success) {\r\n    console.log(\"Could not list user studios\");\r\n    os.toast(\"No user studios found\");\r\n    return;\r\n}\r\n\r\nfor (const studio of studios.studios) {\r\n    const studButton = {\r\n            label: studio.displayName,\r\n            studioId: studio.studioId,\r\n            clearStudioHomeConfigMenu: `@destroy(thisBot);`,\r\n            studioHomeConfigMenu: true,\r\n            wizard: getLink(thisBot),\r\n            onClick: `@\r\n                links.wizard.createStudioBot({id: tags.studioId, label: tags.label});\r\n                shout('clearStudioHomeConfigMenu');\r\n            `\r\n        }\r\n    mainButton.dropdownOptions.push(studButton);\r\n}\r\n\r\nif (!studios) {\r\n    const noStudioButton = {\r\n        clearStudioHomeConfigMenu: `@destroy(thisBot);`,\r\n        studioHomeConfigMenu: true,\r\n        label: \"could not find any studios\",\r\n        wizard: getLink(thisBot),\r\n        studioHomeConfigMenuSortOrder: 1,\r\n        onClick: `@\r\n            destroy(links.wizard);\r\n            destroy(thisBot);`\r\n    }\r\n\r\n    ab.links.menu.abCreateMenuButton(noStudioButton);\r\n} else {\r\n    ab.links.menu.abCreateMenuDropdown(mainButton);\r\n}\r\n","onGridClick":"@shout(\"clearStudioHomeConfigMenu\");","onAnyBotsRemoved":"@const { botIDs } = that;\r\n\r\nif (botIDs.includes(thisBot.id)) {\r\n    shout(\"clearInstCreatorMenu\");\r\n}","onClick":"@thisBot.showStudioHomeConfigMenu();","cursor":"pointer","formOpacity":".33","strokeColor":"#0000FF","createStudioBot":"@shout('clearStudioHomeConfigMenu');\r\n\r\nconst catalogAddress = ab.abBuildCasualCatalogURL('asks/home-world-assets/earthTexture.jpeg');\r\n\r\nconst currentURL = new URL(configBot.tags.url);\r\nconst origin = currentURL.origin;\r\n\r\nlet newURL = new URL(origin);\r\n\r\nif (configBot.tags.comId) {\r\n    newURL.searchParams.append(\"comId\", configBot.tags.comId);\r\n}\r\n\r\nnewURL.searchParams.append(\"owner\", that.id);\r\nnewURL.searchParams.append(\"inst\", 'home');\r\nnewURL.searchParams.append(\"mapPortal\", 'home');\r\nnewURL.searchParams.append(\"studio\", that.id);\r\nnewURL.searchParams.append(\"ask\", 'home');\r\n\r\nconst abArtifactShard = {\r\n    data: {\r\n        'biosSetting': 'studio',\r\n        'instSetting': 'home',\r\n        'instURL': newURL.href,\r\n        'studioSetting': that.id,\r\n        'label': that.label,\r\n        'form': 'sphere',\r\n        'formAddress': catalogAddress,\r\n        'color': 'white',\r\n        'scale': 4,\r\n        [tags.gridInformation?.dimension + 'RotationX']: 1.57,\r\n        eggParameters: {\r\n            gridInformation: tags.gridInformation\r\n        }\r\n    },\r\n    dependencies: [\r\n        {\r\n            askID: \"instBot\"\r\n        }\r\n    ]\r\n};\r\n\r\nab.links.artifact.abCreateArtifactPromiseBot({\r\n    abArtifactName: \"instBot\",\r\n    abArtifactInstanceID: uuid(),\r\n    abArtifactShard,\r\n});\r\n\r\nshout(\"abMenuRefresh\");\r\n\r\ndestroy(thisBot);","studioHomeWizard":"true","abVersion":"10.10","abIDOrigin":"studioHomeWizard","home":true,"homeX":18,"homeY":-11,"onBotAdded":"@let waitTime = 0;\r\n\r\nwhile(!globalThis.ab?.links.bot_factory) {\r\n    if (waitTime >= 5000) {\r\n        return;\r\n    }\r\n    \r\n    await os.sleep(250);\r\n    waitTime += 250;\r\n}\r\n\r\nmasks.ready = true;\r\n\r\nthisBot.updateBillboardLabel();","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\r\n    destroy(thisBot.vars.billboardLabelBot);\r\n    thisBot.vars.billboardLabelBot = null;\r\n}\r\n\r\nthisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \r\n    bot: thisBot, \r\n    label: tags.studioHomeLabel,\r\n    color: tags.studioHomeLabelFloatingBackgroundColor,\r\n    dimension: configBot.tags.mapPortal ?? configBot.tags.gridPortal ?? 'home',\r\n    // botLabelMargin: 0,\r\n    labelColor: tags.studioHomeLabelColor,\r\n    space: 'tempLocal',\r\n})","studioHomeLabel":"studio home wizard","studioHomeLabelFloatingBackgroundColor":"#0000FF","studioHomeLabelColor":"#00001c"}}}}