{"version":1,"state":{"01ed476b-4684-436d-b4d0-34475ed565de":{"id":"01ed476b-4684-436d-b4d0-34475ed565de","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","cursor":"pointer","draggable":"false","label":"add image","labelPadding":"0.2","onClick":"@const { modality, buttonId } = that;\n\nif (modality === 'mouse' && buttonId !== 'left') {\n    return;\n}\n\nif (tags.busy) {\n    return;\n}\n\n\nconst inXR = configBot.tags.inAR || configBot.tags.inVR;\n\nif (inXR) {\n    masks.busy = true;\n    masks.label = 'non-xr only';\n    masks.color = '#333333';\n    masks.labelColor = 'white';\n\n    await os.sleep(1000);\n\n    masks.busy = null;\n    masks.label = null;\n    masks.color = null;\n    masks.labelColor = null;\n    \n    return;\n}\n\nconst SUPPORTED_FILE_EXTS = [\n    'jpg',\n    'jpeg',\n    'webp',\n    'gif',\n    'png',\n    'svg',\n    // 'glb',\n    // 'gltf',\n    // 'mp3',\n    // 'mp4',\n]\n\nfunction getFileExtension(filename) {\n    if (typeof filename !== 'string') return '';\n    const parts = filename.split('.');\n    return parts.length > 1 ? parts.pop().toLowerCase() : '';\n}\n\nconst selectedFiles = await os.showUploadFiles();\nconsole.log(`[${tags.system}.${tagName}] selectedFiles:`, selectedFiles);\n\nconst filteredFiles = selectedFiles.filter((file) => {\n    const ext = getFileExtension(file.name);\n\n    if (ext) {\n        return SUPPORTED_FILE_EXTS.includes(ext);\n    } else {\n        return false;\n    }\n})\nconsole.log(`[${tags.system}.${tagName}] filteredFiles:`, filteredFiles);\n\nif (filteredFiles.length === 0 && selectedFiles.length > 0) {\n    os.toast(`The following files are supported: ${SUPPORTED_FILE_EXTS.join(', ')}`, 5);\n    return;\n}\n\nmasks.label = 'uploading...';\nmasks.color = '#999999';\nmasks.busy = true;\n\ntry {\n    for (let i = 0; i < filteredFiles.length; i++) {\n        const result = await links.mediaUpload.requestMediaUpload(filteredFiles[i])\n        console.log(`[${tags.system}.${tagName}] requestMediaUpload result:`, result);\n    }\n} finally {\n    masks.label = null;\n    masks.color = null;\n    masks.busy = null; \n}","scaleX":"1.7","scaleY":"0.7","scaleZ":"0.2","system":"teleXR.buttons.addImage","abIDOrigin":"teleXR","mediaUpload":"🔗057808ed-1c71-461e-8871-daa571c75a59","buttons":"true","buttonsX":"-4","buttonsY":"1"}},"057808ed-1c71-461e-8871-daa571c75a59":{"id":"057808ed-1c71-461e-8871-daa571c75a59","space":"shared","tags":{"system":"teleXR.mediaUpload","requestMediaUpload":"@console.log(`[${tags.system}.${tagName}] that:`, that);\n\nassert(typeof that === 'object' && that.data && that.name && that.size, `[${tags.system}.${tagName}] parameter must be a file object`);\n\nif (authBot) {\n    // User is logged in, they can upload it themselves.\n    // const result = links.store.abPublishFile({ file: that.data, })\n    const uploadResult = await links.input.onFileUpload({ file: that, copyUrl: false });\n    let url = uploadResult.url || uploadResult.existingFileUrl;\n\n    if (url) {\n        return { success: true, url }\n    } else {\n        return { success: false }\n    }\n} else {\n    // Find a remote that will upload the file for you.\n    let requestId = uuid();\n    let fileBase64 = bytes.toBase64String(that.data);\n    let remoteIds = await os.remotes();\n    const RESPONSE_TIMEOUT_MS = 30000; // 30 seconds.\n\n    async function waitForResponse() {\n        return new Promise((resolve) => {\n            const done = (result) => {\n                clearTimeout(timer);\n                thisBot.vars.onRequestMediaUploadResponse = null;\n                resolve(result);\n            }\n\n            const timer = setTimeout(() => done({ success: false }), RESPONSE_TIMEOUT_MS);\n\n            thisBot.vars.onRequestMediaUploadResponse = (data) => {\n                if (data.requestId === requestId) {\n                    console.log(`[${tags.system}.${tagName}] response received from remote ${data.remoteId}. response: ${JSON.stringify(data)}`);\n                    done(data);\n                }\n            }\n        })\n    }\n\n    for (let remoteId of remoteIds) {\n        if (remoteId === configBot.id) {\n            // Skip self.\n            continue;\n        }\n\n        console.log(`[${tags.system}.${tagName}] requesting remote ${remoteId} to upload media file ${that.name}.`);\n        \n        const waitForResponsePromise = waitForResponse();\n\n        // Send upload request to remote.\n        sendRemoteData(remoteId, 'request_media_upload', { \n            fileBase64, \n            size: that.size, \n            name: that.name, \n            mimeType: that.mimeType, \n            requestId\n        });\n\n        const response = await waitForResponsePromise;\n\n        if (response.success || response.url) {\n            response.success = true; // Weird quirk of ab's onFileUpload.\n\n            return response;\n        } else {\n            // Going to try next remote.\n        }\n    }\n\n    // No remotes could upload the media.\n    console.log(`[${tags.system}.${tagName}] no remotes could upload the media.`);\n    return { success: false }\n}","onRemoteData":"@if (that.name === 'request_media_upload') {\n    console.log(`[${tags.system}.${tagName}] request_media_upload received. event data:`, that.that);\n\n    const response = { success: null, url: null, requestId: that.that.requestId };\n\n    if (authBot) {\n        try {\n            console.log(`[${tags.system}.${tagName}] starting upload of file ${that.that.name}.`);\n            const fileArrayBuffer = bytes.fromBase64String(that.that.fileBase64).buffer;\n            const file = {\n                ...that.that,\n                data: fileArrayBuffer,\n            }\n\n            const uploadResult = await links.input.onFileUpload({ file, copyUrl: false });\n            const url = uploadResult.url || uploadResult.existingFileUrl;\n\n            console.log(`[${tags.system}.${tagName}] upload result:`, uploadResult);\n\n            if (url) {\n                response.success = true;\n                response.url = url;\n            } else {\n                response.success = false;\n            }\n        } finally {\n            response.success = false;\n        }\n    } else {\n        response.success = false;\n    }\n\n    // Inform remote of result.\n    console.log(`[${tags.system}.${tagName}] sending request_media_upload_response:`, response);\n    sendRemoteData(that.remoteId, 'request_media_upload_response', response);\n\n} else if (that.name === 'request_media_upload_response') {\n    if (thisBot.vars.onRequestMediaUploadResponse) {\n        thisBot.vars.onRequestMediaUploadResponse(that.that);\n    }\n}","store":"🔗76af0491-3919-4984-aa82-22c742f4263f","input":"🔗f8602878-c2ef-48bd-85a0-8d6351eb4120","onAnyCreate":"@const { bot } = that;\n\nif (bot.tags.abFileUpload) {\n    // Mark each bot created with onFileUpload as focusable and scaleable.\n    bot.tags.teleXRFocusOnClick = true;\n    bot.tags.teleXRScaleOnClick = true;\n    bot.tags.teleXRLaserPointable = true;\n}"}},"1d366bdf-5593-45f7-9b04-56a9c394ee1a":{"id":"1d366bdf-5593-45f7-9b04-56a9c394ee1a","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","cursor":"pointer","draggable":"false","labelPadding":"0.2","onClick":"@const { modality, buttonId } = that;\r\n\r\nif (modality === 'mouse' && buttonId !== 'left') {\r\n    return;\r\n}\r\n\r\nconst inst = os.getCurrentInst();\r\nconst options = await os.getRoomOptions(inst);\r\n\r\nlet videoEnabled = false;\r\nif (options.success) {\r\n    videoEnabled = options.options.video;\r\n}\r\n\r\nconst result = await os.setRoomOptions(inst, {\r\n    video: !videoEnabled\r\n})\r\n\r\nconsole.log('setRoomOptions:', result);","onInitialize":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.buttons = false;","onRoomJoined":"@console.log(`[${tags.system}.${tagName}] that:`, that);\n\nconst { roomName, options } = that;\n\nmasks.buttons = true;\nthisBot.setEnabledState({ enabled: options.video });","onRoomLeave":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.buttons = false;","onRoomOptionsChanged":"@const { roomName, options } = that;\n\nthisBot.setEnabledState({ enabled: options.video });","scaleX":"1.7","scaleY":"0.7","scaleZ":"0.2","setEnabledState":"@const { enabled } = that;\n\nif (enabled) {\n    masks.color = null;\n    masks.label = 'disable\\ncamera';\n} else {\n    masks.color = '#999999';\n    masks.label = 'enable\\ncamera';\n}","system":"teleXR.buttons.toggleCamera","abIDOrigin":"teleXR","buttonsY":"-3","buttonsX":"-2"}},"358a488e-5864-4e3c-96c7-30b565fc1800":{"id":"358a488e-5864-4e3c-96c7-30b565fc1800","space":"shared","tags":{"system":"teleXR.clickToScale","onAnyBotClicked":"@const { bot, modality, buttonId } = that;\n\nif (modality === 'controller') {\n    if (bot.tags.teleXRScaleOnClick) {\n        const scales = bot.tags.teleXRScales ?? [1, 2, 3];\n        const currentScaleIndex = scales.findIndex(s => s === (bot.tags.scale ?? 1));\n        console.log('scales', scales);\n        console.log('currentScaleIndex', currentScaleIndex);\n\n        let nextScaleIndex = currentScaleIndex + 1;\n        if (nextScaleIndex >= scales.length) {\n            nextScaleIndex = 0;\n        }\n        console.log('nextScaleIndex', nextScaleIndex);\n\n        bot.masks.scale = scales[nextScaleIndex];\n    }\n} "}},"4600a0d7-7195-44df-be41-2562584df297":{"id":"4600a0d7-7195-44df-be41-2562584df297","space":"shared","tags":{"system":"teleXR.logWindow","home":true,"onInitialize":"@thisBot.update();","update":"@const logBots = getBots(b => b.tags.consoleLogMessageBot);\n\nlogBots.sort((a, b) => {\n    return new Date(a.tags.timestamp) > new Date(b.tags.timestamp) ? 1 : -1\n})\n\nconst logBotsToShow = logBots.slice(-3);\n\nif (logBotsToShow.length > 0) {\n    let label = '';\n\n    for (let i = 0; i < logBotsToShow.length; i++) {\n        if (i > 0) {\n            label += '\\n\\n'\n        }\n\n        const logBot = logBotsToShow[i];\n\n        if (logBot.tags.name) {\n            label += `${logBot.tags.name}: `;\n        }\n\n        label += `${logBot.tags.message}`\n\n    }\n\n    masks.label = label;\n} else {\n    masks.label = 'no chat messages yet';\n}","onABConsoleLogMessageBotAdded":"@thisBot.update();","onABConsoleLogMessageBotRemoved":"@thisBot.update();","onClick":"@thisBot.update();","labelAlignment":"left","labelColor":"#5aed5c","color":"#111111","form":"sprite","scaleZ":"0.01","scaleX":"2","scaleY":"1","homeX":"-1","homeY":"4","homeZ":"3","homeRotationX":"1.6","homeRotationY":"0","homeRotationZ":"0","homeRotation":null,"teleXRScaleOnClick":"true","teleXRLaserPointable":"true"}},"52b57232-d948-4965-8ef2-4bd5400cc30d":{"id":"52b57232-d948-4965-8ef2-4bd5400cc30d","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","home":"false","homeSortOrder":0,"homeX":0,"homeY":0,"initialize":"@if (!masks.initialized) {\n    masks.initialized = true;\n    shout('onInitialize');\n}","label":"manager","onEggHatch":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nthisBot.initialize();","onInitialize":"@const PANNABLE_AREA_SIZE = 12;\n\ngridPortalBot.masks.portalPannableMin = `➡️${-PANNABLE_AREA_SIZE},${-PANNABLE_AREA_SIZE}`;\ngridPortalBot.masks.portalPannableMax = `➡️${PANNABLE_AREA_SIZE},${PANNABLE_AREA_SIZE}`;\ngridPortalBot.masks.portalColor = \"#0c254e\";\n\nconfigBot.tags.leftWristPortal = 'leftWrist';\n\nleftWristPortalBot.tags.portalGridScale = 0.025;\n\n// Focus gridPortal camera on buttons.\nawait os.sleep(250);\nos.focusOn({ x: -4, y: 0, z: 0 }, { zoom: 25, rotation: { x: 0.5, y: 0.2 }}).catch(() => {});","onInstJoined":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nthisBot.initialize();","system":"teleXR.init","abIDOrigin":"teleXR","onRemoteABAdded":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nthisBot.initialize();"}},"5b99dfcb-73fc-4a10-ac1a-4115b55192ce":{"id":"5b99dfcb-73fc-4a10-ac1a-4115b55192ce","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","cursor":"pointer","draggable":"false","label":"join call","labelPadding":"0.2","onClick":"@const { modality, buttonId } = that;\r\n\r\nif (modality === 'mouse' && buttonId !== 'left') {\r\n    return;\r\n}\r\n\r\nconst inst = os.getCurrentInst();\r\n\r\nconst result = await os.joinRoom(inst, {\r\n    endpoint: 'https://casualos.me'\r\n})\r\n\r\nconsole.log(result);","onInitialize":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.buttons = true;","onRoomJoined":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.buttons = false;\n\nconst inXR = configBot.tags.inAR || configBot.tags.inVR;\n\nif (!inXR) {\n    os.focusOn({ x: 0, y: -1, z: 0 }, { zoom: 18, rotation: { x: 1, y: 0.75 }}).catch(() => {});\n}","onRoomLeave":"@console.log(`[${tags.system}.${tagName}] that:`, that);\n\nconst { roomName } = that;\n\nconfigBot.tags.roomName = null;\nmasks.buttons = true;","scaleX":"1.7","scaleY":"0.7","scaleZ":"0.2","system":"teleXR.buttons.joinRoom","abIDOrigin":"teleXR","color":"#FCC400","buttons":"true","buttonsY":"-2","buttonsX":"-3"}},"78715dab-0ada-40e0-8afc-db525e2c19aa":{"id":"78715dab-0ada-40e0-8afc-db525e2c19aa","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","cursor":"pointer","draggable":"false","label":"take photo","labelPadding":"0.2","onClick":"@const { modality, buttonId } = that;\n\nif (modality === 'mouse' && buttonId !== 'left') {\n    return;\n}\n\nif (tags.busy) {\n    return;\n}\n\nmasks.busy = true;\n\nconst inXR = configBot.tags.inAR || configBot.tags.inVR || tags.testXR;\n\nif (inXR) {\n    os.capturePhoto({\n        cameraType: 'auto',\n        imageFormat: 'png',\n        skipConfirm: true,\n        takePhotoAfterSeconds: tags.captureTimerSeconds,\n        idealResolution: { width: 1280, height: 720 }\n    })\n} else {\n    os.openPhotoCamera({\n        cameraType: 'rear',\n        imageFormat: 'png',\n        idealResolution: { width: 1280, height: 720 },\n    })\n}","scaleX":"1.7","scaleY":"0.7","scaleZ":"0.2","system":"teleXR.buttons.takePhoto","mediaUpload":"🔗057808ed-1c71-461e-8871-daa571c75a59","onPhotoCaptured":"@console.log(`[${tags.system}.${tagName}] that:`, that);\n\nconst { photo } = that;\n\nconst inXR = configBot.tags.inAR || configBot.tags.inVR || tags.testXR;\n\nmasks.cameraState = 'captured';\nmasks.busy = null;\nmasks.label = null;\n\nos.playSound(tags.shutterUrl);\n\nif (inXR) {\n\n} else {\n    os.closePhotoCamera();\n}\n\nconst arrayBuffer = await photo.data.arrayBuffer();\n\n// convert photo data structure into a file data structure accepted by requestMediaUpload.\nconst file = {\n    name: `${uuid()}.png`,\n    data: arrayBuffer,\n    size: photo.data.size,\n    mimeType: photo.data.type,\n}\n\nconsole.log(`[${tags.system}.${tagName}] file:`, file);\n\nlinks.mediaUpload.requestMediaUpload(file);","onPhotoCameraClosed":"@console.log(`[${tags.system}.${tagName}] that:`, that);\n\nconst inXR = configBot.tags.inAR || configBot.tags.inVR || tags.testXR;\n\nif (tags.cameraState === 'opened') {\n    // User closed the photo camera early, thus canceling it.\n    masks.busy = null;\n    masks.label = null;\n}\n\nmasks.cameraState = 'closed';\n","onPhotoCameraOpened":"@console.log(`[${tags.system}.${tagName}] that:`, that);\n\nconst inXR = configBot.tags.inAR || configBot.tags.inVR || tags.testXR;\n\nmasks.cameraState = 'opened';\n\nif (inXR) {\n    for (let i = 0; i < tags.captureTimerSeconds; i++) {\n        os.sleep(i * 1000).then(() => {\n            if (tags.cameraState === 'opened') {\n                masks.label = ' ' + String(tags.captureTimerSeconds - i) + ' ';\n                os.playSound(tags.beepUrl);\n            }\n        })\n    }\n}","captureTimerSeconds":"3","testXR":"false","onInitialize":"@const shutterUrl = links.learn.abBuildCasualCatalogURL(`/asks/teleXR-assets/camera-shutter.mp3`);\nmasks.shutterUrl = shutterUrl;\n\nconst beepUrl = links.learn.abBuildCasualCatalogURL(`/asks/teleXR-assets/beep.mp3`);\nmasks.beepUrl = beepUrl;\n\nos.bufferSound(shutterUrl);\nos.bufferSound(beepUrl);","buttonsY":"0","buttonsX":"-3","buttons":"true","learn":"🔗6657b865-e983-4401-9fc9-f5418d18a7f7"}},"7a00b862-4aed-43db-8a7a-2bf9dacbb957":{"id":"7a00b862-4aed-43db-8a7a-2bf9dacbb957","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","cursor":"pointer","draggable":"false","label":"use headset","labelPadding":"0.2","onClick":"@const { modality, buttonId } = that;\n\nif (modality === 'mouse' && buttonId !== 'left') {\n    return;\n}\n\nif (configBot.tags.inAR) {\n    shout('onExitARClick');\n    await os.sleep(500);\n    os.disableAR();\n    return;\n} else if (configBot.tags.inVR) {\n    shout('onExitVRClick');\n    await os.sleep(500);\n    os.disableVR();\n    return;\n}\n\nif (os.device().supportsAR) {\n    os.enableAR();\n} else if (os.device().supportsVR) {\n    os.enableVR();\n} else {\n    os.toast('WebXR is not available on this device.');\n}","onEnterAR":"@configBot.tags.inAR = true;\nmasks.label = 'Exit AR';","onExitAR":"@configBot.tags.inAR = false;\nmasks.label = null;","scaleX":"1.7","scaleY":"0.7","scaleZ":"0.2","system":"teleXR.buttons.toggleXR","onEnterVR":"@configBot.tags.inVR = true;\nmasks.label = 'Exit VR';","onExitVR":"@configBot.tags.inVR = false;\nmasks.label = null;","color":"#FFFFFF","buttons":"true","buttonsY":"2","buttonsX":"-3","onExitARClick":"@thisBot.onExitAR();","onExitVRClick":"@thisBot.onExitVR();"}},"852ee16e-9e94-473b-b8b7-a3695f9115eb":{"id":"852ee16e-9e94-473b-b8b7-a3695f9115eb","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","color":"#FFFFFF","cursor":"pointer","draggable":"false","label":"screen share","labelPadding":"0.2","onClick":"@const { modality, buttonId } = that;\n\nif (modality === 'mouse' && buttonId !== 'left') {\n    return;\n}\n\nconst inst = os.getCurrentInst();\nconst options = await os.getRoomOptions(inst);\n\nlet screenEnabled = false;\nif (options.success) {\n    screenEnabled = options.options.screen;\n}\n\nconst result = await os.setRoomOptions(inst, {\n    screen: !screenEnabled\n})\n\nconsole.log('setRoomOptions:', result);","onInitialize":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.buttons = false;","onRoomJoined":"@console.log(`[${tags.system}.${tagName}] that:`, that);\n\nconst { roomName, options } = that;\n\nmasks.buttons = true;\nthisBot.setEnabledState({ enabled: options.screen });","onRoomLeave":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.buttons = false;","onRoomOptionsChanged":"@const { roomName, options } = that;\n\nthisBot.setEnabledState({ enabled: options.screen });","scaleX":"1.7","scaleY":"0.7","scaleZ":"0.2","setEnabledState":"@const { enabled } = that;\n\nif (enabled) {\n    masks.color = null;\n    masks.label = 'disable\\nscreen share';\n} else {\n    masks.color = '#999999';\n    masks.label = 'enable\\nscreen share';\n}","system":"teleXR.buttons.toggleScreenShare","abIDOrigin":"teleXR","buttonsY":"-4","buttonsX":"-3"}},"8dd925dd-aabd-4ff5-a855-f0d9c9b0e4f7":{"id":"8dd925dd-aabd-4ff5-a855-f0d9c9b0e4f7","space":"shared","tags":{"system":"teleXR.math","onBotAdded":"@if (!globalThis.TeleXR) {\n\tglobalThis.TeleXR = {}\n}\n\nTeleXR.math = {};\n\n// ==========\n// math utils\n// ==========\nconst utils = {}\nTeleXR.math.utils = utils;\n\nutils.degToRad = (degrees) => {\n    return degrees * (Math.PI / 180);\n}\n\nutils.radToDeg = (radians) => {\n    return radians * (180 / Math.PI);\n}\n\nutils.clamp = (value, min, max) => {\n\treturn Math.max(min, Math.min(max, value));\n}\n\nutils.fmod = (a, b) => {\n\treturn Number((a - (Math.floor(a / b) * b)).toPrecision(8));\n}\n\nutils.wrapTo2Pi = (a) => {\n\ta = utils.fmod(a, Math.PI * 2);\n\treturn a;\n}\n\nutils.flipYZ = (v, sign) => {\n\tconst y = v.y;\n\tconst z = v.z;\n\tv.z = y;\n\tv.y = sign ? -z : z;\n}\n\nutils.normalize = (value, min, max) => {\n\treturn (value - min) / (max - min);\n}\n\nutils.unnormalize = (normal, min, max) => {\n\treturn normal * (max - min) + min;\n}\n\nutils.lerp = (a, b, t) => {\n\treturn a + (b - a) * t;\n}\n\nutils.pointOnCircle = (center, radius, angle) => {\n\tconst angleRad = angle * utils.DEG2RAD;\n\n\tconst point = {\n\t\tx: center.x + radius * Math.sin(angleRad),\n\t\ty: center.y + radius * Math.cos(angleRad)\n\t};\n\n\treturn point;\n}\n\n/**\n * prettyFloat will round a number to the specified decimal points and then remove any trailing zeros\n * if they are present after rounding to fixed point number. Integers are returned as-is.\n */\nutils.prettyFloat = (n, decimalPlaces = 2) => {\n\tif (Number.isInteger(n)) {\n\t\treturn n;\n\t} else {\n\t\tconst fixed = n.toFixed(decimalPlaces);\n\t\treturn parseFloat(fixed);\n\t}\n}\n\n// ==========\n// plane\n// ==========\nconst plane = {};\nTeleXR.math.plane = plane;\n\nplane.fromNormalAndCoplanarPoint = (normal, point) => {\n\tlet newPlane = {\n\t\tnormal: {...normal},\n\t\tconstant: -vector3.dot(point, normal)\n\t}\n\n\treturn newPlane;\n}\n\nplane.fromCoplanarPoints = (a, b, c) => {\n\tconst cb = math.subtractVectors({...c}, b);\n\tconst ab = math.subtractVectors({...a}, b);\n\n\tconst normal = math.normalizeVector( vector3.crossVectors(cb, ab) );\n\n\treturn plane.fromNormalAndCoplanarPoint(normal, a);\n}\n\nplane.distanceToPoint = (plane, point) => {\n\treturn vector3.dot(plane.normal, point) + plane.constant;\n}\n\nplane.intersectRay = (plane, ray) => {\n\tconst t = TeleXR.math.ray.distanceToPlane(ray, plane);\n\n\tif (t === null) {\n\t\treturn null;\n\t}\n\n\treturn TeleXR.math.ray.at(ray, t);\n}\n\n// ==========\n// ray\n// ==========\nconst ray = {};\nTeleXR.math.ray = ray;\n\nray.distanceToPlane = (ray, plane) => {\n\tconst denominator = vector3.dot(plane.normal, ray.direction);\n\n\tif (denominator === 0) {\n\t\t// line is coplanar, return origin.\n\t\tif (TeleXR.math.plane.distanceToPoint(plane, ray.origin) === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tconst t = -( vector3.dot(ray.origin, plane.normal) + plane.constant ) / denominator;\n\n\t// Return if the ray never intersect the plane.\n\treturn t >= 0 ? t : null;\n}\n\nray.at = (ray, distance) => {\n\tlet point = {...ray.origin};\n\tconst dirScaled = vector3.multiplyScalar({...ray.direction}, distance);\n\tpoint = math.addVectors(point, dirScaled);\n\n\treturn point;\n}\n\n// ==========\n// vector3\n// ==========\nconst vector3 = {};\nTeleXR.math.vector3 = vector3;\n\nvector3.zero = () => {\n\treturn { x: 0, y: 0, z: 0 }\n}\n\nvector3.up = () => {\n\treturn { x: 0, y: 1, z: 0 }\n}\n\nvector3.one = () => {\n\treturn { x: 1, y: 1, z: 1 }\n}\n\nvector3.applyQuaternion = (v, q) => {\n\tconst x = v.x, y = v.y, z = v.z;\n\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t// calculate quat * vector\n\tconst ix = qw * x + qy * z - qz * y;\n\tconst iy = qw * y + qz * x - qx * z;\n\tconst iz = qw * z + qx * y - qy * x;\n\tconst iw = - qx * x - qy * y - qz * z;\n\n\t// calculate result * inverse quat\n\tv.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\tv.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\tv.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\treturn v;\n}\n\nvector3.lengthSq = (v) => {\n\treturn v.x * v.x + v.y * v.y + v.z * v.z;\n}\n\nvector3.dot = (v1, v2) => {\n\treturn v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n}\n\nvector3.angle = (v1, v2) => {\n\tconst denominator = Math.sqrt(vector3.lengthSq(v1) * vector3.lengthSq(v2));\n\tif (denominator === 0) return Math.PI / 2;\n\n\tconst theta = vector3.dot(v1, v2) / denominator;\n\t// clamp, to handle numerical problems\n\treturn Math.acos(utils.clamp(theta, - 1, 1));\n}\n\nvector3.lerp = (v1, v2, t) => {\n\treturn {\n\t\tx: v1.x + (v2.x - v1.x) * t,\n\t\ty: v1.y + (v2.y - v1.y) * t,\n\t\tz: v1.z + (v2.z - v1.z) * t\n\t}\n}\n\nvector3.length = (v) => {\n\treturn Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n}\n\nvector3.lengthSq = (v) => {\n\treturn v.x * v.x + v.y * v.y + v.z * v.z;\n}\n\nvector3.setLength = (v, l) => {\n\tv = math.normalizeVector(v);\n\tv = vector3.multiplyScalar(v, l);\n\n\treturn v;\n}\n\nvector3.applyMatrix4 = (v, m) => {\n\tconst x = v.x, y = v.y, z = v.z;\n\tconst w = 1 / (m[3] * x + m[7] * y + m[11] * z + m[15]);\n\n\tv.x = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;\n\tv.y = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;\n\tv.z = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;\n\n\treturn v;\n}\n\nvector3.multiply = (v1, v2) => {\n\tv1.x *= v2.x;\n\tv1.y *= v2.y;\n\tv1.z *= v2.z;\n\n\treturn v1;\n}\n\nvector3.multiplyScalar = (v, s) => {\n\tv.x *= s;\n\tv.y *= s;\n\tv.z *= s;\n\n\treturn v;\n}\n\nvector3.divide = (v1, v2) => {\n\tv1.x /= v2.x;\n\tv1.y /= v2.y;\n\tv1.z /= v2.z;\n\n\treturn v1;\n}\n\nvector3.divideScalar = (v, s) => {\n\treturn vector3.multiplyScalar(v, 1 / s);\n}\n\nvector3.crossVectors = (a, b) => {\n\tconst v = vector3.zero();\n\tconst ax = a.x, ay = a.y, az = a.z;\n\tconst bx = b.x, by = b.y, bz = b.z;\n\n\tv.x = ay * bz - az * by;\n\tv.y = az * bx - ax * bz;\n\tv.z = ax * by - ay * bx;\n\treturn v;\n}\n\nvector3.applyEuler = (v, euler, order = 'XYZ') => {\n\treturn vector3.applyQuaternion(v, quaternion.fromEuler(euler, order));\n}\n\nvector3.applyAxisAngle = (v, axis, angle) => {\n\treturn vector3.applyQuaternion(v, quaternion.setFromAxisAngle(axis, angle));\n}\n\nvector3.transformDirection = (v, m) => {\n\tlet x = v.x, y = v.y, z = v.z;\n\n\tlet newX = m[0] * x + m[4] * y + m[8] * z;\n\tlet newY = m[1] * x + m[5] * y + m[9] * z;\n\tlet newZ = m[2] * x + m[6] * y + m[10] * z;\n\n\treturn math.normalizeVector({ x: newX, y: newY, z: newZ });\n}\n\n\nvector3.setFromRotationMatrix = (m, order = 'XYZ') => {\n\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t// console.log(`[vector3.setFromRotationMatrix] 1. matrix`, JSON.stringify(m));\n\tconst m11 = m[0], m12 = m[4], m13 = m[8];\n\tconst m21 = m[1], m22 = m[5], m23 = m[9];\n\tconst m31 = m[2], m32 = m[6], m33 = m[10];\n\tconst v = vector3.zero();\n\n\tswitch (order) {\n\t\tcase 'XYZ':\n\t\t\tv.y = Math.asin(utils.clamp(m13, - 1, 1));\n\n\t\t\tif (Math.abs(m13) < 0.9999999) {\n\t\t\t\tv.x = Math.atan2(- m23, m33);\n\t\t\t\tv.z = Math.atan2(- m12, m11);\n\t\t\t} else {\n\t\t\t\tv.x = Math.atan2(m32, m22);\n\t\t\t\tv.z = 0;\n\t\t\t}\n\t\t\t// console.log(`[vector3.setFromRotationMatrix] 2. XYZ swizzle`, JSON.stringify(v));\n\t\t\tbreak;\n\t\tcase 'YXZ':\n\t\t\tv.x = Math.asin(- utils.clamp(m23, - 1, 1));\n\n\t\t\tif (Math.abs(m23) < 0.9999999) {\n\t\t\t\tv.y = Math.atan2(m13, m33);\n\t\t\t\tv.z = Math.atan2(m21, m22);\n\t\t\t} else {\n\t\t\t\tv.y = Math.atan2(- m31, m11);\n\t\t\t\tv.z = 0;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'ZXY':\n\t\t\tv.x = Math.asin(utils.clamp(m32, - 1, 1));\n\n\t\t\tif (Math.abs(m32) < 0.9999999) {\n\t\t\t\tv.y = Math.atan2(- m31, m33);\n\t\t\t\tv.z = Math.atan2(- m12, m22);\n\t\t\t} else {\n\t\t\t\tv.y = 0;\n\t\t\t\tv.z = Math.atan2(m21, m11);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'ZYX':\n\t\t\tv.y = Math.asin(- utils.clamp(m31, - 1, 1));\n\n\t\t\tif (Math.abs(m31) < 0.9999999) {\n\t\t\t\tv.x = Math.atan2(m32, m33);\n\t\t\t\tv.z = Math.atan2(m21, m11);\n\t\t\t} else {\n\t\t\t\tv.x = 0;\n\t\t\t\tv.z = Math.atan2(- m12, m22);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'YZX':\n\t\t\tv.z = Math.asin(utils.clamp(m21, - 1, 1));\n\n\t\t\tif (Math.abs(m21) < 0.9999999) {\n\t\t\t\tv.x = Math.atan2(- m23, m22);\n\t\t\t\tv.y = Math.atan2(- m31, m11);\n\t\t\t} else {\n\t\t\t\tv.x = 0;\n\t\t\t\tv.y = Math.atan2(m13, m33);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'XZY':\n\t\t\tv.z = Math.asin(- utils.clamp(m12, - 1, 1));\n\n\t\t\tif (Math.abs(m12) < 0.9999999) {\n\t\t\t\tv.x = Math.atan2(m32, m22);\n\t\t\t\tv.y = Math.atan2(m13, m11);\n\t\t\t} else {\n\t\t\t\tv.x = Math.atan2(- m23, m33);\n\t\t\t\tv.y = 0;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.warn('[vector3.setFromRotationMatrix] encountered an unknown order: ' + order);\n\t}\n\n\treturn v;\n}\n\nvector3.setFromQuaternion = (q, order = 'XYZ') => {\n\tconst m = matrix4.compose(vector3.zero(), q, vector3.one());\n\treturn vector3.setFromRotationMatrix(m, order);\n}\n\nvector3.localToWorld = (vector, matrixWorld) => {\n\treturn vector3.applyMatrix4(vector, matrixWorld);\n}\n\nvector3.worldToLocal = (vector, matrixWorld) => {\n\tconst inverseMatrix = matrix4.invert([...matrixWorld]);\n\treturn vector3.applyMatrix4(vector, inverseMatrix);\n}\n\n// ==========\n// quaternion\n// ==========\nconst quaternion = {};\nTeleXR.math.quaternion = quaternion;\n\nquaternion.identity = () => {\n\treturn { x: 0, y: 0, z: 0, w: 1 };\n}\n\nquaternion.setFromRotationMatrix = (q, m) => {\n\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\tconst m11 = m[0], m12 = m[4], m13 = m[8];\n\tconst m21 = m[1], m22 = m[5], m23 = m[9];\n\tconst m31 = m[2], m32 = m[6], m33 = m[10];\n\n\tconst trace = m11 + m22 + m33;\n\n\tif (trace > 0) {\n\t\tconst s = 0.5 / Math.sqrt(trace + 1.0);\n\n\t\tq.w = 0.25 / s;\n\t\tq.x = (m32 - m23) * s;\n\t\tq.y = (m13 - m31) * s;\n\t\tq.z = (m21 - m12) * s;\n\t} else if (m11 > m22 && m11 > m33) {\n\t\tconst s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n\t\tq.w = (m32 - m23) / s;\n\t\tq.x = 0.25 * s;\n\t\tq.y = (m12 + m21) / s;\n\t\tq.z = (m13 + m31) / s;\n\t} else if (m22 > m33) {\n\t\tconst s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n\t\tq.w = (m13 - m31) / s;\n\t\tq.x = (m12 + m21) / s;\n\t\tq.y = 0.25 * s;\n\t\tq.z = (m23 + m32) / s;\n\t} else {\n\t\tconst s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n\t\tq.w = (m21 - m12) / s;\n\t\tq.x = (m13 + m31) / s;\n\t\tq.y = (m23 + m32) / s;\n\t\tq.z = 0.25 * s;\n\t}\n\n\treturn q;\n}\n\nquaternion.setFromAxisAngle = (axis, angle) => {\n\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t// assumes axis is normalized\n\tconst q = quaternion.identity();\n\tconst halfAngle = angle / 2, s = Math.sin(halfAngle);\n\n\tq.x = axis.x * s;\n\tq.y = axis.y * s;\n\tq.z = axis.z * s;\n\tq.w = Math.cos(halfAngle);\n\n\treturn q;\n}\n\nquaternion.setFromUnitVectors = (vFrom, vTo) => {\n\t// assumes direction vectors vFrom and vTo are normalized\n\tconst q = quaternion.identity();\n\tlet r = vector3.dot(vFrom, vTo) + 1;\n\n\tif (r < Number.EPSILON) {\n\n\t\t// vFrom and vTo point in opposite directions\n\n\t\tr = 0;\n\n\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\n\t\t\tq.x = - vFrom.y;\n\t\t\tq.y = vFrom.x;\n\t\t\tq.z = 0;\n\t\t\tq.w = r;\n\n\t\t} else {\n\n\t\t\tq.x = 0;\n\t\t\tq.y = - vFrom.z;\n\t\t\tq.z = vFrom.y;\n\t\t\tq.w = r;\n\n\t\t}\n\n\t} else {\n\n\t\tq.x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\tq.y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\tq.z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\tq.w = r;\n\n\t}\n\n\treturn quaternion.normalize(q);\n}\n\nquaternion.fromEuler = (euler, order = 'XYZ') => {\n\tconst q = quaternion.identity();\n\tconst x = euler.x, y = euler.y, z = euler.z;\n\n\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\n\tconst c1 = Math.cos(x / 2);\n\tconst c2 = Math.cos(y / 2);\n\tconst c3 = Math.cos(z / 2);\n\n\tconst s1 = Math.sin(x / 2);\n\tconst s2 = Math.sin(y / 2);\n\tconst s3 = Math.sin(z / 2);\n\n\tswitch (order) {\n\t\tcase 'XYZ':\n\t\t\tq.x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tq.y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tq.z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tq.w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\tbreak;\n\t\tcase 'YXZ':\n\t\t\tq.x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tq.y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tq.z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tq.w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\tbreak;\n\t\tcase 'ZXY':\n\t\t\tq.x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tq.y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tq.z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tq.w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\tbreak;\n\t\tcase 'ZYX':\n\t\t\tq.x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tq.y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tq.z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tq.w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\tbreak;\n\t\tcase 'YZX':\n\t\t\tq.x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tq.y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tq.z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tq.w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\tbreak;\n\t\tcase 'XZY':\n\t\t\tq.x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tq.y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tq.z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tq.w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.warn('[quaternion.fromEuler] encountered an unknown order: ' + order);\n\t}\n\n\treturn q;\n}\n\nquaternion.multiplyQuaternions = (a, b) => {\n\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\tconst q = quaternion.identity();\n\tconst qax = a.x, qay = a.y, qaz = a.z, qaw = a.w;\n\tconst qbx = b.x, qby = b.y, qbz = b.z, qbw = b.w;\n\n\tq.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\tq.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\tq.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\tq.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\treturn q;\n}\n\nquaternion.length = (q) => {\n\treturn Math.sqrt(q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w);\n}\n\nquaternion.normalize = (q) => {\n\tlet l = quaternion.length(q);\n\n\tif (l === 0) {\n\t\tq.x = 0;\n\t\tq.y = 0;\n\t\tq.z = 0;\n\t\tq.w = 1;\n\t} else {\n\t\tl = 1 / l;\n\n\t\tq.x = q.x * l;\n\t\tq.y = q.y * l;\n\t\tq.z = q.z * l;\n\t\tq.w = q.w * l;\n\t}\n\n\treturn q;\n}\n\nquaternion.invert = (q) => {\n\t// quaternion is assumed to have unit length\n\treturn quaternion.conjugate(q);\n}\n\nquaternion.conjugate = (q) => {\n\tq.x *= - 1;\n\tq.y *= - 1;\n\tq.z *= - 1;\n\n\treturn q;\n}\n\n// ==========\n// matrix4\n// ==========\nconst matrix4 = {};\nTeleXR.math.matrix4 = matrix4;\n\nmatrix4.identity = () => {\n\treturn [\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1\n\t];\n}\n\nmatrix4.multiplyMatrices = (m, a, b) => {\n\tconst a11 = a[0], a12 = a[4], a13 = a[8], a14 = a[12];\n\tconst a21 = a[1], a22 = a[5], a23 = a[9], a24 = a[13];\n\tconst a31 = a[2], a32 = a[6], a33 = a[10], a34 = a[14];\n\tconst a41 = a[3], a42 = a[7], a43 = a[11], a44 = a[15];\n\n\tconst b11 = b[0], b12 = b[4], b13 = b[8], b14 = b[12];\n\tconst b21 = b[1], b22 = b[5], b23 = b[9], b24 = b[13];\n\tconst b31 = b[2], b32 = b[6], b33 = b[10], b34 = b[14];\n\tconst b41 = b[3], b42 = b[7], b43 = b[11], b44 = b[15];\n\n\tm[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\tm[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\tm[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\tm[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\tm[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\tm[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\tm[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\tm[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\tm[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\tm[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\tm[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\tm[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\tm[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\tm[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\tm[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\tm[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\treturn m;\n}\n\nmatrix4.invert = (m) => {\n\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\tconst n11 = m[0], n21 = m[1], n31 = m[2], n41 = m[3];\n\tconst n12 = m[4], n22 = m[5], n32 = m[6], n42 = m[7];\n\tconst n13 = m[8], n23 = m[9], n33 = m[10], n43 = m[11];\n\tconst n14 = m[12], n24 = m[13], n34 = m[14], n44 = m[15];\n\n\tconst t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;\n\tconst t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;\n\tconst t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;\n\tconst t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\tif (det === 0) return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n\tconst detInv = 1 / det;\n\n\tm[0] = t11 * detInv;\n\tm[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n\tm[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n\tm[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\n\tm[4] = t12 * detInv;\n\tm[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n\tm[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n\tm[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\n\tm[8] = t13 * detInv;\n\tm[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n\tm[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n\tm[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\n\tm[12] = t14 * detInv;\n\tm[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n\tm[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n\tm[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\n\treturn m;\n}\n\nmatrix4.compose = (position, quaternion, scale) => {\n\tconst m = matrix4.identity();\n\n\tconst x = quaternion.x, y = quaternion.y, z = quaternion.z, w = quaternion.w;\n\tconst x2 = x + x, y2 = y + y, z2 = z + z;\n\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\tconst sx = scale.x, sy = scale.y, sz = scale.z;\n\n\tm[0] = (1 - (yy + zz)) * sx;\n\tm[1] = (xy + wz) * sx;\n\tm[2] = (xz - wy) * sx;\n\tm[3] = 0;\n\n\tm[4] = (xy - wz) * sy;\n\tm[5] = (1 - (xx + zz)) * sy;\n\tm[6] = (yz + wx) * sy;\n\tm[7] = 0;\n\n\tm[8] = (xz + wy) * sz;\n\tm[9] = (yz - wx) * sz;\n\tm[10] = (1 - (xx + yy)) * sz;\n\tm[11] = 0;\n\n\tm[12] = position.x;\n\tm[13] = position.y;\n\tm[14] = position.z;\n\tm[15] = 1;\n\n\treturn m;\n}\n\nmatrix4.decompose = (m) => {\n\tconst p = vector3.zero();\n\tconst q = quaternion.identity();\n\tconst s = vector3.zero();\n\n\tlet sx = vector3.length({ x: m[0], y: m[1], z: m[2] });\n\tconst sy = vector3.length({ x: m[4], y: m[5], z: m[6] });\n\tconst sz = vector3.length({ x: m[8], y: m[9], z: m[10] });\n\n\t// if determine is negative, we need to invert one scale\n\tconst det = matrix4.determinant(m);\n\tif (det < 0) sx = - sx;\n\n\tp.x = m[12];\n\tp.y = m[13];\n\tp.z = m[14];\n\n\t// scale the rotation part\n\tlet m1 = [...m];\n\n\tconst invSX = 1 / sx;\n\tconst invSY = 1 / sy;\n\tconst invSZ = 1 / sz;\n\n\tm1[0] *= invSX;\n\tm1[1] *= invSX;\n\tm1[2] *= invSX;\n\n\tm1[4] *= invSY;\n\tm1[5] *= invSY;\n\tm1[6] *= invSY;\n\n\tm1[8] *= invSZ;\n\tm1[9] *= invSZ;\n\tm1[10] *= invSZ;\n\n\tquaternion.setFromRotationMatrix(q, m1);\n\n\ts.x = sx;\n\ts.y = sy;\n\ts.z = sz;\n\n\treturn {\n\t\tposition: p,\n\t\tquaternion: q,\n\t\tscale: s,\n\t}\n}\n\nmatrix4.determinant = (m) => {\n\tconst n11 = m[0], n12 = m[4], n13 = m[8], n14 = m[12];\n\tconst n21 = m[1], n22 = m[5], n23 = m[9], n24 = m[13];\n\tconst n31 = m[2], n32 = m[6], n33 = m[10], n34 = m[14];\n\tconst n41 = m[3], n42 = m[7], n43 = m[11], n44 = m[15];\n\n\t//TODO: make this more efficient\n\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\treturn (\n\t\tn41 * (\n\t\t\t+ n14 * n23 * n32\n\t\t\t- n13 * n24 * n32\n\t\t\t- n14 * n22 * n33\n\t\t\t+ n12 * n24 * n33\n\t\t\t+ n13 * n22 * n34\n\t\t\t- n12 * n23 * n34\n\t\t) +\n\t\tn42 * (\n\t\t\t+ n11 * n23 * n34\n\t\t\t- n11 * n24 * n33\n\t\t\t+ n14 * n21 * n33\n\t\t\t- n13 * n21 * n34\n\t\t\t+ n13 * n24 * n31\n\t\t\t- n14 * n23 * n31\n\t\t) +\n\t\tn43 * (\n\t\t\t+ n11 * n24 * n32\n\t\t\t- n11 * n22 * n34\n\t\t\t- n14 * n21 * n32\n\t\t\t+ n12 * n21 * n34\n\t\t\t+ n14 * n22 * n31\n\t\t\t- n12 * n24 * n31\n\t\t) +\n\t\tn44 * (\n\t\t\t- n13 * n22 * n31\n\t\t\t- n11 * n23 * n32\n\t\t\t+ n11 * n22 * n33\n\t\t\t+ n13 * n21 * n32\n\t\t\t- n12 * n21 * n33\n\t\t\t+ n12 * n23 * n31\n\t\t)\n\t);\n}\n\nmatrix4.lookAt = (m, eye, target, up) => {\n\tlet x, y, z;\n\n\tz = math.subtractVectors(target, eye);\n\n\tif (vector3.lengthSq(z) === 0) {\n\t\t// eye and target are in the same position\n\t\tz.z = 1;\n\t}\n\n\tz = math.normalizeVector(z);\n\tx = vector3.crossVectors(up, z);\n\n\tif (vector3.lengthSq(x) === 0) {\n\t\t// up and z are parallel\n\t\tif (Math.abs(up.z) === 1) {\n\t\t\tz.x += 0.0001;\n\t\t} else {\n\t\t\tz.z += 0.0001;\n\t\t}\n\n\t\tz = math.normalizeVector(z);\n\t\tx = vector3.crossVectors(up, z);\n\t}\n\n\tx = math.normalizeVector(x);\n\ty = vector3.crossVectors(z, x);\n\n\tm[0] = x.x; m[4] = y.x; m[8] = z.x;\n\tm[1] = x.y; m[5] = y.y; m[9] = z.y;\n\tm[2] = x.z; m[6] = y.z; m[10] = z.z;\n\n\treturn m;\n}\n\nmatrix4.localMatrixFromBot = (bot, dimension) => {\n\tconst isBillboard = bot.tags.orientationMode === 'billboard';\n\n\tconst p = {\n\t\tx: bot.tags[dimension + \"X\"] ?? 0,\n\t\ty: bot.tags[dimension + \"Y\"] ?? 0,\n\t\tz: bot.tags[dimension + \"Z\"] ?? 0,\n\t};\n\n    // If billboard, ignore rotation tags (use identity). Otherwise use tags.\n    const r = isBillboard\n        ? { x: 0, y: 0, z: 0 }\n        : {\n            x: bot.tags[dimension + \"RotationX\"] ?? 0,\n            y: bot.tags[dimension + \"RotationY\"] ?? 0,\n            z: bot.tags[dimension + \"RotationZ\"] ?? 0,\n        };\n\t\n\tconst q = quaternion.fromEuler(r);\n\tconst s = {\n\t\tx: bot.tags[\"scaleX\"] ?? 1,\n\t\ty: bot.tags[\"scaleY\"] ?? 1,\n\t\tz: bot.tags[\"scaleZ\"] ?? 1,\n\t};\n\tconst scalar = bot.tags[\"scale\"] ?? 1;\n\tvector3.multiplyScalar(s, scalar);\n\n\t// Local matrix is actually affected by parent in CasualOS.\n\t// Primarily due to the anchorPoint concept.\n\tconst parentId = bot.tags.transformer;\n\tlet parent = parentId ? getBot('id', parentId) : null;\n\n\tif (parent) {\n\t\tlet parentAnchorOffset = math.getAnchorPointOffset(parent.tags['anchorPoint'] ?? 'bottom');\n\t\tparentAnchorOffset.y *= -1; // Seems to be a bug in CasualOS, anchor point y is flipped?\n\n\t\tp.x += (parentAnchorOffset.x * 2);\n\t\tp.y += (parentAnchorOffset.y * 2);\n\t\tp.z += (parentAnchorOffset.z * 2);\n\t}\n\n\treturn matrix4.compose(p, q, s);\n}\n\nmatrix4.worldMatrixFromBot = (bot, dimension) => {\n\tlet matrixWorld = matrix4.identity();\n\tconst matrixLocal = matrix4.localMatrixFromBot(bot, dimension);\n\n\tconst parentId = bot.tags.transformer;\n\tlet parent = parentId ? getBot('id', parentId) : null;\n\n\tif (!parent) {\n\t\tmatrixWorld = matrixLocal;\n\t} else {\n\t\tconst parentMatrixWorld = matrix4.worldMatrixFromBot(parent, dimension);\n\t\tmatrixWorld = matrix4.multiplyMatrices(matrixWorld, parentMatrixWorld, matrixLocal);\n\t}\n\n\tif (bot.tags.orientationMode === 'billboard') {\n\t\tconst cameraRotation = {\n\t\t\tx: gridPortalBot.tags.cameraRotationX,\n\t\t\ty: gridPortalBot.tags.cameraRotationY,\n\t\t\tz: gridPortalBot.tags.cameraRotationZ,\n\t\t};\n\t\tlet fwd = math.getForwardDirection(cameraRotation);\n\t\tfwd = { x: -fwd.x, y: -fwd.y, z: -fwd.z };\n\t\tfwd = math.normalizeVector(fwd);\n\n\t\tif (TeleXR.math.vector3.lengthSq(fwd) < 1e-12) return matrixWorld;\n\n\t\t// decompose to keep position/scale\n\t\tconst { position: worldPos, scale: worldScale } = matrix4.decompose([...matrixWorld]);\n\n\t\t// build Z-up lookAt rotation: +Z will point along fwd\n\t\tconst lookRot = matrix4.identity();\n\t\tconst target = { x: worldPos.x + fwd.x, y: worldPos.y + fwd.y, z: worldPos.z + fwd.z };\n\t\tmatrix4.lookAt(lookRot, worldPos, target, { x: 0, y: 0, z: 1 }); // Z is up\n\n\t\tconst qLook = TeleXR.math.quaternion.setFromRotationMatrix(TeleXR.math.quaternion.identity(), lookRot);\n\t\tconst qFix = TeleXR.math.quaternion.setFromAxisAngle({ x: 1, y: 0, z: 0 }, -Math.PI / 2); // Z→Y\n\t\tconst qBill = TeleXR.math.quaternion.multiplyQuaternions(qLook, qFix);\n\n\t\tmatrixWorld = matrix4.compose(worldPos, qBill, worldScale);\n\t}\n\n\treturn matrixWorld;\n}"}},"92895f18-8fb9-456a-b24a-a7a473403fdc":{"id":"92895f18-8fb9-456a-b24a-a7a473403fdc","space":"shared","tags":{"system":"teleXR.laserDot","onAnyBotPointerEnter":"@const { bot, dimension, modality, hand } = that;\n\nif (bot.tags.teleXRLaserPointable) {\n    masks.pointing = '🧬' + JSON.stringify({\n        botId: bot.id,\n        dimension,\n        modality,\n        hand\n    })\n\n    if (tags.debug) {\n        console.log(`[${tags.system}.${tagName}] set pointing:`, tags.pointing);\n    }\n}","onAnyBotPointerExit":"@const { bot, dimension, modality, hand } = that;\n\nif (bot.tags.teleXRLaserPointable) {\n    if (masks.pointing && masks.pointing.botId === bot.id) {\n        masks.pointing = null;\n\n        if (tags.debug) {\n            console.log(`[${tags.system}.${tagName}] removed pointing:`, tags.pointing);\n        }\n    }\n}","onRemoteData":"@if (!masks.initialized) {\n    return;\n}\n\nif (that.name === 'laser_dot_update') {\n    const shoutResults = shout('onLaserDotUpdate', that.that);\n    const laserUpdated = shoutResults.length > 0 && shoutResults.some(r => r === true);\n    \n    if (!laserUpdated) {\n        // There was no laser bot that accepted the update, need to create a new one.\n\n        if (tags.debug) {\n            console.log(`[${tags.system}.${tagName}] make laser dot bot:`, that.that);\n        }\n\n        // Destroy an laser dots that are for this remote before making a new one.\n        const laserDotsForRemote = getBots(b => b.tags.remoteId === that.that.remoteId && b.tags.laserDot);\n        destroy(laserDotsForRemote);\n\n        const newLaserDot = create({\n            space: 'tempLocal',\n            form: 'sphere',\n            laserDot: true,\n            remoteId: that.that.remoteId,\n            modality: that.that.modality,\n            hand: that.that.hand,\n            scale: 0.15,\n            debug: tags.debug,\n            timeoutMS: tags.laserDotTimeoutMS,\n            pointable: false,\n            onLaserDotUpdate: `@\n                let {\n                    botId,\n                    botSpace,\n                    botType,\n                    videoFormAddress,\n                    hitPointLocal,\n                    dimension,\n                    hitUV,\n                    modality,\n                    hand,\n                    remoteId,\n                    color,\n                } = that;\n\n                // Make sure that the incoming update is for this laser's remote and input type.\n                if (modality != tags.modality ||\n                    hand != tags.hand ||\n                    remoteId != tags.remoteId\n                ) {\n                    return false;\n                }\n\n                // Find the bot that in our scene that this laser dot is supposed to be targeting.\n                let bot;\n\n                if (botSpace === 'shared' || botSpace === 'tempShared' || botSpace === 'remoteTempShared') {\n                    bot = getBot('id', botId);\n                } else if (botSpace === 'tempLocal' || botSpace === 'local') {\n                    if (botType === 'videoBot') {\n                        // Can find videoBot via the videoFormAddress.\n                        bot = getBot(b => b.tags.videoBot && b.tags.formAddress === videoFormAddress);\n                    }\n                }\n\n                if (!bot) {\n                    return false;\n                }\n\n                // Clear timeout.\n                if (thisBot.vars.timeoutId) {\n                    clearTimeout(thisBot.vars.timeoutId);\n                    thisBot.vars.timeoutId = null;\n                }\n\n                if (tags.color !== color) {\n                    tags.color = color;\n                }\n\n                if (tags.dimension !== dimension) {\n                    // Remove from current dimension.\n                    tags[tags.dimension + 'X'] = null;\n                    tags[tags.dimension + 'Y'] = null;\n                    tags[tags.dimension + 'Z'] = null;\n                    tags[tags.dimension] = null;\n\n                    // Place in new dimension.\n                    tags.dimension = dimension;\n                    tags[dimension] = true;\n                }\n\n                const matrixWorld = TeleXR.math.matrix4.worldMatrixFromBot(bot, tags.dimension);\n                const worldPosition = TeleXR.math.vector3.localToWorld(hitPointLocal, matrixWorld);\n\n                tags[dimension + 'X'] = worldPosition.x;\n                tags[dimension + 'Y'] = worldPosition.y;\n                tags[dimension + 'Z'] = worldPosition.z;\n                \n                thisBot.vars.timeoutId = setTimeout(() => destroy(thisBot), tags.timeoutMS)\n                \n                return true;\n            `,\n            onDestroy: `@\n                if (tags.debug) {\n                    console.log('[laserDot.onDestroy]');\n                }\n            `\n        })\n\n        // Directly call onLaserUpdate the first time we make a new laser dot.\n        newLaserDot.onLaserDotUpdate(that.that);\n    }\n}","debug":"false","onInitialize":"@masks.initialized = true;\n\n// Call sendLaserDot in an infinite loop.\nwhile(true) {\n    try {\n        if (thisBot.sendLaserDot) {\n            await thisBot.sendLaserDot();\n        }\n    } finally {\n        await os.sleep(tags.sendRateMS);\n    }\n}","sendLaserDot":"@if (!masks.initialized) {\n    return;\n}\n\nconst pointing = tags.pointing;\n\nif (pointing) {\n    // Infer pointer type using modality and hand.\n    let pointer;\n\n    if (pointing.modality === 'mouse') {\n        pointer = 'mouse';\n    } else if (pointing.modality === 'controller') {\n        if (pointing.hand === 'left') {\n            pointer = 'left'\n        } else {\n            pointer = 'right';\n        }\n    }\n\n    if (pointer) {\n        const pointingBot = getBot('id', pointing.botId);\n        const pointerPos = os.getPointerPosition(pointer);\n        const pointerDir = os.getPointerDirection(pointer);\n\n        const raycastResult = await os.raycast('grid', pointerPos, pointerDir);\n        const pointingBotHit = raycastResult.botIntersections.find(i => i.bot.id === pointingBot.id);\n\n        if (pointingBotHit) {\n            // Convert hit point from world space into local space of the pointingBot.\n            const matrixWorld = TeleXR.math.matrix4.worldMatrixFromBot(pointingBot, pointingBotHit.dimension);\n            const hitPointLocal = TeleXR.math.vector3.worldToLocal(pointingBotHit.point, matrixWorld);\n\n            const remoteData = {\n                botId: pointingBot.id,\n                botSpace: pointingBot.space,\n                botType: 'normal',\n                hitPointLocal,\n                dimension: pointingBotHit.dimension,\n                hitUV: pointingBotHit.uv,\n                modality: pointing.modality,\n                hand: pointing.hand,\n                remoteId: configBot.tags.id, \n                color: links.laserColor.tags.color,\n            }\n\n            if (pointingBot.tags.videoBot) {\n                // Add some extra data for videoBots.\n                remoteData.botType = 'videoBot';\n                remoteData.videoFormAddress = pointingBot.tags.formAddress;\n            }\n\n            const remoteIds = await os.remotes();\n\n            if (tags.debug) {\n                console.log(`[${tags.system}.${tagName}] sending remotes laser_dot_update:`, remoteData);\n            }\n\n            sendRemoteData(remoteIds, 'laser_dot_update', remoteData);\n        }\n    } else {\n        if (tags.debug) {\n            console.warn(`[${tags.system}.${tagName}] pointer type is unsupported.`)\n        }\n    }\n\n}","sendRateMS":"100","laserColor":"🔗a4f884cc-ae27-4302-8070-5235db6462fd","laserDotTimeoutMS":"5000"}},"a4f884cc-ae27-4302-8070-5235db6462fd":{"id":"a4f884cc-ae27-4302-8070-5235db6462fd","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","cursor":"pointer","draggable":"false","label":"laser color","labelPadding":"0.2","onClick":"@const { modality, buttonId } = that;\n\nif (modality === 'mouse' && buttonId !== 'left') {\n    return;\n}\n\nconst currentColorIndex = tags.colors.indexOf(tags.color);\n\nlet nextColorIndex = currentColorIndex + 1;\n\nif (nextColorIndex >= tags.colors.length) {\n    nextColorIndex = 0;\n}\n\nmasks.color = tags.colors[nextColorIndex];","scaleX":"1.7","scaleY":"0.7","scaleZ":"0.2","system":"teleXR.buttons.laserColor","colors":"🧬[\n    \"#F44E3B\",\n    \"#FE9200\",\n    \"#FCC400\",\n    \"#68BC00\",\n    \"#009CE0\",\n    \"#7B64FF\",\n    \"#FDA1FF\",\n    \"#FFFFFF\"\n]","color":"#7B64FF","onBotAdded":"@masks.color = tags.colors[math.randomInt(0, tags.colors.length - 1)];","buttons":"true","buttonsY":"1","buttonsX":"-2"}},"b9e32c9c-b098-4e26-bacd-159ff8c51de0":{"id":"b9e32c9c-b098-4e26-bacd-159ff8c51de0","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","system":"teleXR.clickToFocus","onAnyBotClicked":"@const { bot, modality, buttonId } = that;\n\nif (modality === 'mouse' || modality === 'touch') {\n    if (bot.tags.teleXRFocusOnClick) {\n        const zoom = bot.tags.teleXRFocusZoom ?? 80;\n        os.focusOn(bot, { zoom }).catch(() => {});\n    }\n} ","abIDOrigin":"teleXR"}},"d3fa00c2-a67f-494a-8878-dcb4bcba5a89":{"id":"d3fa00c2-a67f-494a-8878-dcb4bcba5a89","space":"shared","tags":{"system":"teleXR.buttons.buttonPortal","home":true,"formAddress":"buttons","homeX":"-1","homeY":"0","form":"portal","onEnterAR":"@thisBot.moveToWrist();","onEnterVR":"@thisBot.moveToWrist();","onExitAR":"@thisBot.moveToHome();","onExitVR":"@thisBot.moveToHome();","moveToWrist":"@if (!tags.enablePortalMove) {\n    return;\n} \n\nmasks.home = false;\nmasks[configBot.tags.leftWristPortal] = true;\nmasks[configBot.tags.leftWristPortal + 'X'] = 0;\nmasks[configBot.tags.leftWristPortal + 'Y'] = 1;","moveToHome":"@if (!tags.enablePortalMove) {\n    return;\n} \n\nmasks.home = true;\nmasks[configBot.tags.leftWristPortal] = false;\nmasks[configBot.tags.leftWristPortal + 'X'] = null;\nmasks[configBot.tags.leftWristPortal + 'Y'] = null;\n\n// CasualOS has some kind of bug with the portal form not reappearing after being added back to the home dimension here.\n// Settings the form to none and then back to portal fixes it.\nmasks.form = 'none'\nawait os.sleep(0);\nmasks.form = 'portal';","onExitVRClick":"@thisBot.moveToHome();","onExitARClick":"@thisBot.moveToHome();","enablePortalMove":"true","leftWrist":false}},"d57feff8-eeab-4b3e-a03b-d9746b1e4f8c":{"id":"d57feff8-eeab-4b3e-a03b-d9746b1e4f8c","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","color":"#F44E3B","cursor":"pointer","draggable":"false","label":"leave call","labelPadding":"0.2","onClick":"@const { modality, buttonId } = that;\r\n\r\nif (modality === 'mouse' && buttonId !== 'left') {\r\n    return;\r\n}\r\n\r\nconst inst = os.getCurrentInst();\r\n\r\nconst result = await os.leaveRoom(inst, {\r\n    endpoint: 'https://casualos.me'\r\n});\r\n\r\nconsole.log(result);","onInitialize":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.buttons = false;","onRoomJoined":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.buttons = true;","onRoomLeave":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.buttons = false;","scaleX":"1.7","scaleY":"0.7","scaleZ":"0.2","system":"teleXR.buttons.leaveRoom","abIDOrigin":"teleXR","buttonsY":"-2","buttonsX":"-3"}},"d7a564f4-1320-4e00-8aec-d3aed67fa163":{"id":"d7a564f4-1320-4e00-8aec-d3aed67fa163","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","cursor":"pointer","draggable":"false","label":"microphone","labelPadding":"0.2","onClick":"@const { modality, buttonId } = that;\r\n\r\nif (modality === 'mouse' && buttonId !== 'left') {\r\n    return;\r\n}\r\n\r\nconst inst = os.getCurrentInst();\r\nconst options = await os.getRoomOptions(inst);\r\n\r\nlet audioEnabled = false;\r\nif (options.success) {\r\n    audioEnabled = options.options.audio;\r\n}\r\n\r\nconst result = await os.setRoomOptions(inst, {\r\n    audio: !audioEnabled\r\n});\r\n\r\nconsole.log('setRoomOptions:', result);","onInitialize":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.buttons = false;","onRoomJoined":"@console.log(`[${tags.system}.${tagName}] that:`, that);\n\nconst { roomName, options } = that;\n\nmasks.buttons = true;\nthisBot.setEnabledState({ enabled: options.audio });","onRoomLeave":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.buttons = false;","onRoomOptionsChanged":"@const { roomName, options } = that;\n\nthisBot.setEnabledState({ enabled: options.audio });","scaleX":"1.7","scaleY":"0.7","scaleZ":"0.2","setEnabledState":"@const { enabled } = that;\n\nif (enabled) {\n    masks.color = null;\n    masks.label = 'disable\\nmic';\n} else {\n    masks.color = '#999999';\n    masks.label = 'enable\\nmic';\n}","system":"teleXR.buttons.toggleMic","abIDOrigin":"teleXR","buttonsY":"-3","buttonsX":"-4"}},"d7cec057-754e-4c0e-8115-ea950b8aa745":{"id":"d7cec057-754e-4c0e-8115-ea950b8aa745","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","color":"#999999","onRoomJoined":"@const { roomName, options } = that;\n\nconfigBot.tags.roomName = roomName;","onRoomLeave":"@const { roomName } = that;\n\nif (roomName === configBot.tags.roomName) {\n    configBot.tags.roomName = null;\n}","onRoomTrackSubscribed":"@console.log(`[${tags.system}.${tagName}] that:`, that);\r\n\r\nif (that.kind === 'video') {\r\n    const otherVideoBots = getBots('videoBot', true);\r\n\r\n    // Calculate a sort order for the new video bot.\r\n    let highestSortOrder = 0;\r\n    for (let videoBot of otherVideoBots) {\r\n        if (typeof videoBot.tags.sortOrder === 'number') {\r\n            if (videoBot.tags.sortOrder > highestSortOrder) {\r\n                highestSortOrder = videoBot.tags.sortOrder;\r\n            }\r\n        }\r\n    }\r\n\r\n    const newVideoBot = create({\r\n        space: 'tempLocal',\r\n        home: true,\r\n        form: 'sprite',\r\n        videoBot: true,\r\n        sortOrder: highestSortOrder + 1,\r\n        room: that.roomName,\r\n        formAddress: that.address,\r\n        videoAspectRatio: that.aspectRatio,\r\n        videoSource: that.source,\r\n        videoQuality: that.videoQuality,\r\n        isRemote: that.isRemote,\r\n        remoteId: that.remoteId,\r\n        orientationMode: 'billboard',\r\n        scaleX: that.aspectRatio > 0 ? that.aspectRatio : 1.6,\r\n        scaleY: 1,\r\n        scaleZ: 0.01,\r\n        cursor: 'pointer',\r\n        scale: 2,\r\n        teleXRFocusOnClick: true,\r\n        teleXRScaleOnClick: true,\r\n        teleXRLaserPointable: true,\r\n        teleXRScales: [1, 2, 3],\r\n        onVideoBotCreated: `@\r\n            const { newVideoBot, videoBots } = that;\r\n\r\n            if (newVideoBot === thisBot) {\r\n                thisBot.positionRefresh({ videoBots });\r\n\r\n                // Create outline bot for when speaking.\r\n                const speakingOutlineBot = create({\r\n                    space: 'tempLocal',\r\n                    transformer: thisBot.id,\r\n                    form: 'sprite',\r\n                    color: '#68BC00',\r\n                    home: false,\r\n                    homeX: 0,\r\n                    homeY: 0,\r\n                    homeZ: -1,\r\n                    scaleZ: 0.01,\r\n                    scaleX: 1.1,\r\n                    scaleY: 1.15\r\n                })\r\n\r\n                links.speakingOutlineBot = getLink(speakingOutlineBot);\r\n            }\r\n        `,\r\n        onVideoBotDestroyed: `@\r\n            const { videoBots } = that;\r\n            thisBot.positionRefresh({ videoBots });\r\n        `,\r\n        onDestroy: `@\r\n            destroy(links.speakingOutlineBot);\r\n        `,\r\n        onDrag: `@\r\n            tags.userMoved = true;\r\n        `,\r\n        onPointerEnter: `@\r\n            const { modality } = that;\r\n\r\n            if (modality === 'mouse') {\r\n                tags.mouseOver = true;\r\n\r\n                thisBot.vars.tipTimeoutId = setTimeout(async () => {\r\n                    if (tags.mouseOver && !tags.mouseClicked) {\r\n                        thisBot.vars.tipTimeoutId = null;\r\n                        thisBot.vars.tipId = await os.tip('Click to focus', undefined, undefined, 3);\r\n                    }\r\n                }, 750);\r\n            } else if (modality === 'controller') {\r\n\r\n            }\r\n        `,\r\n        onPointerExit: `@\r\n            const { modality } = that;\r\n\r\n            if (modality === 'mouse') {\r\n                tags.mouseOver = false;\r\n                tags.mouseClicked = false;\r\n\r\n                if (thisBot.vars.tipTimeoutId) {\r\n                    clearTimeout(thisBot.vars.tipTimeoutId);\r\n                    thisBot.vars.tipTimeoutId = null;\r\n                }\r\n\r\n                if (thisBot.vars.tipId) {\r\n                    os.hideTips(thisBot.vars.tipId);\r\n                    thisBot.vars.tipId = null;\r\n                }\r\n            } else if (modality === 'controller') {\r\n\r\n            }\r\n        `,\r\n        onClick: `@\r\n            const { modality, buttonId } = that;\r\n\r\n            if (modality === 'mouse' || modality === 'touch') {\r\n                tags.mouseClicked = true;\r\n            }\r\n        `,\r\n        onRoomSpeakersChanged: `@\r\n            const { speakerIds } = that;\r\n            const speaking = speakerIds.some(id => id === tags.remoteId);\r\n\r\n            if (speaking) {\r\n                if (links.speakingOutlineBot) {\r\n                    links.speakingOutlineBot.tags.home = true;\r\n                }\r\n            } else {\r\n                if (links.speakingOutlineBot) {\r\n                    links.speakingOutlineBot.tags.home = false;\r\n                }\r\n            }\r\n        `,\r\n        positionRefresh: `@\r\n            if (tags.userMoved) {\r\n                return;\r\n            }\r\n\r\n            const { videoBots } = that;\r\n\r\n            const index = videoBots.findIndex(b => b === thisBot);\r\n\r\n            tags.homeX = 5;\r\n            tags.homeY = -5 + (index * (tags.scaleX * tags.scale));\r\n        `,\r\n    });\r\n\r\n    const videoBots = getBots('videoBot', true);\r\n    sortBotsAZ(videoBots, 'sortOrder');\r\n\r\n    shout('onVideoBotCreated', { newVideoBot, videoBots });\r\n}","onRoomTrackUnsubscribed":"@console.log(`[${tags.system}.${tagName}] that:`, that);\r\n\r\nconst bots = getBots('formAddress', that.address);\r\n\r\nif (bots && bots.length) {\r\n    destroy(bots);\r\n    \r\n    const videoBots = getBots('videoBot', true);\r\n    sortBotsAZ(videoBots, 'sortOrder');\r\n\r\n    shout('onVideoBotDestroyed', { videoBots });\r\n}","system":"teleXR.roomListener","abIDOrigin":"teleXR"}},"edae6f5c-50a5-48e8-a829-077925844ab6":{"id":"edae6f5c-50a5-48e8-a829-077925844ab6","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","onDestroy":"@globalThis.sortAZ = undefined;\nglobalThis.sortBotsAZ = undefined;\nglobalThis.sortZA = undefined;\nglobalThis.sortBotsZA = undefined;","onInitialize":"@function _sort(array, propertyKey, dir) { \n    array.sort((a, b) => {\n        let valueA = Number(a[propertyKey]);\n        let valueB = Number(b[propertyKey]);\n        \n        if (Number.isNaN(valueA)) {\n            valueA = 0;\n        }\n        if (Number.isNaN(valueB)) {\n            valueB = 0;\n        }\n        \n        if (dir === 'az') {\n            return valueA > valueB ? 1 : -1;\n        } else {\n            return valueA < valueB ? 1 : -1;\n        }\n    });\n}\n\nfunction _sortBots(array, tag, dir) {\n    array.sort((a, b) => {\n        let valueA = Number(a.tags[tag]);\n        let valueB = Number(b.tags[tag]);\n        \n        if (Number.isNaN(valueA)) {\n            valueA = 0;\n        }\n        if (Number.isNaN(valueB)) {\n            valueB = 0;\n        }\n\n        if (dir === 'az') {\n            return valueA > valueB ? 1 : -1;\n        } else {\n            return valueA < valueB ? 1 : -1;\n        }\n    });\n}\n\nfunction sortAZ(array, propertyKey) {\n    return _sort(array, propertyKey, 'az');\n}\n\nfunction sortZA(array, propertyKey) {\n    return _sort(array, propertyKey, 'za');\n}\n\nfunction sortBotsAZ(array, tag) {\n    return _sortBots(array, tag, 'az');\n}\n\nfunction sortBotsZA(array, tag) {\n    return _sortBots(array, tag, 'za');\n}\n\nglobalThis.sortAZ = sortAZ;\nglobalThis.sortBotsAZ = sortBotsAZ;\nglobalThis.sortZA = sortZA;\nglobalThis.sortBotsZA = sortBotsZA;","system":"teleXR.sortUtils","abIDOrigin":"teleXR"}}}}