{"version":1,"state":{"01ed476b-4684-436d-b4d0-34475ed565de":{"id":"01ed476b-4684-436d-b4d0-34475ed565de","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","cursor":"pointer","draggable":"false","home":true,"homeX":"-3","homeZ":0,"label":"add image","labelPadding":"0.2","onClick":"@if (tags.busy) {\n    return;\n}\n\nconst inXR = configBot.tags.inAR || configBot.tags.inVR;\n\nif (inXR) {\n    return;\n}\n\nconst SUPPORTED_FILE_EXTS = [\n    'jpg',\n    'jpeg',\n    'webp',\n    'gif',\n    'png',\n    'svg',\n    // 'glb',\n    // 'gltf',\n    // 'mp3',\n    // 'mp4',\n]\n\nfunction getFileExtension(filename) {\n    if (typeof filename !== 'string') return '';\n    const parts = filename.split('.');\n    return parts.length > 1 ? parts.pop().toLowerCase() : '';\n}\n\nconst selectedFiles = await os.showUploadFiles();\nconsole.log(`[${tags.system}.${tagName}] selectedFiles:`, selectedFiles);\n\nconst filteredFiles = selectedFiles.filter((file) => {\n    const ext = getFileExtension(file.name);\n\n    if (ext) {\n        return SUPPORTED_FILE_EXTS.includes(ext);\n    } else {\n        return false;\n    }\n})\nconsole.log(`[${tags.system}.${tagName}] filteredFiles:`, filteredFiles);\n\nif (filteredFiles.length === 0 && selectedFiles.length > 0) {\n    os.toast(`The following files are supported: ${SUPPORTED_FILE_EXTS.join(', ')}`, 5);\n    return;\n}\n\nmasks.label = 'uploading...';\nmasks.color = '#999999';\nmasks.busy = true;\n\ntry {\n    for (let i = 0; i < filteredFiles.length; i++) {\n        const result = await links.mediaUpload.requestMediaUpload(filteredFiles[i])\n        console.log(`[${tags.system}.${tagName}] requestMediaUpload result:`, result);\n    }\n} finally {\n    masks.label = null;\n    masks.color = null;\n    masks.busy = null; \n}","scaleX":"1.9","scaleY":"0.9","scaleZ":"0.3","system":"teleXR.buttons.addImage","abIDOrigin":"teleXR","homeY":"-1","mediaUpload":"üîó057808ed-1c71-461e-8871-daa571c75a59"}},"057808ed-1c71-461e-8871-daa571c75a59":{"id":"057808ed-1c71-461e-8871-daa571c75a59","space":"shared","tags":{"system":"teleXR.mediaUpload","requestMediaUpload":"@console.log(`[${tags.system}.${tagName}] that:`, that);\n\nassert(typeof that === 'object' && that.data && that.name && that.size, `[${tags.system}.${tagName}] parameter must be a file object`);\n\nif (authBot) {\n    // User is logged in, they can upload it themselves.\n    // const result = links.store.abPublishFile({ file: that.data, })\n    const uploadResult = await links.input.onFileUpload({ file: that, copyUrl: false });\n    let url = uploadResult.url || uploadResult.existingFileUrl;\n\n    if (url) {\n        return { success: true, url }\n    } else {\n        return { success: false }\n    }\n} else {\n    // Find a remote that will upload the file for you.\n    let requestId = uuid();\n    let fileBase64 = bytes.toBase64String(that.data);\n    let remoteIds = await os.remotes();\n    const RESPONSE_TIMEOUT_MS = 30000; // 30 seconds.\n\n    async function waitForResponse() {\n        return new Promise((resolve) => {\n            const done = (result) => {\n                clearTimeout(timer);\n                thisBot.vars.onRequestMediaUploadResponse = null;\n                resolve(result);\n            }\n\n            const timer = setTimeout(() => done({ success: false }), RESPONSE_TIMEOUT_MS);\n\n            thisBot.vars.onRequestMediaUploadResponse = (data) => {\n                if (data.requestId === requestId) {\n                    console.log(`[${tags.system}.${tagName}] response received from remote ${data.remoteId}. response: ${JSON.stringify(data)}`);\n                    done(data);\n                }\n            }\n        })\n    }\n\n    for (let remoteId of remoteIds) {\n        if (remoteId === configBot.id) {\n            // Skip self.\n            continue;\n        }\n\n        console.log(`[${tags.system}.${tagName}] requesting remote ${remoteId} to upload media file ${that.name}.`);\n        \n        const waitForResponsePromise = waitForResponse();\n\n        // Send upload request to remote.\n        sendRemoteData(remoteId, 'request_media_upload', { \n            fileBase64, \n            size: that.size, \n            name: that.name, \n            mimeType: that.mimeType, \n            requestId\n        });\n\n        const response = await waitForResponsePromise;\n\n        if (response.success || response.url) {\n            response.success = true; // Weird quirk of ab's onFileUpload.\n\n            return response;\n        } else {\n            // Going to try next remote.\n        }\n    }\n\n    // No remotes could upload the media.\n    console.log(`[${tags.system}.${tagName}] no remotes could upload the media.`);\n    return { success: false }\n}","onRemoteData":"@if (that.name === 'request_media_upload') {\n    console.log(`[${tags.system}.${tagName}] request_media_upload received. event data:`, that.that);\n\n    const response = { success: null, url: null, requestId: that.that.requestId };\n\n    if (authBot) {\n        try {\n            console.log(`[${tags.system}.${tagName}] starting upload of file ${that.that.name}.`);\n            const fileArrayBuffer = bytes.fromBase64String(that.that.fileBase64).buffer;\n            const file = {\n                ...that.that,\n                data: fileArrayBuffer,\n            }\n\n            const uploadResult = await links.input.onFileUpload({ file, copyUrl: false });\n            const url = uploadResult.url || uploadResult.existingFileUrl;\n\n            console.log(`[${tags.system}.${tagName}] upload result:`, uploadResult);\n\n            if (url) {\n                response.success = true;\n                response.url = url;\n            } else {\n                response.success = false;\n            }\n        } finally {\n            response.success = false;\n        }\n    } else {\n        response.success = false;\n    }\n\n    // Inform remote of result.\n    console.log(`[${tags.system}.${tagName}] sending request_media_upload_response:`, response);\n    sendRemoteData(that.remoteId, 'request_media_upload_response', response);\n\n} else if (that.name === 'request_media_upload_response') {\n    if (thisBot.vars.onRequestMediaUploadResponse) {\n        thisBot.vars.onRequestMediaUploadResponse(that.that);\n    }\n}","store":"üîó76af0491-3919-4984-aa82-22c742f4263f","input":"üîóf8602878-c2ef-48bd-85a0-8d6351eb4120","onAnyCreate":"@const { bot } = that;\n\nif (bot.tags.abFileUpload) {\n    // Mark each bot created with onFileUpload as focusable and scaleable.\n    bot.tags.teleXRFocusOnClick = true;\n    bot.tags.teleXRScaleOnClick = true;\n}"}},"1d366bdf-5593-45f7-9b04-56a9c394ee1a":{"id":"1d366bdf-5593-45f7-9b04-56a9c394ee1a","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","cursor":"pointer","draggable":"false","home":true,"homeX":"-5","homeY":"-5","homeZ":0,"labelPadding":"0.2","onClick":"@const inst = os.getCurrentInst();\r\nconst options = await os.getRoomOptions(inst);\r\n\r\nlet videoEnabled = false;\r\nif (options.success) {\r\n    videoEnabled = options.options.video;\r\n}\r\n\r\nconst result = await os.setRoomOptions(inst, {\r\n    video: !videoEnabled\r\n})\r\n\r\nconsole.log('setRoomOptions:', result);","onInitialize":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.home = false;","onRoomJoined":"@console.log(`[${tags.system}.${tagName}] that:`, that);\n\nconst { roomName, options } = that;\n\nmasks.home = true;\nthisBot.setEnabledState({ enabled: options.video });","onRoomLeave":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.home = false;","onRoomOptionsChanged":"@const { roomName, options } = that;\n\nthisBot.setEnabledState({ enabled: options.video });","scaleX":"1.9","scaleY":"0.9","scaleZ":"0.3","setEnabledState":"@const { enabled } = that;\n\nif (enabled) {\n    masks.color = null;\n    masks.label = 'disable\\ncamera';\n} else {\n    masks.color = '#999999';\n    masks.label = 'enable\\ncamera';\n}","system":"teleXR.buttons.toggleCamera","abIDOrigin":"teleXR"}},"358a488e-5864-4e3c-96c7-30b565fc1800":{"id":"358a488e-5864-4e3c-96c7-30b565fc1800","space":"shared","tags":{"system":"teleXR.clickToScale","onAnyBotClicked":"@const { bot, modality, buttonId } = that;\n\nif (modality === 'controller') {\n    if (bot.tags.teleXRScaleOnClick) {\n        const scales = bot.tags.teleXRScales ?? [1, 2, 3];\n        const currentScaleIndex = scales.findIndex(s => s === (bot.tags.scale ?? 1));\n        console.log('scales', scales);\n        console.log('currentScaleIndex', currentScaleIndex);\n\n        let nextScaleIndex = currentScaleIndex + 1;\n        if (nextScaleIndex >= scales.length) {\n            nextScaleIndex = 0;\n        }\n        console.log('nextScaleIndex', nextScaleIndex);\n\n        bot.masks.scale = scales[nextScaleIndex];\n    }\n} "}},"52b57232-d948-4965-8ef2-4bd5400cc30d":{"id":"52b57232-d948-4965-8ef2-4bd5400cc30d","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","home":"false","homeSortOrder":0,"homeX":0,"homeY":0,"initialize":"@if (!masks.initialized) {\n    masks.initialized = true;\n    shout('onInitialize');\n}","label":"manager","onEggHatch":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nthisBot.initialize();","onInitialize":"@const PANNABLE_AREA_SIZE = 12;\n\ngridPortalBot.masks.portalPannableMin = `‚û°Ô∏è${-PANNABLE_AREA_SIZE},${-PANNABLE_AREA_SIZE}`;\ngridPortalBot.masks.portalPannableMax = `‚û°Ô∏è${PANNABLE_AREA_SIZE},${PANNABLE_AREA_SIZE}`;\ngridPortalBot.masks.portalColor = \"#0c254e\";\n\nconfigBot.tags.leftWristPortal = 'leftWrist';\n\nleftWristPortalBot.tags.portalGridScale = 0.025;","onInstJoined":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nthisBot.initialize();","system":"teleXR.init","abIDOrigin":"teleXR","onRemoteABAdded":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nthisBot.initialize();"}},"5b99dfcb-73fc-4a10-ac1a-4115b55192ce":{"id":"5b99dfcb-73fc-4a10-ac1a-4115b55192ce","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","cursor":"pointer","draggable":"false","home":true,"homeX":-3,"homeY":-3,"homeZ":0,"label":"join call","labelPadding":"0.2","onClick":"@const inst = os.getCurrentInst();\r\n\r\nconst result = await os.joinRoom(inst, {\r\n    endpoint: 'https://casualos.me'\r\n})\r\n\r\nconsole.log(result);","onInitialize":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.home = true;","onRoomJoined":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.home = false;","onRoomLeave":"@console.log(`[${tags.system}.${tagName}] that:`, that);\n\nconst { roomName } = that;\n\nconfigBot.tags.roomName = null;\nmasks.home = true;","scaleX":"1.9","scaleY":"0.9","scaleZ":"0.3","system":"teleXR.buttons.joinRoom","abIDOrigin":"teleXR","color":"#FCC400"}},"7a00b862-4aed-43db-8a7a-2bf9dacbb957":{"id":"7a00b862-4aed-43db-8a7a-2bf9dacbb957","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","cursor":"pointer","draggable":"false","home":true,"homeX":-3,"homeY":1,"homeZ":0,"label":"use headset (webxr)","labelPadding":"0.2","onClick":"@if (configBot.tags.inAR) {\n    os.disableAR();\n    return;\n} else if (configBot.tags.inVR) {\n    os.disableVR();\n    return;\n}\n\nif (os.device().supportsAR) {\n    os.enableAR();\n} else if (os.device().supportsVR) {\n    os.enableVR();\n} else {\n    os.toast('WebXR is not available on this device.');\n}","onEnterAR":"@configBot.tags.inAR = true;\nmasks.label = 'Exit AR';","onExitAR":"@configBot.tags.inAR = false;\nmasks.label = null;","scaleX":"1.9","scaleY":"0.9","scaleZ":"0.3","system":"teleXR.buttons.toggleXR","onEnterVR":"@configBot.tags.inVR = true;\nmasks.label = 'Exit VR';","onExitVR":"@configBot.tags.inVR = false;\nmasks.label = null;"}},"852ee16e-9e94-473b-b8b7-a3695f9115eb":{"id":"852ee16e-9e94-473b-b8b7-a3695f9115eb","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","color":"#FFFFFF","cursor":"pointer","draggable":"false","home":true,"homeX":"-1","homeY":"-5","label":"screen share","labelPadding":"0.2","onClick":"@const inst = os.getCurrentInst();\nconst options = await os.getRoomOptions(inst);\n\nlet screenEnabled = false;\nif (options.success) {\n    screenEnabled = options.options.screen;\n}\n\nconst result = await os.setRoomOptions(inst, {\n    screen: !screenEnabled\n})\n\nconsole.log('setRoomOptions:', result);","onInitialize":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.home = false;","onRoomJoined":"@console.log(`[${tags.system}.${tagName}] that:`, that);\n\nconst { roomName, options } = that;\n\nmasks.home = true;\nthisBot.setEnabledState({ enabled: options.screen });","onRoomLeave":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.home = false;","onRoomOptionsChanged":"@const { roomName, options } = that;\n\nthisBot.setEnabledState({ enabled: options.screen });","scaleX":"1.9","scaleY":"0.9","scaleZ":"0.3","setEnabledState":"@const { enabled } = that;\n\nif (enabled) {\n    masks.color = null;\n    masks.label = 'disable\\nscreen share';\n} else {\n    masks.color = '#999999';\n    masks.label = 'enable\\nscreen share';\n}","system":"teleXR.buttons.toggleScreenShare","abIDOrigin":"teleXR"}},"92895f18-8fb9-456a-b24a-a7a473403fdc":{"id":"92895f18-8fb9-456a-b24a-a7a473403fdc","space":"shared","tags":{"system":"teleXR.laserDot","onAnyBotPointerEnter":"@const { bot, dimension, modality, hand } = that;\n\nif (bot.tags.teleXRLaserPointable) {\n    masks.pointing = 'üß¨' + JSON.stringify({\n        botId: bot.id,\n        dimension,\n        modality,\n        hand\n    })\n\n    if (tags.debug) {\n        console.log(`[${tags.system}.${tagName}] set pointing:`, tags.pointing);\n    }\n}","onAnyBotPointerExit":"@const { bot, dimension, modality, hand } = that;\n\nif (bot.tags.teleXRLaserPointable) {\n    if (masks.pointing && masks.pointing.botId === bot.id) {\n        masks.pointing = null;\n\n        if (tags.debug) {\n            console.log(`[${tags.system}.${tagName}] removed pointing:`, tags.pointing);\n        }\n    }\n}","onRemoteData":"@if (that.name === 'laser_dot_update') {\n    const shoutResults = shout('onLaserDotUpdate', that.that);\n    const laserUpdated = shoutResults.length > 0 && shoutResults.some(r => r === true);\n    \n    if (!laserUpdated) {\n        // There was no laser bot that accepted the update, need to create a new one.\n\n        if (tags.debug) {\n            console.log(`[${tags.system}.${tagName}] make laser dot bot:`, that.that);\n        }\n\n        const newLaserDot = create({\n            space: 'tempLocal',\n            form: 'sphere',\n            remoteId: that.that.remoteId,\n            modality: that.that.modality,\n            hand: that.that.hand,\n            scale: 0.5,\n            debug: tags.debug,\n            timeoutMS: tags.laserDotTimeoutMS,\n            onLaserDotUpdate: `@\n                const { botId, dimension, modality, hand, remoteId, color } = that;\n\n                // Make sure that the incoming update is for this laser's remote and input type.\n                if (modality === tags.modality &&\n                    hand === tags.hand &&\n                    remoteId === tags.remoteId\n                ) {\n                    return false;\n                }\n\n                console.log('[laserDot.onLaserDotUpdate] update receieved', that);\n\n                // Clear timeout.\n                if (thisBot.vars.timeoutId) {\n                    clearTimeout(thisBot.vars.timeoutId);\n                    thisBot.vars.timeoutId = null;\n                }\n\n                if (tags.color !== color) {\n                    tags.color = color;\n                }\n\n                if (tags.dimension !== dimension) {\n                    tags[tags.dimension + 'X'] = null;\n                    tags[tags.dimension + 'Y'] = null;\n                    tags[tags.dimension + 'Z'] = null;\n                    tags[tags.dimension] = null;\n\n                    tags.dimension = dimension;\n                    tags[dimension] = true;\n                }\n\n                tags[dimension + 'X'] = 6;\n                tags[dimension + 'Y'] = 0;\n                tags[dimension + 'Z'] = 0;\n                \n                thisBot.vars.timeoutId = setTimeout(() => destroy(thisBot), tags.timeoutMS)\n                \n                return true;\n            `,\n            onDestroy: `@\n                if (tags.debug) {\n                    console.log('[laserDot.onDestroy]');\n                }\n            `\n        })\n\n        // Directly call onLaserUpdate the first time we make a new laser dot.\n        newLaserDot.onLaserDotUpdate(that.that);\n    }\n}","debug":"true","onInitialize":"@thisBot.sendLaserDot();","sendLaserDot":"@const pointing = tags.pointing;\n\nif (pointing) {\n    \n    if (tags.debug) {\n        console.log(`[${tags.system}.${tagName}] pointing:`, pointing);\n    }\n\n    const remoteIds = await os.remotes();\n\n    const remoteData = {\n        ...pointing,\n        remoteId: configBot.tags.id, \n        color: 'red'\n    }\n\n    if (tags.debug) {\n        console.log(`[${tags.system}.${tagName}] sending remotes laser_dot_update:`, remoteData);\n    }\n\n    sendRemoteData(remoteIds, 'laser_dot_update', remoteData);\n}\n\nawait os.sleep(tags.sendRateMS);\nthisBot.sendLaserDot();","sendRateMS":"100","laserDotTimeoutMS":"1000"}},"b9e32c9c-b098-4e26-bacd-159ff8c51de0":{"id":"b9e32c9c-b098-4e26-bacd-159ff8c51de0","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","system":"teleXR.clickToFocus","onAnyBotClicked":"@const { bot, modality, buttonId } = that;\n\nif (modality === 'mouse' || modality === 'touch') {\n    if (bot.tags.teleXRFocusOnClick) {\n        const zoom = bot.tags.teleXRFocusZoom ?? 80;\n        os.focusOn(bot, { zoom }).catch(() => {});\n    }\n} ","abIDOrigin":"teleXR"}},"d57feff8-eeab-4b3e-a03b-d9746b1e4f8c":{"id":"d57feff8-eeab-4b3e-a03b-d9746b1e4f8c","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","color":"#F44E3B","cursor":"pointer","draggable":"false","home":true,"homeX":-3,"homeY":"-3","homeZ":0,"label":"leave call","labelPadding":"0.2","onClick":"@const inst = os.getCurrentInst();\r\n\r\nconst result = await os.leaveRoom(inst, {\r\n    endpoint: 'https://casualos.me'\r\n});\r\n\r\nconsole.log(result);","onInitialize":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.home = false;","onRoomJoined":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.home = true;","onRoomLeave":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.home = false;","scaleX":"1.9","scaleY":"0.9","scaleZ":"0.3","system":"teleXR.buttons.leaveRoom","abIDOrigin":"teleXR"}},"d7a564f4-1320-4e00-8aec-d3aed67fa163":{"id":"d7a564f4-1320-4e00-8aec-d3aed67fa163","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","cursor":"pointer","draggable":"false","home":true,"homeX":"-3","homeY":"-5","homeZ":0,"label":"microphone","labelPadding":"0.2","onClick":"@const inst = os.getCurrentInst();\r\nconst options = await os.getRoomOptions(inst);\r\n\r\nlet audioEnabled = false;\r\nif (options.success) {\r\n    audioEnabled = options.options.audio;\r\n}\r\n\r\nconst result = await os.setRoomOptions(inst, {\r\n    audio: !audioEnabled\r\n});\r\n\r\nconsole.log('setRoomOptions:', result);","onInitialize":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.home = false;","onRoomJoined":"@console.log(`[${tags.system}.${tagName}] that:`, that);\n\nconst { roomName, options } = that;\n\nmasks.home = true;\nthisBot.setEnabledState({ enabled: options.audio });","onRoomLeave":"@console.log(`[${tags.system}.${tagName}] that:`, that);\nmasks.home = false;","onRoomOptionsChanged":"@const { roomName, options } = that;\n\nthisBot.setEnabledState({ enabled: options.audio });","scaleX":"1.9","scaleY":"0.9","scaleZ":"0.3","setEnabledState":"@const { enabled } = that;\n\nif (enabled) {\n    masks.color = null;\n    masks.label = 'disable\\nmic';\n} else {\n    masks.color = '#999999';\n    masks.label = 'enable\\nmic';\n}","system":"teleXR.buttons.toggleMic","abIDOrigin":"teleXR"}},"d7cec057-754e-4c0e-8115-ea950b8aa745":{"id":"d7cec057-754e-4c0e-8115-ea950b8aa745","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","color":"#999999","onRoomJoined":"@const { roomName, options } = that;\n\nconfigBot.tags.roomName = roomName;","onRoomLeave":"@const { roomName } = that;\n\nif (roomName === configBot.tags.roomName) {\n    configBot.tags.roomName = null;\n}","onRoomTrackSubscribed":"@console.log(`[${tags.system}.${tagName}] that:`, that);\r\n\r\nif (that.kind === 'video') {\r\n    const otherVideoBots = getBots('videoBot', true);\r\n\r\n    // Calculate a sort order for the new video bot.\r\n    let highestSortOrder = 0;\r\n    for (let videoBot of otherVideoBots) {\r\n        if (typeof videoBot.tags.sortOrder === 'number') {\r\n            if (videoBot.tags.sortOrder > highestSortOrder) {\r\n                highestSortOrder = videoBot.tags.sortOrder;\r\n            }\r\n        }\r\n    }\r\n\r\n    const newVideoBot = create({\r\n        space: 'tempLocal',\r\n        home: true,\r\n        form: 'sprite',\r\n        videoBot: true,\r\n        sortOrder: highestSortOrder + 1,\r\n        room: that.roomName,\r\n        formAddress: that.address,\r\n        videoAspectRatio: that.aspectRatio,\r\n        videoSource: that.source,\r\n        videoQuality: that.videoQuality,\r\n        isRemote: that.isRemote,\r\n        remoteId: that.remoteId,\r\n        orientationMode: 'billboard',\r\n        scaleX: that.aspectRatio > 0 ? that.aspectRatio : 1.6,\r\n        scaleY: 1,\r\n        scaleZ: 0.01,\r\n        cursor: 'pointer',\r\n        scale: 2,\r\n        teleXRFocusOnClick: true,\r\n        teleXRScaleOnClick: true,\r\n        teleXRScales: [1, 2, 3],\r\n        onVideoBotCreated: `@\r\n            const { newVideoBot, videoBots } = that;\r\n\r\n            if (newVideoBot === thisBot) {\r\n                thisBot.positionRefresh({ videoBots });\r\n\r\n                // Create outline bot for when speaking.\r\n                const speakingOutlineBot = create({\r\n                    space: 'tempLocal',\r\n                    transformer: thisBot.id,\r\n                    form: 'sprite',\r\n                    color: '#68BC00',\r\n                    home: false,\r\n                    homeX: 0,\r\n                    homeY: 0,\r\n                    homeZ: -1,\r\n                    scaleZ: 0.01,\r\n                    scaleX: 1.1,\r\n                    scaleY: 1.15\r\n                })\r\n\r\n                links.speakingOutlineBot = getLink(speakingOutlineBot);\r\n            }\r\n        `,\r\n        onVideoBotDestroyed: `@\r\n            const { videoBots } = that;\r\n            thisBot.positionRefresh({ videoBots });\r\n        `,\r\n        onDestroy: `@\r\n            destroy(links.speakingOutlineBot);\r\n        `,\r\n        onDrag: `@\r\n            tags.userMoved = true;\r\n        `,\r\n        onPointerEnter: `@\r\n            const { modality } = that;\r\n\r\n            if (modality === 'mouse') {\r\n                tags.mouseOver = true;\r\n\r\n                thisBot.vars.tipTimeoutId = setTimeout(async () => {\r\n                    if (tags.mouseOver && !tags.mouseClicked) {\r\n                        thisBot.vars.tipTimeoutId = null;\r\n                        thisBot.vars.tipId = await os.tip('Click to focus', undefined, undefined, 3);\r\n                    }\r\n                }, 750);\r\n            } else if (modality === 'controller') {\r\n\r\n            }\r\n        `,\r\n        onPointerExit: `@\r\n            const { modality } = that;\r\n\r\n            if (modality === 'mouse') {\r\n                tags.mouseOver = false;\r\n                tags.mouseClicked = false;\r\n\r\n                if (thisBot.vars.tipTimeoutId) {\r\n                    clearTimeout(thisBot.vars.tipTimeoutId);\r\n                    thisBot.vars.tipTimeoutId = null;\r\n                }\r\n\r\n                if (thisBot.vars.tipId) {\r\n                    os.hideTips(thisBot.vars.tipId);\r\n                    thisBot.vars.tipId = null;\r\n                }\r\n            } else if (modality === 'controller') {\r\n\r\n            }\r\n        `,\r\n        onClick: `@\r\n            const { modality, buttonId } = that;\r\n\r\n            if (modality === 'mouse' || modality === 'touch') {\r\n                tags.mouseClicked = true;\r\n            }\r\n        `,\r\n        onRoomSpeakersChanged: `@\r\n            const { speakerIds } = that;\r\n            const speaking = speakerIds.some(id => id === tags.remoteId);\r\n\r\n            if (speaking) {\r\n                if (links.speakingOutlineBot) {\r\n                    links.speakingOutlineBot.tags.home = true;\r\n                }\r\n            } else {\r\n                if (links.speakingOutlineBot) {\r\n                    links.speakingOutlineBot.tags.home = false;\r\n                }\r\n            }\r\n        `,\r\n        positionRefresh: `@\r\n            if (tags.userMoved) {\r\n                return;\r\n            }\r\n\r\n            const { videoBots } = that;\r\n\r\n            const index = videoBots.findIndex(b => b === thisBot);\r\n\r\n            tags.homeX = 5;\r\n            tags.homeY = -5 + (index * (tags.scaleX * tags.scale));\r\n        `,\r\n    });\r\n\r\n    const videoBots = getBots('videoBot', true);\r\n    sortBotsAZ(videoBots, 'sortOrder');\r\n\r\n    shout('onVideoBotCreated', { newVideoBot, videoBots });\r\n}","onRoomTrackUnsubscribed":"@console.log(`[${tags.system}.${tagName}] that:`, that);\r\n\r\nconst bots = getBots('formAddress', that.address);\r\n\r\nif (bots && bots.length) {\r\n    destroy(bots);\r\n    \r\n    const videoBots = getBots('videoBot', true);\r\n    sortBotsAZ(videoBots, 'sortOrder');\r\n\r\n    shout('onVideoBotDestroyed', { videoBots });\r\n}","system":"teleXR.roomListener","abIDOrigin":"teleXR"}},"edae6f5c-50a5-48e8-a829-077925844ab6":{"id":"edae6f5c-50a5-48e8-a829-077925844ab6","space":"shared","tags":{"creator":"34c3c210-5bf1-49cf-b151-ee2d07f0e673","onDestroy":"@globalThis.sortAZ = undefined;\nglobalThis.sortBotsAZ = undefined;\nglobalThis.sortZA = undefined;\nglobalThis.sortBotsZA = undefined;","onInitialize":"@function _sort(array, propertyKey, dir) { \n    array.sort((a, b) => {\n        let valueA = Number(a[propertyKey]);\n        let valueB = Number(b[propertyKey]);\n        \n        if (Number.isNaN(valueA)) {\n            valueA = 0;\n        }\n        if (Number.isNaN(valueB)) {\n            valueB = 0;\n        }\n        \n        if (dir === 'az') {\n            return valueA > valueB ? 1 : -1;\n        } else {\n            return valueA < valueB ? 1 : -1;\n        }\n    });\n}\n\nfunction _sortBots(array, tag, dir) {\n    array.sort((a, b) => {\n        let valueA = Number(a.tags[tag]);\n        let valueB = Number(b.tags[tag]);\n        \n        if (Number.isNaN(valueA)) {\n            valueA = 0;\n        }\n        if (Number.isNaN(valueB)) {\n            valueB = 0;\n        }\n\n        if (dir === 'az') {\n            return valueA > valueB ? 1 : -1;\n        } else {\n            return valueA < valueB ? 1 : -1;\n        }\n    });\n}\n\nfunction sortAZ(array, propertyKey) {\n    return _sort(array, propertyKey, 'az');\n}\n\nfunction sortZA(array, propertyKey) {\n    return _sort(array, propertyKey, 'za');\n}\n\nfunction sortBotsAZ(array, tag) {\n    return _sortBots(array, tag, 'az');\n}\n\nfunction sortBotsZA(array, tag) {\n    return _sortBots(array, tag, 'za');\n}\n\nglobalThis.sortAZ = sortAZ;\nglobalThis.sortBotsAZ = sortBotsAZ;\nglobalThis.sortZA = sortZA;\nglobalThis.sortBotsZA = sortBotsZA;","system":"teleXR.sortUtils","abIDOrigin":"teleXR"}}}}