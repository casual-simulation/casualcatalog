{"version":1,"state":{"f409d5a2-6134-4ac8-9053-05cbb1156d53":{"id":"f409d5a2-6134-4ac8-9053-05cbb1156d53","space":"shared","tags":{"system":"uuab_toolbox.tools.uuabConfigurator","onClick":"@thisBot.showUUABSetupMenu();","color":"#bb78d6","cursor":"pointer","abVersion":"10.10","abIDOrigin":"uuabConfigurator","onAnyBotsRemoved":"@const { botIDs } = that;\r\n\r\nif (botIDs.includes(thisBot.id)) {\r\n    shout(\"clearUUABSetupMenu\");\r\n}","onBotAdded":"@let waitTime = 0;\r\n\r\nwhile(!globalThis.ab?.links.bot_factory) {\r\n    if (waitTime >= 5000) {\r\n        return;\r\n    }\r\n    \r\n    await os.sleep(250);\r\n    waitTime += 250;\r\n}\r\n\r\nmasks.ready = true;\r\n\r\nthisBot.updateBillboardLabel();","updateBillboardLabel":"@if (thisBot.vars.billboardLabelBot) {\r\n    destroy(thisBot.vars.billboardLabelBot);\r\n    thisBot.vars.billboardLabelBot = null;\r\n}\r\n\r\nthisBot.vars.billboardLabelBot = ab.links.bot_factory.abCreateBillboardLabel({ \r\n    bot: thisBot, \r\n    label: tags.uuabSetupLabel,\r\n    color: tags.uuabSetupLabelFloatingBackgroundColor,\r\n    dimension: configBot.tags.mapPortal ?? configBot.tags.gridPortal ?? 'home',\r\n    // botLabelMargin: 0,\r\n    labelColor: tags.uuabSetupLabelColor,\r\n    space: 'tempLocal',\r\n})","strokeColor":"#664275","onGridClick":"@shout(\"clearUUABSetupMenu\");","homeWorldBot":"true","channelURL":"https://dev.auxplayer.com/?uuab=erTestUUAB","onABArtifactCollectShards":"@const shard: ABArtifactShard = {\r\n    data: {\r\n        bios: tags.chosenBIOS,\r\n        instName: tags.chosenInstName,\r\n        defaultPattern: tags.chosenPattern,\r\n        defaultPatternStudio: tags.chosenPatternStudio,\r\n        uuabName: tags.chosenUUABName,\r\n        onUUABLoaded: tags.uuab_onUUABLoaded,\r\n        uuabSetupLabel: tags.uuabSetupLabel,\r\n        prevBotID: thisBot.id,\r\n        dimensionData: {\r\n            dimension: [ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension]: tags[ab.links.remember.tags.abActiveDimension],\r\n            [ab.links.remember.tags.abActiveDimension + 'X']: tags[ab.links.remember.tags.abActiveDimension + 'X'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Y']: tags[ab.links.remember.tags.abActiveDimension + 'Y'],\r\n            [ab.links.remember.tags.abActiveDimension + 'Z']: tags[ab.links.remember.tags.abActiveDimension + 'Z'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationX']: tags[ab.links.remember.tags.abActiveDimension + 'RotationX'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationY']: tags[ab.links.remember.tags.abActiveDimension + 'RotationY'],\r\n            [ab.links.remember.tags.abActiveDimension + 'RotationZ']: tags[ab.links.remember.tags.abActiveDimension + 'RotationZ'],\r\n        }\r\n    },\r\n    dependencies: [\r\n        {\r\n            askID: 'uuabConfigurator'\r\n        }\r\n    ]\r\n}\r\n\r\nreturn shard;","onABArtifactReconstitute":"@const data = that.data;\r\n\r\ntags.chosenBIOS = data.bios;\r\ntags.chosenInstName = data.instName;\r\ntags.chosenPattern = data.defaultPattern;\r\ntags.chosenPatternStudio = data.defaultPatternStudio;\r\ntags.chosenUUABName = data.uuabName;\r\ntags.uuab_onUUABLoaded = data.onUUABLoaded ?? tags.template_onUUABLoaded;\r\ntags.uuabSetupLabel = data.uuabSetupLabel ?? \"configure uuab\";\r\ntags.prevBotID = data.prevBotID;\r\n\r\nif (data.dimensionData) {\r\n    for (const tagName in data.dimensionData) {\r\n        tags[tagName] = data.dimensionData[tagName];\r\n    }\r\n}\r\n\r\nif (data.eggParameters) {\r\n    const dimension = data.eggParameters.gridInformation?.dimension ?? 'home';\r\n    const dimensionX = data.eggParameters.gridInformation?.position?.x ?? 0;\r\n    const dimensionY = data.eggParameters.gridInformation?.position?.y ?? 0;\r\n\r\n    tags.dimension = dimension;\r\n    tags[dimension] = true;\r\n    tags[dimension + 'X'] = dimensionX;\r\n    tags[dimension + 'Y'] = dimensionY;\r\n\r\n    tags.chosenBIOS = 'free';\r\n    tags.uuab_onUUABLoaded = tags.template_onUUABLoaded;\r\n    tags.uuabSetupLabel = \"configure uuab\";\r\n    thisBot.showUUABSetupMenu();\r\n}\r\n\r\nthisBot.updateBillboardLabel();","onABStripArtifactInstanceDataFromBotData":"@const { data } = that;\r\n\r\ndelete data.tags.chosenBIOS;\r\ndelete data.tags.chosenPattern;\r\ndelete data.tags.chosenPatternStudio;\r\ndelete data.tags.chosenInstName;\r\ndelete data.tags.chosenUUABName;\r\ndelete data.tags.uuab_onUUABLoaded;\r\ndelete data.tags.uuabSetupLabel;\r\ndelete data.tags[data.tags.dimension];\r\ndelete data.tags[data.tags.dimension + 'X'];\r\ndelete data.tags[data.tags.dimension + 'Y'];\r\ndelete data.tags[data.tags.dimension + 'Z'];\r\ndelete data.tags[data.tags.dimension + 'RotationX'];\r\ndelete data.tags[data.tags.dimension + 'RotationY'];\r\ndelete data.tags[data.tags.dimension + 'RotationZ'];\r\ndelete data.tags.dimension;\r\ndelete data.tags.prevBotID;","abArtifactName":"uuabConfigurator","artifact":"ðŸ”—78e41503-c933-4f8a-817a-ba97bf8d5d27","createTest":"@const dimension = configBot.tags.mapPortal ? \"map\" : \"grid\";\r\n\r\nlet gridInfo;\r\nif (dimension == \"map\") {\r\n    gridInfo = {    \r\n        \"dimension\":tags.dimension,\r\n        \"position\":\r\n            {\r\n                \"x\":tags[tags.dimension + \"X\"] + ((Math.floor(Math.random() * 5) + 2) / 10000),\r\n                \"y\":tags[tags.dimension + \"Y\"] + ((Math.floor(Math.random() * 5) + 2) / 10000)\r\n            }\r\n    }\r\n} else {\r\n    gridInfo = {\r\n        \"dimension\":tags.dimension,\r\n        \"position\":\r\n            {\r\n                \"x\":tags[tags.dimension + \"X\"] + Math.floor(Math.random() * 5) + 2,\r\n                \"y\":tags[tags.dimension + \"Y\"] + Math.floor(Math.random() * 5) + 2\r\n            }\r\n    }\r\n}\r\n\r\nab.links.search.onLookupAskID({\r\n    askID: \"instCreatorWizard\",\r\n    sourceEvent: 'tool',\r\n    eggParameters: {\r\n        gridInformation: gridInfo,\r\n        initializationInfo: {\r\n            pattern: null,\r\n            studio: null,\r\n            linkTo: thisBot.id,\r\n            bios: 'local',\r\n            instName: 'uuab-redirect',\r\n            label: tags.chosenUUABName,\r\n            urlVariables: {\r\n                uuab: tags.chosenUUABName\r\n            },\r\n            completeOnLoad: true\r\n        }\r\n    },\r\n});","uuabSetupLabelFloatingBackgroundColor":"#bb78d6","uuabSetupLabelColor":"#382440","uuabConfigurator":"true","template_onUUABLoaded":"@//bios and inst handlers\r\nconst currentURL = new URL(configBot.tags.url);\r\nconst origin = currentURL.origin;\r\n\r\nlet newURL = new URL(origin);\r\n\r\nif (configBot.tags.comId) {\r\n    newURL.searchParams.append(\"comId\", configBot.tags.comId);\r\n}\r\n\r\nnewURL.searchParams.append(\"abStayAwake\", true);\r\n\r\nif (tags.bios == 'studio') {\r\n    if (tags.instName) {\r\n        newURL.searchParams.append(\"owner\", tags.defaultPatternStudio ?? 'player');\r\n        newURL.searchParams.append(\"inst\", tags.instName);\r\n        newURL.searchParams.append(\"gridPortal\", 'home');\r\n    } else {\r\n        newURL.searchParams.append(\"bios\", 'studio');\r\n    }\r\n} \r\nelse if (tags.bios == 'local') {\r\n    if (tags.instName) {\r\n        newURL.searchParams.append(\"staticInst\", tags.instName);\r\n        newURL.searchParams.append(\"gridPortal\", 'home');\r\n    } else {\r\n        newURL.searchParams.append(\"bios\", 'local');\r\n    }\r\n} \r\nelse if (tags.bios == 'free') {\r\n    if (tags.instName) {\r\n        newURL.searchParams.append(\"owner\", 'public');\r\n        newURL.searchParams.append(\"inst\", tags.instName);\r\n        newURL.searchParams.append(\"gridPortal\", 'home'); \r\n    } else {\r\n        newURL.searchParams.append(\"bios\", 'free');\r\n    }\r\n}\r\n\r\nif (configBot.tags.router) {\r\n    newURL.searchParams.append(\"router\", configBot.tags.router);\r\n}\r\n\r\n//Do not pass through just uuab\r\nif (configBot.tags.uuab) {\r\n    newURL.searchParams.append(\"uuab\", configBot.tags.uuab);\r\n}\r\n\r\nif (configBot.tags.launcher) {\r\n    newURL.searchParams.append(\"ask\", configBot.tags.launcher);\r\n} else {\r\n    newURL.searchParams.append(\"ask\", \"launcher\");\r\n}\r\n\r\nos.goToURL(newURL.href);","showUUABSetupMenu":"@shout('clearUUABSetupMenu');\r\n\r\nconfigBot.masks.menuPortal = 'uuabSetupMenu';\r\n\r\nconst menuTags = {\r\n    clearUUABSetupMenu: `@destroy(thisBot);`,\r\n    uuabSetupMenu: true,\r\n    uuabConfigurator: getLink(thisBot)\r\n}\r\n\r\nconst uuabNameButton = {\r\n    ...menuTags,\r\n    label: \"uuab name: \" + (tags.chosenUUABName || ''),\r\n    onClick: `@\r\n        const instName = await os.showInput(links.uuabConfigurator.tags.chosenUUABName || \"\", {\r\n            title: 'choose a name for your uuab'\r\n        });\r\n\r\n        links.uuabConfigurator.tags.chosenUUABName = instName;\r\n        links.uuabConfigurator.tags.uuabSetupLabel = instName;\r\n        links.uuabConfigurator.updateBillboardLabel();\r\n        links.uuabConfigurator.showUUABSetupMenu();\r\n    `,\r\n    uuabSetupMenuSortOrder: 1\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(uuabNameButton);\r\n\r\nconst biosButton = {\r\n    ...menuTags,\r\n    label: \"inst type: \" + (tags.chosenBIOS || ''),\r\n    dropdownSortOrder: 2,\r\n    dropdownOptions: [\r\n        {\r\n            label: \"free\",\r\n            ...menuTags,\r\n            onClick: `@\r\n                links.uuabConfigurator.tags.chosenBIOS = \"free\";\r\n                links.uuabConfigurator.showUUABSetupMenu();\r\n            `\r\n        },\r\n        {\r\n            label: \"studio\",\r\n            ...menuTags,\r\n            onClick: `@\r\n                links.uuabConfigurator.tags.chosenBIOS = \"studio\";\r\n                links.uuabConfigurator.showUUABSetupMenu();\r\n            `\r\n        },\r\n        {\r\n            label: \"local\",\r\n            ...menuTags,\r\n            onClick: `@\r\n                links.uuabConfigurator.tags.chosenBIOS = \"local\";\r\n                links.uuabConfigurator.showUUABSetupMenu();\r\n            `\r\n        }\r\n    ]\r\n}\r\n\r\nab.links.menu.abCreateMenuDropdown(biosButton);\r\n\r\n\r\nconst instNameButton = {\r\n    ...menuTags,\r\n    label: \"inst name: \" + (tags.chosenInstName || ''),\r\n    onClick: `@\r\n        const instName = await os.showInput(links.uuabConfigurator.tags.chosenInstName || \"\", {\r\n            title: 'choose an inst name'\r\n        });\r\n\r\n        links.uuabConfigurator.tags.chosenInstName = instName;\r\n        links.uuabConfigurator.showUUABSetupMenu();\r\n    `,\r\n    uuabSetupMenuSortOrder: 3\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(instNameButton);\r\n\r\n\r\nconst patternButton = {\r\n    ...menuTags,\r\n    label: \"pattern: \" + (tags.chosenPattern || \"\"),\r\n    onClick: `@\r\n        const patternName = await os.showInput(links.uuabConfigurator.tags.chosenPattern || \"\", {\r\n            title: 'choose a pattern for this uuab'\r\n        });\r\n\r\n        links.uuabConfigurator.tags.chosenPattern = patternName;\r\n\r\n        if (!links.uuabConfigurator.tags.chosenPatternStudio && authBot) {\r\n            links.uuabConfigurator.tags.chosenPatternStudio = authBot.id;\r\n        }\r\n        links.uuabConfigurator.showUUABSetupMenu();\r\n    `,\r\n    uuabSetupMenuSortOrder: 4\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(patternButton);\r\n\r\nconst patternStudioButton = {\r\n    ...menuTags,\r\n    label: \"pattern studio: \" + (tags.chosenPatternStudio ? tags.chosenPatternStudio != authBot?.id ? tags.chosenPatternStudio : 'user' : \"\"),\r\n    onClick: `@\r\n        const patternName = await os.showInput(links.uuabConfigurator.tags.chosenPatternStudio || \"\", {\r\n            title: 'what studio is this pattern in?'\r\n        });\r\n\r\n        links.uuabConfigurator.tags.chosenPatternStudio = patternName == 'user' ? authBot.id : patternName;\r\n        links.uuabConfigurator.showUUABSetupMenu();\r\n    `,\r\n    uuabSetupMenuSortOrder: 5\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(patternStudioButton);\r\n\r\nconst editOnUUABButton = {\r\n    ...menuTags,\r\n    label: \"edit onUUABLoaded\",\r\n    formAddress: 'edit',\r\n    onClick: `@\r\n        configBot.tags.tagPortal = links.uuabConfigurator.id + \".uuab_onUUABLoaded\";\r\n    `,\r\n    uuabSetupMenuSortOrder: 6\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(editOnUUABButton);\r\n\r\nconst createButton = {\r\n    ...menuTags,\r\n    label: \"save changes\",\r\n    formAddress: 'publish',\r\n    onClick: `@\r\n        if (links.uuabConfigurator.tags.chosenUUABName) {\r\n            links.uuabConfigurator.createUUAB();\r\n        } else {\r\n            os.toast(\"You must provide a uuab name\");\r\n        }\r\n        \r\n    `,\r\n    uuabSetupMenuSortOrder: 10,\r\n    \r\n}\r\n\r\nconst currentURL = new URL(configBot.tags.url);\r\nconst host = currentURL.host;\r\n//PUBLISH ASK\r\nconst pubButton = {\r\n    ...menuTags,\r\n    label: \"publish to \" + host + \" catalog\",\r\n    formAddress: 'call_made',\r\n    onClick: `@\r\n        if (!links.uuabConfigurator.tags.chosenUUABName) {\r\n            os.toast(\"You must provide a uuab name\");\r\n            links.uuabConfigurator.showUUABSetupMenu();\r\n            return;\r\n        }\r\n        const confirm = await os.showConfirm({\r\n            title: \"confirm request\",\r\n            content: \"request \" + links.uuabConfigurator.tags.chosenUUABName + \" to be published as a uuab?\",\r\n            confirmText: \"request\",\r\n            cancelText: \"cancel\"\r\n        })\r\n        if (confirm) {\r\n            //request ask\r\n            ab.links.store.abPublishAskID({askID: links.uuabConfigurator.tags.chosenUUABName, studioID: links.uuabConfigurator.tags.chosenPatternStudio ?? authBot.id, patternID: links.uuabConfigurator.tags.chosenUUABName})\r\n        }\r\n        links.uuabConfigurator.showUUABSetupMenu();\r\n    `,\r\n    uuabSetupMenuSortOrder: 11,\r\n}\r\n\r\n//TEST\r\nconst testButton = {\r\n    ...menuTags,\r\n    label: \"create test\",\r\n    formAddress: 'science',\r\n    onClick: `@\r\n        if (!links.uuabConfigurator.tags.chosenUUABName) {\r\n            os.toast(\"You must provide a uuab name\");\r\n            links.uuabConfigurator.showUUABSetupMenu();\r\n            return;\r\n        }\r\n\r\n        const confirm = await os.showConfirm({\r\n            title: \"confirm you have saved this uuab\",\r\n            content: \"If this uuab's changed have not been saved your uuab will not appear correctly.\",\r\n            confirmText: \"proceed\",\r\n            cancelText: \"cancel\"\r\n        })\r\n\r\n        if (confirm) {\r\n            links.uuabConfigurator.createTest();\r\n            shout(\"clearUUABSetupMenu\");\r\n        } else {\r\n            links.uuabConfigurator.showUUABSetupMenu();\r\n            return;\r\n        }\r\n        \r\n    `,\r\n    uuabSetupMenuSortOrder: 12,\r\n}\r\n\r\nif (!tags.chosenUUABName) {\r\n    createButton.menuItemStyle = {\r\n        filter: `brightness(50%)`\r\n    }\r\n    pubButton.menuItemStyle = {\r\n        filter: `brightness(50%)`\r\n    }\r\n\r\n    testButton.menuItemStyle = {\r\n        filter: `brightness(50%)`\r\n    }\r\n}\r\n\r\nab.links.menu.abCreateMenuButton(createButton);\r\nab.links.menu.abCreateMenuButton(pubButton);\r\nab.links.menu.abCreateMenuButton(testButton);\r\n","createUUAB":"@shout('clearUUABSetupMenu');\n\nlet bios = tags.chosenBIOS;\nlet instName = tags.chosenInstName;\nlet pattern = tags.chosenPattern;\nlet patternStudio = tags.chosenPatternStudio ?? authBot.id;\nlet uuabName = tags.chosenUUABName;\n\n//Create URL\nconst currentURL = new URL(configBot.tags.url);\nconst origin = currentURL.origin;\n\nlet newURL = new URL(origin);\n\nnewURL.searchParams.append(\"uuab\", uuabName);\n\nif (configBot.tags.comId) {\n    newURL.searchParams.append(\"comId\", configBot.tags.comId);\n}\n\ntags.channelURL = newURL.href;\n\n//create egg\nconst abArtifactShard = {\n    data: {\n        bios,\n        instName,\n        defaultPattern: pattern,\n        defaultPatternStudio: patternStudio,\n        uuabName,\n        onUUABLoaded: tags.uuab_onUUABLoaded\n    },\n    dependencies: [\n        {\n            askID: 'uuab'\n        }\n    ]\n};\n                \nconst uuabEgg = await ab.links.artifact.abCreateArtifactPromiseBot({\n                    abArtifactName: 'uuab',\n                    abArtifactInstanceID: uuid(),\n                    abArtifactShard,\n                });\n\nconsole.log(`${tags.system}.${tagName}]: uuab promise bot`, uuabEgg);\n\n//Publish to studio\nif (!authBot) {\n    console.log(`${tags.system}.${tagName}]: no authbot`);\n    await os.requestAuthBotInBackground();\n}\n\nif (!authBot) {\n    console.log(`${tags.system}.${tagName}]: User not logged in.`);\n    destroy(uuabEgg);\n    return;\n}\n\nconst studio = configBot.tags.studio ?? authBot.id;\nconfigBot.tags.selected_studioID = studio;\n\nconst publishAttempt = await ab.links.store.abPublishAB({ab: uuabName, target: uuabEgg, sourceEvent: 'uuab_egg_publish', studio: studio, publicFacing: true});\n\nif (tags.debug) {\n    console.log(`[${tags.system}.${tagName}] saveData publishAttempt 1:`, publishAttempt);\n}\n\nif (!publishAttempt.success) {\n    const permissions = await os.grantInstAdminPermission(studio);\n\n    if (tags.debug) {\n        console.log(`[${tags.system}.${tagName}] saveData permissions:`, permissions);\n    }\n\n    const secondPublishAttempt = await ab.links.store.abPublishAB({ab: uuabName, target: uuabEgg, sourceEvent: 'uuab_egg_publish', studio: studio, publicFacing: true});\n        \n    if (tags.debug) {\n        console.log(`[${tags.system}.${tagName}]  saveData publishAttempt 2`, secondPublishAttempt);\n    }\n\n    if (!secondPublishAttempt.success){\n        if (tags.debug) {\n            console.log(`[${tags.system}.${tagName}] Could not publish`, secondPublishAttempt);\n        }\n        os.toast(\"could not publish\");\n    } else {\n        os.toast(\"Publishing successful\");\n        ab.links.manifestation.abSetAwake({ awake: true });\n    }\n} else {\n    os.toast(\"Publishing successful\");\n}\n\n//delete egg\ndestroy(uuabEgg);\n\nshout(\"abMenuRefresh\");","clearUUABSetupMenu":"@configBot.masks.menuPortal = null;"}}}}